{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is my opinionated reference material to the Software Engineering 11\u201312 Syllabus for NSW. I aim to cover the entire syllabus and then some with detailed information, references to further reading, tutorials, worked examples and solutions. </p> <p>Warning</p> <p>This material is provided as is and has no guarantee of success in the HSC or any other exam. It is completed to the best of my knowledge and may contain errors or inaccuracies. It is intended to be used as a reference guide and not a substitute for classwork, homework, tutorials, and assessments.</p> <p>There are several reasons for creating this material:</p> <ol> <li>As of writing there is no Software Engineering textbook</li> <li>Students have asked for more details that they can refer to, above and beyond class slides and worksheets.</li> <li>Not everything on the Internet is true (shock horror) and students should be provided with accurate reference material as a base so as their own research will be more informed.</li> <li>I have 24 years of software engineering knowledge so why not give something back to the next generation of software engineers.</li> <li>The Syllabus is dense, lacks information, contradicts itself, has some outdated ideas and is somewhat poorly organised.</li> <li>Teachers do a great job with what they know but from my experience there is a very wide spectrum of teacher knowledge.</li> <li>Students shouldn't be disadvantaged based on their access to good, reliable information that can also be easily converted into their primary language.</li> </ol>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>My name is Aaron Beverley and I have had a long and varied career in Software Engineering working for:</p> <ul> <li>MASC a research division of Motorola working on a parasitics database for chip design, Verilog-AMS compiler and a breaking control system for the BMW 5 Series </li> <li>CISRA a research division of Canon working on a document management system, UI for a Canon TV and Document control system for printing</li> <li>Optiver a High Frequency Trading company, working and managing teams to build their back-end finance and middle office systems, trading platform and big data solution</li> <li>The Trade Desk a programmatic advertising company where I helped build the APAC region to 70+ developers, built and managed a team focused on functionality crucial to the APAC advertising experience and managed a team improving the developer experience, the CI/CD build process and weekly release.</li> </ul> <p>Prior to this I was a scientist working for QML and before that a few part time jobs bartending, merchandising, warehouse work and at a bowling alley. I have 2 graduate degrees, a Bachelor of Science in Microbiology and Biochemistry from The University of Queensland and a Bachelor of Information Technology from Griffith University. Over the past 20+ years I have gather some knowledge, managed some great people and made mistakes. I am at a cross road and have decided to head in a different direction and apply my knowledge to teaching Software subjects in NSW Secondary Schools. I have almost finished a Masters in Teaching (Secondary) at Macquarie University. My hope is that I can help the next generation with learning and understanding the craft of software development and technology. </p> <p>I have many hobbies, including gardening and have grown about 50 varieties of fruit and vegetables, I used to be a avid Ten Pin Bowler, I am always up for a grind in some open world PvE game, and when I have some spare time I tinker in my study with electronics, code or 3d printing.</p>"},{"location":"#conventions","title":"Conventions","text":"<p>All sections tagged with a  are directly related to the syllabus. </p> <p>Where possible I will include several different coding languages in examples. The syllabus does require Python and when taught clearly students should not have difficulty applying the same principles with other languages. By providing several languages it may give those students that have programmed in something different a handy reference of how to code in the pythonic way.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>This documentation was started as a solo effort but everyone is welcome to contribute. I don't profess to know everything about Software Engineering, or what is expected of students or teachers in delivering the syllabus described by NESA. Please, if you feel you have something to add, submit a GitHub request or if something small create a GitHub issue. I will do my best to get the addition incorporated quickly but I am working as a teacher and have my own priorities to address. I may also push back or ask for further input or clarity before accepting the change. </p>"},{"location":"#feedback","title":"Feedback","text":"<p>For any feedback, questions, issues or minor corrections please raise an issues ticket via github. </p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#a-j","title":"A - J","text":"<ol> <li>Branch : A separate line of development that can be merged back into the main branch.</li> <li>Commit : A record in a version control system that represents changes to a file or directory.</li> <li>DevOps : A software engineering methodology that aims to integrate the work of developing software with the operational requirements of managing the deployed solution.</li> <li>DNS : Domain Name Server</li> <li>FTP, SFTP : File Transfer Protocol and the Secure version of it</li> <li>FTE, FTEs : Full time engineers or Full time equivalents is a unit of measure around number of people required to complete some work.</li> <li>HTTP, HTTPS : Hypertext Transfer Protocol is a system of rules for sending information over the web. The S is for secure. HTTP</li> </ol>"},{"location":"glossary/#k-r","title":"K - R","text":"<ol> <li>Merge : A process of combining two or more branches into one branch.</li> <li>MTBF : Mean Time Between Failures is the average time a system operates before it fails. Common Metrics</li> <li>MTTR : Mean Time To Repair is the average time it takes to repair a system after it has failed. Common Metrics</li> </ol>"},{"location":"glossary/#s-z","title":"S - Z","text":"<ol> <li>Repository/Repo : The central location where your code is stored.</li> <li>SDLC : Software Development Life Cycle</li> <li>SemVer : Semantic Versioning is a set of rules for numbering and incrementing the version of software. Semantic Versioning 2.0.0</li> <li>SOLID : 5 principles of object oriented design described by Robert C. Martin. These stand for:<ul> <li>Single-responsibility Principle</li> <li>Open-closed Principle</li> <li>Liskov Substitution Principle</li> <li>Interface Segregation Principle </li> <li>Dependency Inversion Principle</li> </ul> </li> <li>TCP/IP : Description</li> </ol>"},{"location":"Syllabus/","title":"Overview","text":"<p>A mapping of syllabus items to sections within this site is provided. This mapping follows the structure of the syllabus as this site has used a different structure to learning software engineering. This mapping also stands as a check that all items of the syllabus are covered.</p> <p>(1) </p> <ol> <li>From NESA Software Engineering 11 &amp; 12 Syllabus. https://curriculum.nsw.edu.au/learning-areas/tas/software-engineering-11-12-2022/overview</li> </ol> <p>The approach taken is more in alignment with the \"shift left\" ideology or DevOps<sup>3</sup> processes to the software development life cycle. The term \"shift left\" means to move concerns and consideration in the SDLC closer to the beginning rather than the end of the life-cycle to ensure software meets design. Examples of this are:</p> <ul> <li>consider security issues up front and develop code that builds in security from the get go rather than an add-on</li> <li>focus on testing, code quality and performance earlier in the development cycle</li> <li>create the build, test process before building the software</li> </ul> <p>The other side of DevOps is shift right where testing, quality and performance is done under real-world conditions. This means software running in production can handle real user load while maintaining quality. </p>"},{"location":"Syllabus/object-oriented-paradigm/","title":"The Object Oriented Paradigm","text":"<p>NESA</p>"},{"location":"Syllabus/object-oriented-paradigm/#understanding-oop","title":"Understanding OOP","text":"Key Description Reference Comment  OO-UO-01 Apply the key features of an object-oriented programming (OOP) language  OO-UO-01.01  objects  OO-UO-01.02  classes  OO-UO-01.03  encapsulation Encapsulation  OO-UO-01.04  abstraction  OO-UO-01.05  inheritance  OO-UO-01.06  generalisation  OO-UO-01.07  polymorphism  OO-UO-02 Compare procedural programming with OOP Programming Paradigms  OO-UO-03 Use data flow diagrams, structure charts and class diagrams to represent a system Design  OO-UO-04 Describe the process of design used to develop code in an OOP language  OO-UO-04.01  task definition  OO-UO-04.02  top-down and bottom-up  OO-UO-04.03  facade pattern Software Design Patterns Another odd decision to only focus on the facade pattern when there are many more and more commonly used ones  OO-UO-04.04  agility Not sure what this means. You don't normally talk about code from an agility pov, I can only think they mean the -ilitiies of software engineering  OO-UO-05 Assess the effectiveness of programming code developed to implement an algorithm Big-O  OO-UO-06 Investigate how OOP languages handle message-passing between objects  OO-UO-07 Explain code optimisation in software engineering Big-O  OO-UO-08 Outline the features of OOP that support collaborative code development I would expect things like clean code and SOLID to discussed. These and below are just good software practices and not specific to OO OO-UO-08.01  consistency Clean Code OO-UO-08.02  code commenting Clean Code OO-UO-08.03  version control RCS I am assuming this means revision control systems and not SemVer<sup>13</sup> or similar OO-UO-08.04  feedback Code Reviews Feedback is great but not specific to coding"},{"location":"Syllabus/object-oriented-paradigm/#programming-in-oop","title":"Programming in OOP","text":"Key Description Reference Comment OO-PO-01 Design and implement computer programs involving branching, iteration and functions in an OOP language for an identified need or opportunity OO-PO-02 Implement and modify OOP programming code OO-PO-02.01  clear and uncluttered mainline SOLID Seems to be a relic of the old syllabus. OO is far more dynamic and this should really be about SOLID<sup>14</sup> principles OO-PO-02.01  one logical task per subroutine SOLID Another relic. I guess they mean single responsibility principle. OO-PO-02.02  use of stubs Not an OO principle, just general development and more likely used when testing OO-PO-02.03  use of control structures and data structures OO-PO-02.04  ease of maintenance -ilities and Clean Code OO-PO-02.05  version control Deja-vu OO-PO-02.06  regular backup I guess this would be your git workflow using github or similar OO-PO-03 Apply methodologies to test and evaluate code OO-PO-03.01  unit, subsystem and system testing Testing OO-PO-03.02  black, white and grey box testing Testing OO-PO-03.03  quality assurance Cyclo-metrics, linters, \u00af\\(\u30c4)/\u00af"},{"location":"Syllabus/object-oriented-paradigm/#outcomes","title":"Outcomes","text":""},{"location":"Syllabus/programming-fundamentals/","title":"Programming Fundamentals","text":"<p>NESA</p>"},{"location":"Syllabus/programming-fundamentals/#software-development","title":"Software Development","text":"Key Description Reference PF-SD-01 Explore fundamental software development steps used by programmers when designing software SDLC PF-SD-01.1  requirements definition PF-SD-01.2  determining specifications PF-SD-01.3  design PF-SD-01.4  development PF-SD-01.5  integration PF-SD-01.6  testing and debugging PF-SD-01.7  installation PF-SD-01.8  maintenance PF-SD-02 Research and evaluate the prevalence and use of online code collaboration tools"},{"location":"Syllabus/programming-fundamentals/#designing-algorithms","title":"Designing Algorithms","text":"Key Description Reference PF-DA-01 Apply computational thinking and algorithmic design by defining the key features of standard algorithms, including sequence, selection, iteration and identifying data that should be stored PF-DA-02 Apply divide and conquer and backtracking as algorithmic design strategies PF-DA-03 Develop structured algorithms using pseudocode and flowcharts, including the use of subprograms PF-DA-04 Use modelling tools including structure charts, abstraction and refinement diagrams to support top-down and bottom-up design PF-DA-05 Analyse the logic and structure of written algorithms PF-DA-05  determining inputs and outputs PF-DA-05  determining the purpose of the algorithm PF-DA-05  desk checking and peer checking PF-DA-05  determining connections of written algorithms to other subroutines or functions PF-DA-06  Identify procedures and functions in an algorithm PF-DA-07  Experiment with object-oriented programming, imperative, logic and functional programming paradigms Programming Paradigms"},{"location":"Syllabus/programming-fundamentals/#data-for-software-engineering","title":"Data for Software Engineering","text":"Key Description Reference Comment PF-DSA-01 Investigate the use of number systems for computing purposes, including binary, decimal and hexadecimal Data Types PF-DSA-02 Represent integers using two\u2019s complement Data Types PF-DSA-03 Investigate standard data types Data Types PF-DSA-03.01  char (character) and string Data Types PF-DSA-03.02  Boolean Data Types PF-DSA-03.03  real Data Types There is no real data type. float, double is the closest you get in any language PF-DSA-03.04  single precision floating point Data Types PF-DSA-03.05  integer Data Types PF-DSA-03.06  date and time Data Types PF-DSA-04 Create data dictionaries as a tool to describe data and data types, structure data, and record relationships Databases PF-DSA-05 Use data structures of arrays, records, trees and sequential files Data Structures"},{"location":"Syllabus/programming-fundamentals/#developing-solutions-with-code","title":"Developing Solutions with Code","text":"Key Description Reference Comment PF-DSC-01 Apply skills in computational thinking and programming to develop a software solution PF-DSC-01.01  converting an algorithm into code PF-DSC-01.02  using control structures PF-DSC-01.03  using data structures PF-DSC-01.04  using standard modules PF-DSC-01.05  creating relevant subprograms that incorporate parameter passing PF-DSC-02 Implement data structures that support data storage PF-DSC-02.01  single and multidimensional arrays PF-DSC-02.02  lists PF-DSC-02.03  trees PF-DSC-02.04  stacks PF-DSC-02.05  hash tables PF-DSC-03 Compare the execution of the Waterfall and Agile project management models as applied to software development SDLC Odd place for this PF-DSC-04 Test and evaluate solutions, considering key aspects including functionality, performance, readability of code, quality of documentation PF-DSC-05 Use debugging tools Missing the simplest of debugging tools, the trusted print statement PF-DSC-05.01  breakpoints PF-DSC-05.02  single line stepping PF-DSC-05.03  watches PF-DSC-05.04  interfaces between functions PF-DSC-05.05  debugging output statements PF-DSC-05.06  debugging software available in an integrated development environment (IDE)  PF-DSC-06 Determine sets of suitable test data PF-DSC-06.01  boundary values PF-DSC-06.02  path coverage PF-DSC-06.03  faulty and abnormal data PF-DSC-07 Determine typical errors experienced when developing code, including syntax, logic and runtime, and explain their likely causes"},{"location":"Syllabus/programming-mechatronics/","title":"Programming Mechatronics","text":"<p>NESA</p> <p>This document maps codes to syllabus dot points for the Programming Mechatronics topic in NSW education.</p> <ul> <li>PM = Programming Mechatronics<ul> <li>UM = Understanding Mechatronic Hardware and Software</li> <li>DC = Designing Control Algorithms</li> <li>PB = Programming and Building</li> </ul> </li> </ul>"},{"location":"Syllabus/programming-mechatronics/#understanding-mechatronic-hardware-and-software","title":"Understanding Mechatronic Hardware and Software","text":"Key Description Reference Comment  PM-UM-01 Outline applications of mechatronic systems in a variety of specialised fields  PM-UM-02 Identify the hardware requirements to run a program and the effect on code development  PM-UM-02.01  assessing the relationship of micro-controllers and the central processing unit (CPU)  PM-UM-02.02  the influence of instruction set and opcodes  PM-UM-02.03  the use of address and data registers  PM-UM-03 Identify and describe a range of sensors, actuators and end effectors/manipulators within existing mechatronic systems  PM-UM-03.01  motion sensors  PM-UM-03.02  light level sensors  PM-UM-03.03  hydraulic actuators  PM-UM-03.04  robotic grippers  PM-UM-04 Use different types of data and understand how it is obtained and processed in a mechatronic system, including diagnostic data and data used for optimisation  PM-UM-05 Experiment with software to control interactions and dependencies within mechatronic systems  PM-UM-05.01  motion constraints  PM-UM-05.02  degrees of freedom  PM-UM-05.03  combination of subsystems  PM-UM-05.04  combination of sensors, actuators and end effectors to create viable subsystems  PM-UM-06 Determine power, battery and material requirements for components of a mechatronic system  PM-UM-07 Develop wiring diagrams for a mechatronic system, considering data and power supply requirements  PM-UM-08 Determine specialist requirements that influence the design and functions of mechatronic systems designed for people with disability"},{"location":"Syllabus/programming-mechatronics/#designing-control-algorithms","title":"Designing Control Algorithms","text":"Key Description Reference Comment  PM-DCA-01 Develop, modify and apply algorithms to control a mechatronic system  PM-DCA-02 Explore the algorithmic patterns, code and applications for open and closed control systems  PM-DCA-03 Outline the features of an algorithm and program code used for autonomous control"},{"location":"Syllabus/programming-mechatronics/#programming-and-building","title":"Programming and Building","text":"Key Description Reference Comment  PM-PB-01 Design, develop and produce a mechatronic system for a real-world problem  PM-PB-01.01  software control  PM-PB-01.02  mechanical engineering  PM-PB-01.03  electronics and mathematics  PM-PB-02 Implement algorithms and design programming code to drive mechatronic devices  PM-PB-03 Develop simulations and prototypes of a potential mechatronic system to test programming code  PM-PB-04 Design, develop and implement programming code for a closed loop control system  PM-PB-05 Apply programming code to integrate sensors, actuators and end effectors/manipulators  PM-PB-06 Implement specific control algorithms that enhance the performance of a mechatronic system  PM-PB-07 Design, develop and implement a user interface (UI) to control a mechatronic system  PM-PB-08 Create and use unit tests to determine the effectiveness and repeatability of each component\u2019s control algorithm"},{"location":"Syllabus/se-project/","title":"Software Engineering Project","text":"<p>NESA</p>"},{"location":"Syllabus/se-project/#identifying-and-defining","title":"Identifying and Defining","text":"Key Description Reference Comment  SE-ID-01 Define and analyse the requirements of a problem  SE-ID-01.01  demonstrating need(s) or opportunities  SE-ID-01.02  assessing scheduling and financial feasibility  SE-ID-01.03  generating requirements including functionality and performance  SE-ID-01.04  defining data structures and data types  SE-ID-01.05  defining boundaries  SE-ID-02 Explore tools used to develop ideas and generate solutions  SE-ID-02.01  brainstorming, mind-mapping and storyboards  SE-ID-02.01  data dictionaries, including selecting appropriate data types  SE-ID-02.01  algorithm design  SE-ID-02.01  code generation  SE-ID-02.01  testing and debugging  SE-ID-02.01  installation  SE-ID-02.01  maintenance  SE-ID-03 Investigate types of software implementation methods This should be installation not implementation  SE-ID-03.01  direct  SE-ID-03.02  phased  SE-ID-03.03  parallel  SE-ID-03.04  pilot"},{"location":"Syllabus/se-project/#research-and-planning","title":"Research and Planning","text":"Key Description Reference Comment  SE-RP-01 Research and use the Waterfall software development approach  SE-RP-01.01  logical progression of steps used throughout the life cycle  SE-RP-01.02  stages of \u2018waterfall\u2019  SE-RP-01.03  advantages and disadvantages  SE-RP-01.04  scale and types of developments  SE-RP-02 Research and use the Agile software development approach  SE-RP-02.01  rate of developing a final solution  SE-RP-02.02  method tailoring  SE-RP-02.03  iteration workflow  SE-RP-02.04  scale and types of developments  SE-RP-03 Research the WAgile software development approach  SE-RP-03.01  understanding it is a hybrid model  SE-RP-03.02  analysis of the \u2018when\u2019 and \u2018how\u2019 intervention is applied during the development life cycle  SE-RP-03.03  scale and types of developments  SE-RP-04 Apply project management to plan and conduct the development and implementation of a project and software engineering solution  SE-RP-04.01  scheduling and tracking using a software tool, including Gantt charts  SE-RP-04.02  using collaboration tools  SE-RP-05 Explore social and ethical issues associated with project work, including working individually, collaboratively and responding to stakeholders  SE-RP-06 Explore communication issues associated with project work  SE-RP-03.01  involving and empowering the client  SE-RP-03.02  enabling feedback  SE-RP-03.03  negotiating  SE-RP-07 Investigate how software engineering solutions are quality assured  SE-RP-03.01  defining criteria on which quality will be judged  SE-RP-03.02  ensuring requirements are met using a continual checking process  SE-RP-03.03  addressing compliance and legislative requirements  SE-RP-08 Demonstrate the use of modelling tools  SE-RP-09 Explain the contribution of back-end engineering to the success and ease of software development  SE-RP-02.01  technology used  SE-RP-02.02  error handling  SE-RP-02.03  interfacing with front end  SE-RP-02.04  security engineering"},{"location":"Syllabus/se-project/#producing-and-implementing","title":"Producing and Implementing","text":"Key Description Reference Comment  SE-PI-01 Design, construct and implement a solution to a software problem using appropriate development approach(es)  SE-PI-02 Present a software engineering solution using presentation software  SE-PI-03 Develop, construct and document algorithms  SE-PI-04 Allocate resources to support the development of a software engineering solution  SE-PI-05 Demonstrate the use of programmed data backup  SE-PI-06 Implement version control when developing a software engineering solution  SE-PI-07 Explore strategies to respond to difficulties when developing a software engineering solution  SE-PI-07.01  looking for a solution online  SE-PI-07.02  collaboration with peers  SE-PI-07.03  outsourcing  SE-PI-08 Propose an additional innovative solution using a prototype and user interface (UI) design"},{"location":"Syllabus/se-project/#testing-and-evaluating","title":"Testing and Evaluating","text":"Key Description Reference Comment  SE-TE-01 Apply methodologies to test and evaluate code  SE-TE-02 Use a language-dependent code optimisation technique  SE-TE-03 Analyse and respond to feedback  SE-TE-04 Evaluate the effectiveness of a software engineering solution  SE-TE-04.01  developing a report to synthesise feedback  SE-TE-04.02  developing a test plan  SE-TE-04.03  testing data used/generated based on path and boundary testing  SE-TE-04.04  comparing actual output with expected output <p>Link</p>"},{"location":"Syllabus/secure-software/","title":"Secure Software Architecture","text":"<p>NESA</p>"},{"location":"Syllabus/secure-software/#designing-software","title":"Designing Software","text":"Key Description Reference Comment  SS-DS-01 Describe the benefits of developing secure software  SS-DS-01.01  data protection  SS-DS-01.02  minimising cyber attacks and vulnerabilities  SS-DS-02 Interpret and apply fundamental software development steps to develop secure code  SS-DS-02.01  requirements definition  SS-DS-02.02  determining specifications  SS-DS-02.03  design  SS-DS-02.04  development  SS-DS-02.05  integration  SS-DS-02.06  testing and debugging  SS-DS-02.07  installation  SS-DS-02.08  maintenance  SS-DS-03 Describe how the capabilities and experience of end users influence the secure design features of software"},{"location":"Syllabus/secure-software/#developing-secure-code","title":"Developing Secure Code","text":"Key Description Reference Comment  SS-SC-01 Explore fundamental software design security concepts when developing programming code  SS-SC-01.01  confidentiality  SS-SC-01.02  integrity  SS-SC-01.03  availability  SS-SC-01.04  authentication  SS-SC-01.05  authorisation  SS-SC-01.06  accountability  SS-SC-02 Apply security features incorporated into software including data protection, security, privacy and regulatory compliance  SS-SC-03 Use and explain the contribution of cryptography and sandboxing to the \u2018security by design\u2019 approach in the development of software solutions  SS-SC-04 Use and explain the \u2018privacy by design\u2019 approach in the development of software solutions  SS-SC-04.01  proactive not reactive approach  SS-SC-04.02  embed privacy into design  SS-SC-04.03  respect for user privacy  SS-SC-05 Test and evaluate the security and resilience of software by determining vulnerabilities, hardening systems, handling breaches, maintaining business continuity and conducting disaster recovery  SS-SC-06 Apply and evaluate strategies used by software developers to manage the security of programming code  SS-SC-06.01  code review  SS-SC-06.02  static application security testing (SAST)  SS-SC-06.03  dynamic application security testing (DAST)  SS-SC-06.04  vulnerability assessment  SS-SC-06.05  penetration testing  SS-SC-07 Design, develop and implement code using defensive data input handling practices, including input validation, sanitisation and error handling  SS-SC-08 Design, develop and implement a safe application programming interface (API) to minimise software vulnerabilities  SS-SC-09 Design, develop and implement code considering efficient execution for the user  SS-SC-09.01  memory management How to do memory management with python?  SS-SC-09.02  session management  SS-SC-09.03  exception management Exception Handling  SS-SC-10 Design, develop and implement secure code to minimise vulnerabilities in user action controls  SS-SC-10.01  broken authentication and session management  SS-SC-10.01  cross-site scripting (XSS) and cross-site request forgery (CSRF)  SS-SC-10.01  invalid forwarding and redirecting  SS-SC-10.01  race conditions  SS-SC-02 Design, develop and implement secure code to protect user file and hardware vulnerabilities from file attacks and side channel attacks"},{"location":"Syllabus/secure-software/#impact-of-safe-and-secure-software-development","title":"Impact of Safe and Secure Software Development","text":"Key Description Reference Comment  SS-IS-01 Apply and describe the benefits of collaboration to develop safe and secure software  SS-IS-01.01  considering various points of view  SS-IS-01.02  delegating tasks based on expertise  SS-IS-01.03  quality of the solution  SS-IS-02 Investigate and explain the benefits to an enterprise of the implementation of safe and secure development practices  SS-IS-02.01  improved products or services  SS-IS-02.02  influence on future software development  SS-IS-02.03  improved work practices  SS-IS-02.04  productivity  SS-IS-02.05  business interactivity  SS-IS-03 Evaluate the social, ethical and legal issues and ramifications that affect people and enterprises resulting from the development and implementation of safe and secure software  SS-IS-03.01  employment  SS-IS-03.02  data security  SS-IS-03.03  privacy  SS-IS-03.04  copyright  SS-IS-03.05  intellectual property  SS-IS-03.06  digital disruption"},{"location":"Syllabus/software-automation/","title":"Software Automation","text":"<p>NESA</p>"},{"location":"Syllabus/software-automation/#algorithms-in-machine-learning","title":"Algorithms in Machine Learning","text":"Key Description Reference Comment  SA-AM-01 Investigate how machine learning (ML) supports automation through the use of DevOps, robotic process automation (RPA) and business process automation (BPA) These are 4 separate topics and should not be conflated  SA-AM-02 Distinguish between artificial intelligence (AI) and ML AI  SA-AM-03 Explore models of training ML  SA-AM-03.01  supervised learning  SA-AM-03.02  unsupervised learning  SA-AM-03.03  semi-supervised learning  SA-AM-03.04  reinforcement learning  SA-AM-04 Investigate common applications of key ML algorithms  SA-AM-04.01  data analysis and forecasting  SA-AM-04.02  virtual personal assistants  SA-AM-04.03  image recognition  SA-AM-05 Research models used by software engineers to design and analyse ML  SA-AM-05.01  decision trees  SA-AM-05.02  neural networks  SA-AM-06 Describe types of algorithms associated with ML  SA-AM-06.01  linear regression  SA-AM-06.02  logistic regression  SA-AM-06.03  K-nearest neighbour"},{"location":"Syllabus/software-automation/#programming-for-automation","title":"Programming for Automation","text":"Key Description Reference Comment  SA-PA-01 Design, develop and apply ML regression models using an OOP to predict numeric values  SA-PA-01.01  linear regression  SA-PA-01.02  polynomial regression Why is this not consistent with the previous section and do K-nearest?  SA-PA-01.03  logistic regression  SA-PA-02 Apply neural network models using an OOP to make predictions"},{"location":"Syllabus/software-automation/#significance-and-impact-of-ml-and-ai","title":"Significance and impact of ML and AI","text":"Key Description Reference Comment  SA-SI-01 Assess the impact of automation on the individual, society and the environment  SA-SI-01.01  safety of workers  SA-SI-01.02  people with disability  SA-SI-01.03  the nature and skills required for employment  SA-SI-01.04  production efficiency, waste and the environment  SA-SI-01.05  the economy and distribution of wealth  SA-SI-02 Explore by implementation how patterns in human behaviour influence ML and AI software development  SA-SI-02.01  psychological responses  SA-SI-02.02  patterns related to acute stress response  SA-SI-02.03  cultural protocols  SA-SI-02.04  belief systems  SA-SI-03 Investigate the effect of human and dataset source bias in the development of ML and AI solutions"},{"location":"Syllabus/web-development/","title":"Programming for the Web","text":"<p>NESA</p>"},{"location":"Syllabus/web-development/#data-transmission-using-the-web","title":"Data transmission using the web","text":"Key Description Reference Comment  PW-DT-01 Explore the applications of web programming  PW-DT-01.01  interactive website/webpages  PW-DT-01.02  e-commerce  PW-DT-01.03  progressive web apps (PWAs)  PW-DT-02 Investigate and practise how data is transferred on the internet  PW-DT-02.01  data packets  PW-DT-02.02  internet protocol (IP) addresses, including IPv4  PW-DT-02.03  domain name systems (DNS)  PW-DT-03 Investigate and describe the function of web protocols and their ports  PW-DT-03.01 HTTP<sup>7</sup>, HTTPS<sup>7</sup>  PW-DT-03.01 TCP/IP<sup>15</sup>  PW-DT-03.01 DNS<sup>4</sup>  PW-DT-03.01 FTP<sup>5</sup>, SFTP<sup>5</sup>  PW-DT-03.01  SSL, TLS  PW-DT-03.01  SMTP, POP 3, IMAP  PW-DT-04 Explain the processes for securing the web  PW-DT-04.01  Secure Sockets Layer (SSL) certificates  PW-DT-04.02  encryption algorithms  PW-DT-04.03  encryption keys  PW-DT-04.04  plain text and cipher text  PW-DT-04.05  authentication and authorisation  PW-DT-04.06  hash values  PW-DT-04.07  digital signatures  PW-DT-05 Investigate the effect of big data on web architecture This misses 1/2 the picture as it can be collected from web but really used in ML  PW-DT-05.01  data mining  PW-DT-05.02  metadata  PW-DT-05.03  streaming service management"},{"location":"Syllabus/web-development/#designing-web-applications","title":"Designing web applications","text":"Key Description Reference Comment  PW-DW-01 Investigate and explain the role of the World Wide Web Consortium (W3C) in the development of applications for the web  PW-DW-01.01  Web Accessibility Initiative (WAI)  PW-DW-01.02  internationalisation  PW-DW-01.03  web security  PW-DW-01.04  privacy  PW-DW-01.05  machine-readable data  PW-DW-02 Model elements that form a web development system  PW-DW-02.01  client-side (front-end) web programming  PW-DW-02.02  server-side (back-end) web programming  PW-DW-02.03  interfacing with databases that are based on Structured Query Language (SQL) or non-SQL  PW-DW-03 Explore and explain the influence of a web browser on web development, including the use of developer (dev) tools  PW-DW-04 Investigate cascading style sheets (CSS) and its impact on the design of a web application  PW-DW-04.01  consistency of appearance  PW-DW-04.02  flexibility with browsers or display devices Responsive  PW-DW-04.03  CSS maintenance tools  PW-DW-05 Investigate the reasons for version control and apply it when developing web application RCS Do they mean versioning here as that does have an impact on web and apis  PW-DW-06 Explore the types and significance of code libraries for front-end web development  PW-DW-06.01  frameworks that control complex web applications  PW-DW-06.02  template engines  PW-DW-06.03  pre-designed CSS classes  PW-DW-07 Explain the use and development of open-source software in relation to web development Open Source  PW-DW-08 Investigate methods to support and manage the load times of web pages/applications  PW-DW-09 Research, experiment with and evaluate the prevalence and use of web content management systems (CMS)  PW-DW-10 Assess the contribution of back-end web development to the success of a web application  PW-DW-11 Observe and describe the back-end process used to manage a web request  PW-DW-11.01  role of webserver software  PW-DW-11.01  web framework  PW-DW-11.01  objects  PW-DW-11.01  libraries  PW-DW-11.01  databases  PW-DW-12 Develop a web application using an appropriate scripting language with shell scripts to make files and directories, and searching for text in a text file Javascript  PW-DW-13 Apply a web-based database and construct script that executes SQL What is a web database? I guess they mean a database accessed by a web application. Also, why shoehorn this into web?  PW-DW-13.01  selecting fields  PW-DW-13.02  incorporating \u2018group by\u2019  PW-DW-13.03  common SQL queries  PW-DW-13.04  constraints using WHERE keyword  PW-DW-13.05  table joins  PW-DW-14 Compare Object-Relational Mapping (ORM) to SQL ORM This is not web specific.  PW-DW-15 Describe how collaborative work practices between front-end and back-end developers improve the development of a web solution Big assumption here. Many companies run a full stack solution requiring full stack developers and not separate roles. Plus why only improve there are just as many deteriorating issues.  PW-DW-16 Design, develop and implement a progressive web app (PWA)  PW-DW-16.01  the application of design and user interface (UI) and user experience (UX) principles of font, colour, audio, video and navigation  PW-DW-16.02  a UI that considers accessibility and inclusivity"},{"location":"fundamentals/algorithms/","title":"Algorithms","text":""},{"location":"fundamentals/asynch_and_threading/","title":"Asynchronous and Threading","text":"<p>Note</p> <p>This is not part of the Syllabus but is important in modern computing. </p> <p>Devices like the Arduino Uno have a single central processing unit (CPU) or core. This was the same for the majority of computers up until about 2001 for commercial computing and 2005 for personal computers when the duel core Pentium processor was released. Since then more cores have been added and these days you home PC could have up to 24 cores and 32 threads. Also note, that threads for a CPU are different from software threading. Your mobile phone will have up to 8 cores in it. </p> <p>What does all this mean? <code>\u00af\\_(\u30c4)_/\u00af</code></p>"},{"location":"fundamentals/asynch_and_threading/#asynchronous","title":"Asynchronous","text":"<p>Is the ability for a single thread or process to pause what it is doing to give CPU time back to other processes that might need it. This is typically used in processes that can take a long time to complete like a request sent over the Internet, reading a file or a query on a database to name a few.</p> <p>Consider someone who needs to call a service like an airline. When they make the call they get put in a queue waiting for someone to answer. This is a synchronous task as you cannot really do anything while you are waiting for the person on the other end to answer the call. If however, they offer a callback service so that when a customer representative is available the will call you, this is asynchronous as you can hang up the phone and go about doing other things until the call you back.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor User\n    User-&gt;&gt;WebForm: Enter your details\n    User-&gt;&gt;WebForm: Press Submit\n    WebForm-&gt;&gt;+Database: Async(Process Request)\n    WebForm-&gt;&gt;User: Show spinning wheel\n    Database--&gt;&gt;-WebForm: Success\n    WebForm-&gt;&gt;User: Update Display</code></pre>"},{"location":"fundamentals/asynch_and_threading/#further-information","title":"Further Information","text":""},{"location":"fundamentals/asynch_and_threading/#threading","title":"Threading","text":"<p>Is the ability for there to be multiple processes running at the same time. This is possible on a single core machine but requires logic in the operating system to interrupt each process storing the state of the process to allow another process to run. When you have multiple cores then each thread can run on a separate core to speed up the compute time.</p> <p>Consider you are working on a group project. When you get the project you break it up into multiple parts so that each of you can work on it separately. Each person is acting as a separate thread of work doing their own processing. So, maybe someone does the drawings, another does the text and the third sources the materials for the poster. When you combine your work on the poster this is the same as the threads finishing and the results being collected.</p> <pre><code>sequenceDiagram\n    actor Client1\n    actor Client2\n    par Client1 to Server\n        Client1-&gt;&gt;Server: Request some data\n        Server--&gt;&gt;Client1: Response\n    and Client2 to Server\n        Client2-&gt;&gt;Server: Request other data\n        Server--&gt;&gt;Client2: Response\n    end</code></pre>"},{"location":"fundamentals/asynch_and_threading/#further-information_1","title":"Further Information","text":""},{"location":"fundamentals/big_o/","title":"Algorithm Complexity","text":"<p>Algorithm complexity is a measure of the efficiency of an algorithm. It describes how the time or space requirements of an algorithm grow as the size of the input increases. The most common way to express this is using Big O notation, which provides an upper bound on the growth rate of the algorithm. This helps in understanding the scalability and performance of algorithms.</p>"},{"location":"fundamentals/big_o/#big-o-notation","title":"Big O Notation","text":"<p>Big O notation describes the limiting behaviour of a function when the argument tends towards a particular value or infinity. In the context of algorithms, it is used to describe how the running time or space requirements grow as the input size increases.</p> <p>The general form of Big O notation is:  $$ f(n) \\leq O(g(n)) $$ where \\(f(n)\\) represents the running time or space requirements of an algorithm with input size \\(n\\), and \\(g(n)\\) represents a function that describes the growth rate of the algorithm. The symbol \\(\\leq\\) is used to indicate that the growth rate of \\(f(n)\\) is less than or equal to the growth rate of \\(g(n)\\).</p>"},{"location":"fundamentals/big_o/#common-big-o-notations","title":"Common Big O Notations","text":"<p>Here are some common Big O notations and their meanings:</p> <ul> <li>O(1): Constant time complexity. The running time does not depend on the size of the input.</li> <li>O(log n): Logarithmic time complexity. The running time grows logarithmically with the size of the input.</li> <li>O(n): Linear time complexity. The running time grows linearly with the size of the input.</li> <li>O(n log n): Linearithmic time complexity. The running time grows as a product of the input size and its logarithm.</li> <li>O(n^2): Quadratic time complexity. The running time grows quadratically with the size of the input.</li> <li>O(2^n): Exponential time complexity. The running time grows exponentially with the size of the input.</li> </ul> <p>(1)</p> <ol> <li>Aaron Beverley, CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0, Created with Plotly.</li> </ol> Code <pre><code>import plotly.express as px\nimport pandas as pd\n\nimport math\n\ndef big_o_one(n):\n    \"\"\"O(1) operation\"\"\"\n    return 1\n\ndef big_o_n(n):\n    \"\"\"O(n) operation\"\"\"\n    return n\n\ndef big_o_n_squared(n):\n    \"\"\"O(n^2) operation\"\"\"\n    return n * n\n\ndef big_o_log_n(n):\n    \"\"\"O(log n) operation\"\"\"\n    return math.log(n, 2)\n\ndef big_o_n_log_n(n):\n    \"\"\"O(n log n) operation\"\"\"\n    return n * math.log(n, 2)\n\ndef big_o_exp_n(n):\n    \"\"\"O(e^n) operation\"\"\"\n    return 2 ** n\n\n# Create a DataFrame to store the results\nresults = pd.DataFrame(columns=[\"n\", \"big_o_one\", \"big_o_n\", \"big_o_n_squared\", \"big_o_log_n\", \"big_o_n_log_n\", \"big_o_exp_n\"])\nfor n in range(1, 8):\n    results.loc[n] = [n, big_o_one(n), big_o_n(n), big_o_n_squared(n), big_o_log_n(n), big_o_n_log_n(n), big_o_exp_n(n)]\n\n# Plot the results using Plotly Express\nfig = px.line(results, x=\"n\", y=[\"big_o_one\", \"big_o_n\", \"big_o_n_squared\", \"big_o_log_n\", \"big_o_n_log_n\", \"big_o_exp_n\"], title=\"Big O Notation Comparison\")\nfig.show()\n</code></pre>"},{"location":"fundamentals/data_structures/","title":"Data Structures","text":"<p>In all cases you should not need to implement these data structures yourself. Use the built in version for the language or use a library. The code below is provided to illustrate how these data structures are implemented. The code is valid and you could use it to debug or step through to get a better understanding of how they work.</p>"},{"location":"fundamentals/data_structures/#array","title":"Array","text":""},{"location":"fundamentals/data_structures/#multi-dimensional-array","title":"Multi-dimensional Array","text":""},{"location":"fundamentals/data_structures/#list","title":"List","text":"<p>A list is a sequence optimised for insertion and deletion of elements. A list is dynamic in size unlike and array that is of fixed size. Lists can grow and shrink as needed meaning they will be memory efficient although there is some overhead in maintaining the reference to the next and previous item. Lists are not ordered unless specifically made to be ordered and can have duplicate values. They are accessed sequentially both forward and backward although going backward is slower for a single linked list as you can only iterated over the list front the front. Random access is slower than other data structures.</p> <p>Note</p> <p>Every programming language has its own features when it comes to lists. Eg: C++ doesn't offer an index operator due to its definition in the language. </p> Action Parameters Description Performance Insert value Add the value to the end of the list O(1) Access index Fetch the value from the indexed location in the list O(n) Search value Find the value in the list Worst case O(n), Average case O(n/2), Best case O(1) Delete value Remove the value from the list. This can be language specific, some will remove only the first item found, others will remove all. Others will consider a delete being from the head or tail of the list only. Worst case O(n), Average case O(n/2), Best case O(1)"},{"location":"fundamentals/data_structures/#single-linked-list","title":"Single Linked List","text":"<p>Not commonly used, it is called a single linked list as it links in a single direction from the head to the next item in the list. </p>"},{"location":"fundamentals/data_structures/#double-linked-list","title":"Double Linked List","text":"<p>Double linked as it has references in both directions to traverse a list. This does use more memory that a single linked list but does improve significantly it usage. With this structure in place it can also be used as the basis for a stack, queue and deque (pronounced deck).</p>"},{"location":"fundamentals/data_structures/#benefits","title":"Benefits","text":"<ul> <li>It is more efficient than a single linked list when inserting and deleting nodes as it does not need to find the previous node.</li> <li>Insertion and deletion of nodes is faster as it does not need to find the previous node.</li> <li>Linked lists do not need to have all elements pre-allocated and can be resized dynamically during runtime.</li> <li>As memory is allocated dynamically, memory is not wasted as it is only allocated when needed.</li> </ul>"},{"location":"fundamentals/data_structures/#drawbacks","title":"Drawbacks","text":"<ul> <li>Random access is not efficient as it requires traversing the list from the beginning or end.</li> </ul>"},{"location":"fundamentals/data_structures/#when-to-use","title":"When to Use","text":"<ul> <li>When you need to insert or delete elements frequently to the head or tail of the list.</li> <li>When you need a dynamic list that can grow and shrink as needed.</li> </ul> Code PythonC#Rust <pre><code>class Node:\n    def __init__(self, data):\n        self.item = data\n        self.next: Node = None\n        self.prev: Node = None\n\n    def __repr__(self):\n        return f'Node: {self.item}'\n\nclass LinkedList:\n    def __init__(self):\n        self.head: Node = None\n        self.tail: Node = None\n\n    def add(self, data):\n        node = Node(data)\n        if self.tail != None:\n            node.prev = self.tail\n            self.tail.next = node\n        self.tail = node\n\n        if self.head == None:\n            self.head = node\n\n    def find(self, data) -&gt; bool:\n        node = self.head\n        while node != None and data != node.item:\n            node = node.next\n\n        return node != None\n\n    def remove(self, data) -&gt; bool:\n        if self.head == None:\n            return False\n\n        node = self.head\n        while node is not None and data != node.item:\n            node = node.next\n\n        if node == None:\n            return False\n\n        # only 1 node in the list\n        if node.prev == None and node.next == None:\n            self.head = None\n            self.tail = None\n            return True\n\n        # last node in the list\n        if node.next == None:\n            node.prev.next = None\n            self.tail = node.prev\n            node.prev = None\n        # first node in the list\n        elif node.prev == None:\n            node.next.prev = None\n            self.head = node.next\n            node.next = None\n        # node is in the middle of the list\n        else:\n            node.prev.next = node.next\n            node.next.prev = node.prev\n            node.next = None\n            node.prev = None\n\n        return True\n\n    def __repr__(self):\n        output = 'LinkedList: '\n        node = self.head\n        while node != None:\n            output += f'({node}), '\n            node = node.next\n\n        return output\n</code></pre>"},{"location":"fundamentals/data_structures/#ordered-list","title":"Ordered List","text":""},{"location":"fundamentals/data_structures/#stack","title":"Stack","text":""},{"location":"fundamentals/data_structures/#queue","title":"Queue","text":""},{"location":"fundamentals/data_structures/#deque","title":"Deque","text":""},{"location":"fundamentals/data_structures/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries is the general term for mapping a keys to values. There are many ways to implement them each with their specific features. These can be separated into 2 categories, those that allow multiple values to be associated with a value and those than can only have a single value. In some languages, like Python, a dictionary can be a data structure.</p>"},{"location":"fundamentals/data_structures/#hash-tables-hashmap","title":"Hash tables / Hashmap","text":"<p>Hash tables and hashmap are generally the same data structure. The implementation can be language dependent for example Java differentiates between the 2 as a HashTable doesn't allow null keys or values and it sychronises thread access where as a HashMap does not. </p> <p>They are used for fast access to information that has a key associated with it. The key is hashed and used as the primary means to retreive the value. The data structure is typically an indexed array where each array item is the hashed value of the key and a linked list to support multiple values having the same key. </p> <p></p> <p>Hash tables work by storing buckets of values based on a hash of the key provided. The hashing function is designed to try and evenly distribute the information across the buckets. As an example you might want to store suburbs and their street names to quickly look up a street by the Suburb. If this was stored in a list you would need to search on average 1/2 the list to find the street. By using a hash table that lookup is almost an instant (constant time).</p> <p>Sometimes when a key is hashed it can result in the same value from the hash and that is called a collision.</p> <p>As an example of the hash, if we have 4 buckets to store values we could sum the ascii values of the characters and take the modulo of that value to decide which bucket the (key, value) pair would be stored. </p> <pre><code>    def hash(key: str):\n        total = sum([ord(char) for char in key])\n        return total % 4\n</code></pre> <p>Note</p> <p>This code is shown to provide a simple example. There are several issues with code above and you would not use this in a production environment.</p> Action Parameters Description Performance Insert key, value Add the value to a bucket based on the key O(1) Search key, value Find the value in the list Typically O(1), this could be O(n) if the hashing function results in many collisions Delete key, value Remove the value from the list. Typically O(1), this could be O(n) if the hashing function results in many collisions"},{"location":"fundamentals/data_structures/#more-information","title":"More Information","text":"<ul> <li> Visualising a HashMap</li> </ul>"},{"location":"fundamentals/data_structures/#benefits_1","title":"Benefits","text":"<ul> <li>Efficient in finding information in constant time</li> <li>Multiple values can be associated with the same key</li> </ul>"},{"location":"fundamentals/data_structures/#drawbacks_1","title":"Drawbacks","text":"<ul> <li>Uses more memory than a list or array</li> <li>Can be slower than a list when the data stored is small. Less than 8 values.</li> <li>Not effective for storing ordered information</li> <li>Not effective when you want to iterate over all of the items</li> <li>If the hashing function is not good, many collisions can occur with many values in the same bucket, reducing efficiency</li> </ul>"},{"location":"fundamentals/data_structures/#when-to-use_1","title":"When to Use","text":"<ul> <li>To see if a collection of information contains the key and value. </li> <li>Frequency of items, like counting words in a document or number of times letters appear in a word.</li> <li>File systems use these to quickly find files</li> <li>Caching data in a server for fast information access for a website</li> </ul>"},{"location":"fundamentals/data_structures/#implementation","title":"Implementation","text":"<p>A example of using the hash table is available in the Data Structures project repository. Here is the basic implement of a hash table in Python and also reusing the Linked List implementation.</p> Code <pre><code>    from dataclasses import dataclass, field\n    from containers.linked_list import LinkedList\n\n    @dataclass\n    class HashTable:\n        bucket_size: int = 8\n        buckets: list[LinkedList] = field(init=False)\n\n        def __post_init__(self):\n            self.buckets = [None] * self.bucket_size\n\n        def hash_key(self, key: any) -&gt; int:\n            return hash(key) % self.bucket_size\n\n        def add(self, key: any, value: any) -&gt; None:\n            hashkey = self.hash_key(key)\n            if (self.buckets[hashkey] is None):\n                self.buckets[hashkey] = LinkedList()\n\n            print({key,value})\n            self.buckets[hashkey].add({key, value})\n            print(self.buckets[hashkey])\n\n        def find(self, key: any, value: any) -&gt; bool:\n            hashkey = self.hash_key(key)\n            if (self.buckets[hashkey] is None):\n                return False\n\n            bucket = self.buckets[hashkey]\n            return bucket.find({key, value})\n\n        def remove(self, key: any, value: any) -&gt; bool:\n            hashkey = self.hash_key(key)\n            if (self.buckets[hashkey] is None):\n                return False\n\n            bucket = self.buckets[hashkey]\n            return bucket.remove({key, value})\n</code></pre>"},{"location":"fundamentals/data_structures/#dictionary","title":"Dictionary","text":""},{"location":"fundamentals/data_structures/#trees","title":"Trees","text":""},{"location":"fundamentals/data_structures/#binary-tree","title":"Binary Tree","text":""},{"location":"fundamentals/data_structures/#red-black-tree","title":"Red Black Tree","text":""},{"location":"fundamentals/data_types/","title":"Data Types","text":""},{"location":"fundamentals/data_types/#overview","title":"Overview","text":"<p>Data types are fundamental to programming as they define the kind of data that can be stored and manipulated. Each data type has specific characteristics and operations associated with it. In this section, we will explore various data types commonly used in programming languages like Python.</p>"},{"location":"fundamentals/data_types/#types-of-data","title":"Types of Data","text":""},{"location":"fundamentals/data_types/#char","title":"Char","text":"<p>Represents a single character, such as 'A' or '1'. Char will typically use ASCII values to store characters. For example, the character 'A' is stored as 65 in ASCII. </p> <p>Python</p> <p>Python does not have a built-in char type; instead, it uses the string type to represent single characters. For example, 'A' is represented as a string with length 1.</p>"},{"location":"fundamentals/data_types/#string","title":"String","text":"<p>Represents a sequence of characters. In many languages, strings are mutable, meaning they can be changed after creation. </p> <p>Python</p> <p>In Python, strings are immutable. Examples include \"Hello\" or \"123\". Since Python 3.0 all <code>str</code> values support unicode using the UTF-8 encoding. A string can be in either single quotes (' ') or double quotes (\" \").</p>"},{"location":"fundamentals/data_types/#boolean","title":"Boolean","text":"<p>Represents a logical value that can be either true or false. Boolean values are essential for decision-making in programming. </p> <p>Python</p> <p>In Python, the <code>bool</code> type is used to represent boolean values. <code>True</code> and <code>False</code> are the only valid boolean values in Python.</p>"},{"location":"fundamentals/data_types/#integer","title":"Integer","text":"<p>Represents whole numbers without a fractional component. Integers can be positive, negative, or zero. </p> <p>Python</p> <p>In python, the <code>int</code> type is used to represent integers. Examples include 10 or -5.</p>"},{"location":"fundamentals/data_types/#real","title":"Real","text":"<p>Represents numbers with fractional components. Real numbers include both integers and floating-point numbers. </p>"},{"location":"fundamentals/data_types/#float","title":"Float","text":"<p>Represents floating-point numbers with a decimal point. Floats have a fixed precision and can be used for scientific calculations. </p> <p>Python</p> <p>In python, the <code>float</code> type is used to represent floating-point numbers. Examples include 3.14 or -0.5. </p>"},{"location":"fundamentals/data_types/#double","title":"Double","text":"<p>Represents double-precision floating-point numbers, providing higher precision than floats. </p> <p>Python</p> <p>In python, there are no built-in types for double precision floating point numbers. Instead, the <code>float</code> type is used to represent both single and double precision floating point numbers. </p>"},{"location":"fundamentals/data_types/#type-casting","title":"Type Casting","text":"<p>Type casting is the process of converting one data type into another. This can be done implicitly (automatically by the language) or explicitly (by the programmer). </p> <p>Python</p> <p>In python, you can use the <code>int()</code>, <code>float()</code>, and <code>str()</code> functions to perform explicit type casting.</p>"},{"location":"fundamentals/number_systems/","title":"Number Systems","text":""},{"location":"fundamentals/number_systems/#binary","title":"Binary","text":"<p>The Binary Number System is a cornerstone of digital technology. It is a base-2 numeral system that uses only two digits: 0 and 1. Each position in a binary number represents a power of 2, starting from the rightmost digit (which represents (2^0)).</p>"},{"location":"fundamentals/number_systems/#converting-decimal-to-binary","title":"Converting Decimal to Binary","text":"<p>Convert the decimal number 5 to its binary representation.</p> <p>Divide the number by 2 and note the remainder.</p> <pre><code>5 \u00f7 2 = 2 remainder 1\n</code></pre> <p>Continue dividing the quotient by 2 until the quotient is zero.</p> <p><pre><code>2 \u00f7 2 = 1 remainder 0\n1 \u00f7 2 = 0 remainder 1\n</code></pre> Read the remainders from bottom to top:</p> <p>Binary representation of 5 is 101.</p>"},{"location":"fundamentals/number_systems/#converting-decimal-to-binary_1","title":"Converting Decimal to Binary","text":"<p>Convert the binary number 101 back to its decimal representation.</p> <p>Write down the binary number and assign each digit a power of 2, starting from the rightmost digit (which represents (2^0)).</p> <p><code>101\u2082 = 1 * (2^2) + 0 * (2^1) + 1 * (2^0)</code></p> <p>Calculate each term and sum them up.</p> <p><pre><code>1 * (2^2) = 4\n0 * (2^1) = 0\n1 * (2^0) = 1\n\n4 + 0 + 1 = 5\n</code></pre> So, the binary number 101 represents the decimal number 5.</p>"},{"location":"fundamentals/number_systems/#octal","title":"Octal","text":""},{"location":"fundamentals/number_systems/#hexidecimal","title":"Hexidecimal","text":""},{"location":"fundamentals/number_systems/#decimal","title":"Decimal","text":""},{"location":"fundamentals/number_systems/#ascii","title":"ASCII","text":""},{"location":"fundamentals/number_systems/#table-of-conversions","title":"Table of Conversions","text":"Binary Octal Hexadecimal Decimal ASCII 000000 0 0 0 NUL 000001 1 1 1 SOH 000010 2 2 2 000011 3 3 3 000100 4 4 4 000101 5 5 5 000110 6 6 6 ACK 000111 7 7 7 001000 10 8 8 001001 11 9 9 001010 12 A 10 LF 001011 13 B 11 001100 14 C 12 001101 15 D 13 CR 001110 16 E 14 001111 17 F 15 NAK 101001 71 41 65 A 101010 72 42 66 B 101011 73 43 67 C 101100 74 44 68 D 101101 75 45 69 E 101110 76 46 70 F 101111 77 47 71 G 110000 80 48 72 H 110001 81 49 73 I 110010 82 4A 74 J"},{"location":"fundamentals/software_quality/","title":"Software Quality","text":""},{"location":"fundamentals/software_quality/#testing","title":"Testing","text":""},{"location":"fundamentals/software_quality/#code-coverage","title":"Code Coverage","text":""},{"location":"machine_learning/","title":"Machine Learning (Software Automation)","text":"Opinion  <p>This unit is called Software Automation in the syllabus, but that is not accurate. The syllabus is heavily focused on Machine Learning (ML), and to be called Software automation, it should also cover other automation activities. This would include DevOps and DevSecOps, the practice of creating software applications to reduce human intervention in time-consuming IT tasks such as cloud operations, deployments, and software and system orchestration.</p> <p>Info</p> <p>The NSW syllabus document has a gap in that it specifies what to teach (algorithms, concepts, impacts) but not the foundational skills needed to actually do ML work. Sections have been added to address this gap.</p> <p>Missing from Syllabus but Essential:</p> <ul> <li>Data handling - Can't do ML without loading and exploring data</li> <li>Model evaluation - Can't know if models work without metrics</li> <li>Train/test methodology - Can't properly assess models without this</li> <li>Preprocessing - Real data needs cleaning and preparation</li> <li>Implementation environment - What tools/libraries to use</li> </ul> <p>Note</p> <p>This is work in progress. The contents on this page may change as the course details are created.</p>"},{"location":"machine_learning/#introduction-to-machine-learning-concepts-implementation-and-impact","title":"Introduction to Machine Learning: Concepts, Implementation and Impact","text":"<p>This unit has been design to be completed in approximately 8 weeks with 6-8 hours of study per week. </p>"},{"location":"machine_learning/#week-1-foundations-of-ai-ml-automation","title":"Week 1: Foundations of AI, ML &amp; Automation","text":""},{"location":"machine_learning/#syllabus-coverage","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Distinguish between artificial intelligence (AI) and ML</li> <li>\u2713 Investigate how machine learning (ML) supports automation through the use of DevOps, robotic process automation (RPA) and business process automation (BPA)</li> </ul>"},{"location":"machine_learning/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Distinguish between artificial intelligence (AI) and machine learning (ML)</li> <li>Investigate how ML supports automation through DevOps, RPA, and BPA</li> <li>Understand the context and applications of ML in modern software systems</li> </ul>"},{"location":"machine_learning/#content-overview","title":"Content Overview","text":"<p>Conceptual Foundations:</p> <ul> <li>Definitions and clear distinctions between AI and ML with real-world examples</li> <li>Exploration of automation technologies:<ul> <li>DevOps (Development and Operations integration)</li> <li>Robotic Process Automation (RPA)</li> <li>Business Process Automation (BPA)</li> </ul> </li> <li>How ML enables and enhances automation processes</li> <li>Industry case studies demonstrating ML-powered automation</li> </ul>"},{"location":"machine_learning/#week-2-ml-training-models-data-fundamentals","title":"Week 2: ML Training Models &amp; Data Fundamentals","text":""},{"location":"machine_learning/#syllabus-coverage_1","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Explore models of training ML including: supervised learning, unsupervised learning, semi-supervised learning, reinforcement learning</li> <li>\u2713 Investigate common applications of key ML algorithms including: data analysis and forecasting, virtual personal assistants, image recognition</li> </ul>"},{"location":"machine_learning/#learning-objectives_1","title":"Learning Objectives","text":"<ul> <li>Explore four models of ML training: supervised, unsupervised, semi-supervised, and reinforcement learning</li> <li>Understand common ML applications: data analysis/forecasting, virtual assistants, image recognition</li> <li>Develop foundational data handling skills essential for ML</li> <li>Learn to load, explore, and visualise datasets</li> </ul>"},{"location":"machine_learning/#content-overview_1","title":"Content Overview","text":"<p>ML Training Models:</p> <ul> <li>Supervised Learning: Learning from labelled data (spam filters, house price prediction)</li> <li>Unsupervised Learning: Finding patterns in unlabelled data (customer segmentation, clustering)</li> <li>Semi-Supervised Learning: Combining labelled and unlabelled data</li> <li>Reinforcement Learning: Learning through reward/punishment (overview level - game AI, robotics context)</li> </ul> <p>Common ML Applications:</p> <ul> <li>Data analysis and forecasting (trend prediction, time series)</li> <li>Virtual personal assistants (Siri, Alexa, chatbots)</li> <li>Image recognition (facial recognition, object detection, medical imaging)</li> </ul> <p>Essential: Data Fundamentals</p> <ul> <li>Understanding datasets: rows (samples), columns (features), target variables</li> <li>Loading data from CSV files using pandas</li> <li>Basic data exploration: shape, info, describe, head/tail</li> <li>Data visualisation basics: scatter plots, histograms, bar charts using plotly</li> <li>Understanding what makes \"good\" data for ML</li> </ul>"},{"location":"machine_learning/#week-3-classical-ml-algorithms-concepts-simple-implementation","title":"Week 3: Classical ML Algorithms - Concepts &amp; Simple Implementation","text":""},{"location":"machine_learning/#syllabus-coverage_2","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Research models used by software engineers to design and analyse ML including: decision trees, neural networks</li> <li>\u2713 Describe types of algorithms associated with ML including: linear regression, logistic regression, K-nearest neighbour</li> </ul>"},{"location":"machine_learning/#learning-objectives_2","title":"Learning Objectives","text":"<ul> <li>Understand decision trees and how they make decisions</li> <li>Understand K-nearest neighbour (K-NN) algorithm</li> <li>Introduce linear and logistic regression concepts</li> <li>Introduce neural networks conceptually (implementation in Week 6)</li> <li>Implement simple decision tree and K-NN models</li> <li>Learn train/test split and basic model evaluation</li> </ul>"},{"location":"machine_learning/#content-overview_2","title":"Content Overview","text":"<p>Design &amp; Analysis Models:</p> <p>Decision Trees:</p> <ul> <li>Visual tree structure and decision-making process</li> <li>How trees split data based on features</li> <li>Advantages: interpretable, handles non-linear relationships</li> <li>Simple implementation using scikit-learn</li> </ul> <p>Neural Networks (Conceptual Introduction):</p> <ul> <li>Simplified explanation: input layer, hidden layers, output layer</li> <li>How information flows through networks</li> <li>When neural networks are useful (complex patterns, large data)</li> <li>Note: Implementation deferred to Week 6</li> </ul> <p>Algorithm Types:</p> <p>K-Nearest Neighbour (K-NN):</p> <ul> <li>How K-NN classifies based on \"nearest\" data points</li> <li>Distance calculations (Euclidean distance simplified)</li> <li>Choosing K value</li> <li>Simple implementation using scikit-learn</li> </ul> <p>Linear Regression (Introduction):</p> <ul> <li>Fitting a line through data points</li> <li>Understanding slope and intercept</li> <li>Predicting numeric values</li> <li>Full implementation in Week 4</li> </ul> <p>Logistic Regression (Introduction):</p> <ul> <li>Binary classification (yes/no, true/false)</li> <li>Predicting probabilities</li> <li>When to use vs. linear regression</li> <li>Full implementation in Week 4</li> </ul> <p>Essential: Model Evaluation Fundamentals</p> <ul> <li>Train/test split concept: why we need separate data for testing</li> <li>Accuracy as a basic metric</li> <li>Understanding model performance</li> <li>Overfitting vs underfitting (simplified introduction)</li> </ul>"},{"location":"machine_learning/#week-4-regression-models-linear-polynomial-implementation","title":"Week 4: Regression Models - Linear &amp; Polynomial Implementation","text":""},{"location":"machine_learning/#syllabus-coverage_3","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Design, develop and apply ML regression models using an OOP to predict numeric values including: linear regression, polynomial regression</li> <li>\u2713 Describe types of algorithms associated with ML including: linear regression (implementation)</li> </ul>"},{"location":"machine_learning/#learning-objectives_3","title":"Learning Objectives","text":"<ul> <li>Understand OOP principles in the context of ML implementation</li> <li>Design and develop linear regression models using OOP</li> <li>Design and develop polynomial regression models using OOP</li> <li>Apply regression models to predict numeric values</li> <li>Evaluate regression model performance using appropriate metrics</li> <li>Understand overfitting and underfitting in regression context</li> </ul>"},{"location":"machine_learning/#content-overview_3","title":"Content Overview","text":"<p>OOP for Machine Learning:</p> <ul> <li>Review of OOP fundamentals: classes, objects, methods, attributes</li> <li>Why OOP matters for ML: modularity, reusability, organisation</li> <li>Structure of scikit-learn's OOP approach (fit, predict, score methods)</li> <li>Reading and understanding ML code structure</li> </ul> <p>Linear Regression:</p> <ul> <li>Mathematical concept (simplified): finding the best-fit line</li> <li>Relationship between features (X) and target (y)</li> <li>Implementation using scikit-learn's LinearRegression class</li> <li>Making predictions with trained models</li> <li>Visualising regression lines with scatter plots</li> </ul> <p>Polynomial Regression:</p> <ul> <li>When linear relationships aren't enough (curved patterns)</li> <li>Understanding polynomial features (x, x\u00b2, x\u00b3)</li> <li>Implementation using PolynomialFeatures + LinearRegression</li> <li>Comparing linear vs. polynomial fit</li> <li>Danger of overfitting with high-degree polynomials</li> </ul> <p>Essential: Model Evaluation for Regression</p> <ul> <li>Mean Squared Error (MSE): Understanding prediction errors</li> <li>R\u00b2 Score: How well does the model explain the data?</li> <li>Visualising residuals (prediction errors)</li> <li>Overfitting: Model too complex, fits training data perfectly but fails on new data</li> <li>Underfitting: Model too simple, doesn't capture patterns</li> <li>Using train/test split to detect overfitting</li> </ul>"},{"location":"machine_learning/#week-5-logistic-regression-model-comparison","title":"Week 5: Logistic Regression &amp; Model Comparison","text":""},{"location":"machine_learning/#syllabus-coverage_4","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Design, develop and apply ML regression models using an OOP to predict numeric values including: logistic regression</li> <li>\u2713 Describe types of algorithms associated with ML including: logistic regression (implementation)</li> </ul>"},{"location":"machine_learning/#learning-objectives_4","title":"Learning Objectives","text":"<ul> <li>Design and develop logistic regression models using OOP for classification</li> <li>Understand binary classification and probability predictions</li> <li>Evaluate classification models using appropriate metrics</li> <li>Compare multiple algorithms on the same problem</li> <li>Select appropriate algorithms based on problem characteristics</li> <li>Strengthen feature engineering and data preparation skills</li> </ul>"},{"location":"machine_learning/#content-overview_4","title":"Content Overview","text":"<p>Logistic Regression:</p> <ul> <li>Binary classification explained (yes/no, spam/not spam, pass/fail)</li> <li>How logistic regression predicts probabilities (0 to 1)</li> <li>Decision threshold (typically 0.5)</li> <li>Implementation using scikit-learn's LogisticRegression class</li> <li>Key difference from linear regression: predicting categories, not numbers</li> </ul> <p>Classification Evaluation Metrics (Critical Addition)</p> <ul> <li>Accuracy: Percentage of correct predictions</li> <li>Confusion Matrix: True positives, false positives, true negatives, false negatives</li> <li>Precision and Recall: Understanding trade-offs</li> <li>When accuracy can be misleading (imbalanced datasets)</li> <li>Visualising classification results</li> </ul> <p>Model Comparison Framework:</p> <ul> <li>Comparing decision trees, K-NN, and logistic regression on same problem</li> <li>Performance metrics comparison table</li> <li>Understanding algorithm strengths and weaknesses</li> <li>When to choose which algorithm</li> <li>Computational cost considerations (speed vs. accuracy)</li> </ul> <p>Essential: Feature Engineering Basics</p> <ul> <li>What are features and why they matter</li> <li>Handling categorical variables (one-hot encoding simplified)</li> <li>Feature scaling/normalisation (when and why)</li> <li>Selecting relevant features for your model</li> <li>Impact of feature choice on model performance</li> </ul>"},{"location":"machine_learning/#week-6-neural-networks-simplified-introduction-advanced-classical-ml","title":"Week 6: Neural Networks - Simplified Introduction &amp; Advanced Classical ML","text":""},{"location":"machine_learning/#syllabus-coverage_5","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Apply neural network models using an OOP to make predictions</li> <li>\u2713 Research models used by software engineers to design and analyse ML including: neural networks (implementation)</li> </ul>"},{"location":"machine_learning/#learning-objectives_5","title":"Learning Objectives","text":"<ul> <li>Understand neural network architecture at implementation level</li> <li>Apply simple neural networks using high-level OOP frameworks</li> <li>Make predictions using trained neural networks</li> <li>Compare neural network performance with classical ML algorithms</li> <li>Deepen understanding of when to use neural networks vs. classical algorithms</li> <li>Alternative focus: Advanced applications of classical ML algorithms</li> </ul>"},{"location":"machine_learning/#content-overview_5","title":"Content Overview","text":"<p>Pedagogical Note</p> <p>Given the remote learning context and lack of ML expertise, this week offers TWO PATHWAYS:</p> <p>Pathway A (Recommended): Simplified neural networks using very high-level tools</p> <p>Pathway B (Alternative): Advanced classical ML techniques</p> <p>Teachers/course designers should choose based on student readiness and available support.</p>"},{"location":"machine_learning/#pathway-a-simplified-neural-networks-observation-high-level-use","title":"PATHWAY A: Simplified Neural Networks (Observation &amp; High-Level Use)","text":"<p>Neural Network Architecture:</p> <ul> <li>Review of structure: input layer, hidden layers, output layer</li> <li>Neurons, weights, and activation functions (simplified explanation)</li> <li>How networks learn: concept of training, loss, and optimisation (non-mathematical)</li> <li>When neural networks excel: complex patterns, large datasets, image/text data</li> </ul> <p>High-Level Implementation Approach:</p> <ul> <li>Using Keras Sequential API (highest abstraction level)</li> <li>Pre-built architectures for common problems</li> <li>Transfer learning concept: using pre-trained networks</li> <li>Focus on using neural networks rather than building from scratch</li> </ul> <p>Simplified Hands-On Work:</p> <p>Option 1: Keras Sequential for Simple Problems</p> <ul> <li>Very simple fully-connected networks (2-3 layers maximum)</li> <li>Binary or multi-class classification on tabular data</li> <li>Heavy scaffolding: modify existing code rather than write from scratch</li> <li>Emphasis on observing behaviour and comparing with classical ML</li> </ul> <p>Option 2: Transfer Learning (Even Higher Level)</p> <ul> <li>Use pre-trained models (e.g., image classification with MobileNet)</li> <li>Focus on loading models and making predictions</li> <li>No training required, just inference</li> <li>Demonstrates power of neural networks without complexity</li> </ul> <p>Option 3: Google Teachable Machine</p> <ul> <li>Web-based, no-code neural network training</li> <li>Image, sound, or pose classification</li> <li>Export model and use in Python</li> <li>Most accessible option for remote learners</li> </ul> <p>Comparison Framework:</p> <ul> <li>Neural network vs. logistic regression on same tabular data</li> <li>When is the extra complexity of neural networks worth it?</li> <li>Computational cost, interpretability trade-offs</li> <li>Performance gains vs. ease of debugging</li> </ul>"},{"location":"machine_learning/#pathway-b-advanced-classical-ml-alternative-if-neural-networks-too-complex","title":"PATHWAY B: Advanced Classical ML (Alternative If Neural Networks Too Complex)","text":"<p>Focus: Deepen mastery of accessible, interpretable algorithms</p> <p>Advanced Decision Trees:</p> <ul> <li>Ensemble methods: Random Forests (conceptual + implementation)</li> <li>How multiple trees make better predictions</li> <li>Feature importance from tree ensembles</li> <li>Implementation using RandomForestClassifier</li> </ul> <p>Advanced K-NN and Other Algorithms:</p> <ul> <li>K-NN for regression (not just classification)</li> <li>Distance metric selection</li> <li>Introduction to Support Vector Machines (SVM) - basic concept</li> <li>Naive Bayes for text classification (simple example)</li> </ul> <p>Model Selection and Validation:</p> <ul> <li>Cross-validation: better than single train/test split</li> <li>Grid search for hyperparameter tuning (simplified)</li> <li>Selecting best model systematically</li> <li>Validation curves to understand model behaviour</li> </ul> <p>End-to-End ML Pipeline:</p> <ul> <li>Complete workflow: data loading \u2192 preprocessing \u2192 training \u2192 evaluation \u2192 prediction</li> <li>Putting it all together in organised code</li> <li>Creating reusable functions for ML tasks</li> <li>Documentation and code organisation</li> </ul>"},{"location":"machine_learning/#week-7-human-factors-behaviour-patterns-bias-in-mlai","title":"Week 7: Human Factors, Behaviour Patterns &amp; Bias in ML/AI","text":""},{"location":"machine_learning/#syllabus-coverage_6","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Explore by implementation how patterns in human behaviour influence ML and AI software development including: psychological responses, patterns related to acute stress response, cultural protocols, belief systems</li> <li>\u2713 Investigate the effect of human and dataset source bias in the development of ML and AI solutions</li> </ul>"},{"location":"machine_learning/#learning-objectives_6","title":"Learning Objectives","text":"<ul> <li>Explore how patterns in human behaviour influence ML and AI development</li> <li>Understand psychological responses, stress patterns, cultural protocols, and belief systems in ML context</li> <li>Investigate human bias and dataset source bias in ML systems</li> <li>Identify bias in datasets and model outputs through practical investigation</li> <li>Analyse real-world case studies of bias in ML/AI</li> <li>Develop strategies for bias detection and mitigation</li> </ul>"},{"location":"machine_learning/#content-overview_6","title":"Content Overview","text":"<p>Patterns in Human Behaviour Influencing ML/AI:</p> <p>Psychological Responses:</p> <ul> <li>How human perception and cognition affect ML design choices</li> <li>Confirmation bias in data collection and interpretation</li> <li>Anchoring effects in model evaluation</li> <li>User trust and acceptance of AI recommendations</li> <li>Example: Health apps and stress detection - how psychological factors affect data</li> </ul> <p>Patterns Related to Acute Stress Response:</p> <ul> <li>Fight-or-flight responses and their digital traces</li> <li>How ML systems detect and respond to stress patterns</li> <li>Ethical considerations in stress monitoring</li> <li>Example: Social media algorithms detecting mental health signals</li> <li>Privacy and consent issues</li> </ul> <p>Cultural Protocols:</p> <ul> <li>How cultural context shapes data and model design</li> <li>Language and communication patterns across cultures</li> <li>Different cultural norms in privacy, consent, and data sharing</li> <li>Example: Facial recognition trained primarily on Western faces</li> <li>Importance of diverse training data</li> </ul> <p>Belief Systems:</p> <ul> <li>How developer beliefs and values embed in ML systems</li> <li>Societal assumptions reflected in algorithms</li> <li>Religious and ethical considerations in AI design</li> <li>Example: Recommendation algorithms reinforcing existing beliefs (filter bubbles)</li> <li>Responsibility of developers to recognise their biases</li> </ul> <p>Human and Dataset Source Bias:</p> <p>Types of Bias:</p> <ul> <li>Human Bias: Developer assumptions, sampling bias, labeling bias</li> <li>Dataset Bias: Historical bias, representation bias, measurement bias</li> <li>Algorithmic Bias: How ML amplifies existing biases in data</li> <li>Interaction Between Biases: How they compound</li> </ul> <p>Real-World Case Studies:</p> <ul> <li>Facial Recognition: Lower accuracy for people of colour (Gender Shades study)</li> <li>Hiring Algorithms: Amazon's resume screening bias against women</li> <li>Criminal Justice: COMPAS recidivism prediction bias</li> <li>Language Models: Gender and racial stereotypes in text generation</li> <li>Medical AI: Diagnostic systems trained primarily on one demographic</li> </ul> <p>Practical Investigation of Bias:</p> <ul> <li>Hands-on experiment: Train model on biased dataset</li> <li>Compare with model trained on balanced dataset</li> <li>Observe differences in predictions</li> <li>Quantify bias in model outputs</li> <li>Document findings and implications</li> </ul>"},{"location":"machine_learning/#week-8-impact-assessment-synthesis","title":"Week 8: Impact Assessment &amp; Synthesis","text":""},{"location":"machine_learning/#syllabus-coverage_7","title":"Syllabus Coverage","text":"<ul> <li>\u2713 Assess the impact of automation on the individual, society and the environment including: safety of workers, people with disability, the nature and skills required for employment, production efficiency, waste and the environment, the economy and distribution of wealth</li> </ul>"},{"location":"machine_learning/#learning-objectives_7","title":"Learning Objectives","text":"<ul> <li>Assess the impact of automation on individuals, society, and environment across multiple dimensions</li> <li>Analyse safety implications for workers</li> <li>Evaluate accessibility and inclusion for people with disabilities</li> <li>Examine changing nature and skills required for employment</li> <li>Assess production efficiency, waste, and environmental impact</li> <li>Evaluate economic effects and wealth distribution</li> <li>Synthesise all learning from Weeks 1-7 into comprehensive understanding</li> <li>Reflect on ethical responsibilities of ML/AI developers</li> </ul>"},{"location":"machine_learning/#content-overview_7","title":"Content Overview","text":"<p>Impact of Automation on Multiple Dimensions:</p> <p>Safety of Workers:</p> <ul> <li>How automation changes workplace hazards</li> <li>Robots and ML in dangerous environments (manufacturing, mining, inspection)</li> <li>New safety considerations (human-robot interaction)</li> <li>Deskilling and loss of safety awareness</li> <li>Monitoring and surveillance concerns</li> <li>Case studies: warehouse automation, autonomous vehicles in industry</li> </ul> <p>People with Disability:</p> <ul> <li>Assistive technologies powered by ML (speech recognition, image description, predictive text)</li> <li>Accessibility improvements through automation</li> <li>Potential barriers: cost, complexity, design assumptions</li> <li>Risk of exclusion if ML not trained on diverse populations</li> <li>Case studies: accessible navigation, communication aids, adaptive interfaces</li> </ul> <p>Nature and Skills Required for Employment:</p> <ul> <li>Job displacement vs. job transformation</li> <li>New skills needed in automated workplaces</li> <li>Shift from manual to cognitive and creative skills</li> <li>Lifelong learning and reskilling needs</li> <li>Digital divide and access to retraining</li> <li>Case studies: manufacturing evolution, customer service automation, creative industries</li> </ul> <p>Production Efficiency, Waste, and Environment:</p> <ul> <li>Efficiency gains: faster production, reduced errors, optimised resource use</li> <li>Environmental costs: energy consumption of ML models (especially large neural networks), e-waste from automation hardware</li> <li>Environmental benefits: optimised logistics, precision agriculture, smart energy grids</li> <li>Sustainability considerations in ML development</li> <li>Case studies: supply chain optimisation, environmental monitoring</li> </ul> <p>Economy and Distribution of Wealth:</p> <ul> <li>Economic productivity gains from automation</li> <li>Wage effects: which jobs grow, which decline</li> <li>Wealth concentration: who owns the automation technology</li> <li>Geographic disparities: impacts on different communities</li> <li>Policy considerations: taxation, universal basic income debates</li> <li>Case studies: economic impact studies, regional disparities</li> </ul> <p>Synthesis of All Learning:</p> <ul> <li>Connecting technical skills (Weeks 1-6) with ethical awareness (Week 7) and societal impact (Week 8)</li> <li>ML/AI developer's responsibility</li> <li>Informed decision-making about ML applications</li> <li>Critical evaluation of ML systems</li> </ul>"},{"location":"mechatronics/hardware_software/","title":"Understanding Mechatronic Hardware and Software","text":""},{"location":"mechatronics/hardware_software/#introduction-from-code-to-physical-reality","title":"Introduction: From Code to Physical Reality","text":"<p>In your previous work with Object-Oriented Programming, you learned to create objects in code that represent real-world things. Now, you'll bring those objects to life\u2014literally. Mechatronics is where your software engineering skills meet the physical world, allowing you to sense, think, and act in real environments.</p> <p>Throughout this module, you'll be using the Raspberry Pi Pico microcontroller programmed with MicroPython, along with the comprehensive set of components from your Freenove Ultimate Starter Kit.</p>"},{"location":"mechatronics/hardware_software/#what-is-mechatronics","title":"What is Mechatronics?","text":"<p>Definition</p> <p>Mechatronics is the interdisciplinary field combining mechanical engineering, electronics, computer science, and control engineering to design and create intelligent systems that can sense, decide, and act.</p> <p>Mechatronic systems excel at performing tasks that are:</p> <ul> <li>Repetitive - executing the same action thousands of times without fatigue or variation</li> <li>Precise - achieving accuracy beyond human capability</li> <li>Fast - responding in milliseconds to environmental changes</li> <li>Reliable - operating consistently in hazardous or inaccessible environments</li> <li>Cost-effective - reducing labor costs and improving efficiency</li> </ul>"},{"location":"mechatronics/hardware_software/#core-components-of-mechatronic-systems","title":"Core Components of Mechatronic Systems","text":"<p>Every mechatronic system consists of three fundamental elements:</p> <ol> <li>Sensors (INPUT) - Devices that detect physical phenomena and convert them to electrical signals</li> <li>Microcontroller (CONTROL) - The \"brain\" that processes sensor data and makes decisions</li> <li>Actuators (OUTPUT) - Devices that convert electrical signals into physical action</li> </ol> <pre><code>graph LR\n    A[Sensors: Temperature, Distance, Light] --&gt; B[Microcontroller: Raspberry Pi Pico+ MicroPython Code]\n    B --&gt; C[Actuators: Motors, Servos, LEDs]\n    C -.Feedback.-&gt; A\n    style B fill:#e1f5fe</code></pre>"},{"location":"mechatronics/hardware_software/#connecting-to-your-previous-learning","title":"Connecting to Your Previous Learning","text":"<p>Your OOP and project management skills directly transfer to mechatronics:</p> Software Engineering Concept Mechatronics Application Class definitions Hardware component abstractions (Sensor class, Motor class) Object instantiation Initialising physical devices with specific pin configurations Methods Functions controlling device behaviour (read_temperature(), move_servo()) Encapsulation Hiding hardware complexity behind simple interfaces Inheritance Creating specialised sensor types from base Sensor class Testing &amp; debugging Unit testing individual components before system integration Documentation Technical specifications, wiring diagrams, component data sheets Iteration Prototyping \u2192 Testing \u2192 Refining \u2192 Deploying"},{"location":"mechatronics/hardware_software/#applications-of-mechatronic-systems","title":"Applications of Mechatronic Systems","text":"<p>Mechatronic systems have transformed nearly every industry, enabling automation, precision, and capabilities beyond human limits.</p> <p>Syllabus Outcome</p> <p>PM-UM-03 Outline applications of mechatronic systems in a variety of specialised fields</p>"},{"location":"mechatronics/hardware_software/#industry-applications","title":"Industry Applications","text":"Manufacturing &amp; Industry 4.0 <p>Robotic Assembly Lines</p> <ul> <li>Automated pick-and-place systems achieving 99.9% precision</li> <li>Collaborative robots (cobots) working alongside humans</li> <li>Quality inspection systems using computer vision</li> <li>Automated warehousing with autonomous mobile robots (AMRs)</li> </ul> <p>Smart Factories</p> <ul> <li>Real-time monitoring of production equipment</li> <li>Predictive maintenance using vibration and temperature sensors</li> <li>Automated inventory management</li> <li>Just-in-time manufacturing coordination</li> </ul> Transportation &amp; Automotive <p>Vehicle Systems</p> <ul> <li>Engine Management: Sensors monitor temperature, pressure, oxygen levels; ECU optimises fuel injection and timing</li> <li>Safety Systems: ABS (Anti-lock Braking), ESC (Electronic Stability Control), airbag deployment sensors</li> <li>ADAS (Advanced Driver Assistance): Lane keeping, adaptive cruise control, automatic emergency braking</li> <li>Autonomous Vehicles: LiDAR, radar, cameras integrated with AI for self-driving</li> </ul> <p>Aviation</p> <ul> <li>Fly-by-wire flight control systems</li> <li>Automated landing systems</li> <li>Engine thrust management</li> <li>Satellite navigation and autopilot</li> </ul> Healthcare &amp; Medical <p>Surgical Robotics</p> <ul> <li>Da Vinci Surgical System: Minimally invasive procedures with enhanced dexterity</li> <li>Robotic exoskeletons for rehabilitation</li> <li>Precision radiation therapy systems</li> </ul> <p>Assistive Devices</p> <ul> <li>Prosthetic limbs with sensor feedback and motor control</li> <li>Automated medication dispensers</li> <li>Patient monitoring systems</li> <li>Robotic surgery assistants</li> </ul> Agriculture &amp; Food Production <p>Precision Agriculture</p> <ul> <li>Autonomous tractors with GPS guidance</li> <li>Drone-based crop monitoring and spraying</li> <li>Automated irrigation systems with soil moisture sensors</li> <li>Robotic harvesting systems</li> </ul> <p>Controlled Environment Agriculture</p> <ul> <li>Greenhouse climate control (temperature, humidity, CO\u2082)</li> <li>Hydroponic and aquaponic systems</li> <li>Automated feeding systems for livestock</li> </ul> Consumer &amp; Home <p>Smart Homes</p> <ul> <li>Thermostats learning user preferences (Nest, Ecobee)</li> <li>Security systems with motion detection and cameras</li> <li>Robotic vacuum cleaners (Roomba)</li> <li>Smart lighting with occupancy sensors</li> </ul> <p>Entertainment</p> <ul> <li>Animatronics in theme parks</li> <li>Camera stabilisation systems (gimbals)</li> <li>Motion simulators and VR systems</li> <li>Drones for aerial photography</li> </ul>"},{"location":"mechatronics/hardware_software/#the-mechatronic-revolution","title":"The Mechatronic Revolution","text":"<p>The integration of affordable microcontrollers like the Raspberry Pi Pico, combined with open-source software and accessible sensors, has democratised mechatronics. What once required industrial-scale investment can now be prototyped on a breadboard in a classroom or garage workshop.</p>"},{"location":"mechatronics/hardware_software/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"Syllabus Outcomes <p>[PM-UM-05] Identify the hardware requirements to run a program and the effect on code development</p> <p>Including:</p> <ul> <li>[PM-UM-05.01] Assessing the relationship of microcontrollers and the central processing unit (CPU)</li> <li>[PM-UM-05.02] The influence of instruction set and opcodes  </li> <li>[PM-UM-05.03] The use of address and data registers</li> </ul>"},{"location":"mechatronics/hardware_software/#introduction-to-raspberry-pi-pico-w","title":"Introduction to Raspberry Pi Pico-W","text":"<p>The Raspberry Pi Pico is a low-cost, high-performance microcontroller board featuring the RP2040 chip. The W stands for wireless.</p> <p>Raspberry Pi Pico Specifications</p> <p>Processor: RP2040 microcontroller chip</p> <ul> <li>Dual-core ARM Cortex-M0+ @ 133MHz</li> <li>264KB on-chip SRAM</li> <li>2MB on-board Flash memory</li> </ul> <p>Interfaces:</p> <ul> <li>26 \u00d7 multi-function GPIO pins</li> <li>3 \u00d7 12-bit ADC (Analog-to-Digital Converter)</li> <li>2 \u00d7 UART, 2 \u00d7 SPI, 2 \u00d7 I\u00b2C</li> <li>16 \u00d7 PWM channels</li> <li>USB 1.1 with device and host support</li> </ul> <p>Power:</p> <ul> <li>Operating voltage: 1.8-5.5V</li> <li>Low power modes for battery operation</li> </ul> <p>Wireless:</p> <ul> <li>Wifi 802.11n, 2.4GHz</li> <li>WPA3</li> <li>Bluetooth 5.2</li> <li>Access point support for 4 clients</li> </ul>"},{"location":"mechatronics/hardware_software/#pin-layout-and-functions","title":"Pin Layout and Functions","text":"<p>The Pico-W GPIO pins are color-coded by function:</p> <p></p> Practical Tip: Pin Stickers <p>The Freenove kit includes pin function stickers you can apply to your breadboard for quick reference. This helps identify which pins to use for sensors, motors, and other components.</p>"},{"location":"mechatronics/hardware_software/#key-features-for-mechatronics","title":"Key Features for Mechatronics","text":"<p>1. Dual-Core Processing</p> <p>The RP2040's two cores allow you to run multiple tasks simultaneously\u2014one core reading sensors while the other controls actuators.</p> <p>2. PWM on Every GPIO</p> <p>All GPIO pins can generate PWM (Pulse Width Modulation) signals, essential for:</p> <ul> <li>Controlling servo motor positions</li> <li>Varying LED brightness</li> <li>Regulating motor speeds</li> </ul> <p>3. Programmable I/O (PIO)</p> <p>Advanced feature allowing custom communication protocols and precise timing control.</p> <p>4. Low Cost, High Availability</p> <p>At around $8-12 AUD, the Pico is one of the most affordable yet capable microcontrollers available.</p>"},{"location":"mechatronics/hardware_software/#micropython-python-for-microcontrollers","title":"MicroPython: Python for Microcontrollers","text":"<p>MicroPython is a lean implementation of Python 3 designed to run on microcontrollers with limited resources.</p> <p>Why MicroPython?</p> <p>Advantages:</p> <ul> <li>Familiar syntax: If you know Python, you know MicroPython</li> <li>Interactive REPL: Test code immediately without compiling</li> <li>Rich libraries: Pre-built modules for common hardware</li> <li>Rapid prototyping: Write, test, and modify code quickly</li> <li>Object-oriented: Perfect for applying your OOP skills</li> </ul> <p>Key Differences from Desktop Python:</p> <ul> <li>Smaller standard library (optimised for embedded systems)</li> <li>Direct hardware access through <code>machine</code> module</li> <li>Real-time constraints (no operating system scheduler)</li> <li>Limited memory requires efficient coding</li> </ul>"},{"location":"mechatronics/hardware_software/#basic-micropython-example","title":"Basic MicroPython Example","text":"<pre><code>from machine import Pin\nimport time\n\n# Initialize onboard LED\nled = Pin(25, Pin.OUT)  # Pico's onboard LED is on GP25\n\n# Blink forever\nwhile True:\n    led.toggle()  # Switch LED state\n    time.sleep(0.5)  # Wait 500ms\n</code></pre> <p>This simple program demonstrates:</p> <ul> <li>Importing modules: <code>machine</code> for hardware, <code>time</code> for delays</li> <li>Pin configuration: Setting GP25 as an output</li> <li>Infinite loop: Embedded systems often run continuously</li> <li>Hardware control: Direct manipulation of physical components</li> </ul>"},{"location":"mechatronics/hardware_software/#development-environment-vscode","title":"Development Environment: VSCode","text":"<p>[refer ...]</p>"},{"location":"mechatronics/hardware_software/#microcontrollers-vs-microprocessors","title":"Microcontrollers vs. Microprocessors","text":"<p>Understanding the distinction between microcontrollers and microprocessors is fundamental to mechatronics.</p> Syllabus Outcome <p>[PM-UM-05.01] Assessing the relationship of microcontrollers and the central processing unit (CPU)</p>"},{"location":"mechatronics/hardware_software/#the-core-difference","title":"The Core Difference","text":"<p>Key Distinction</p> <ul> <li>A microprocessor (CPU) is solely responsible for executing instructions\u2014it's the \"brain\" but needs supporting components to function</li> <li>A microcontroller is a complete computer-on-a-chip integrating:<ul> <li>Microprocessor (CPU)</li> <li>Memory (RAM and Flash storage)</li> <li>Input/Output peripherals</li> <li>Communication interfaces (UART, SPI, I\u00b2C)</li> <li>Timers and counters</li> <li>Analog-to-Digital Converters (ADC)</li> </ul> </li> </ul>"},{"location":"mechatronics/hardware_software/#analogy-microprocessor-vs-microcontroller","title":"Analogy: Microprocessor vs. Microcontroller","text":"Microprocessor Microcontroller CPU alone Complete computer Engine of a car Entire car (engine, transmission, wheels, controls) Requires circuit board design with many external components Ready to use with minimal external components Examples: Intel Core i7, AMD Ryzen Examples: RP2040 (Pico), ATmega328 (Arduino Uno), ESP32"},{"location":"mechatronics/hardware_software/#practical-comparison","title":"Practical Comparison","text":"Aspect Microprocessor System Microcontroller System Integration Requires RAM chips, ROM chips, I/O controllers, timers All integrated on single chip Size Larger PCB with multiple ICs Compact, single-chip solution Power Consumption Higher (multiple chips) Lower (optimised for embedded use) Cost Higher total system cost Lower cost per complete system Best Use Cases Computers, servers, smartphones Embedded systems, IoT devices, robotics Processing Power Very high (GHz range, multiple cores) Moderate (MHz range, often single or dual-core) Memory GBs of RAM KBs of RAM"},{"location":"mechatronics/hardware_software/#why-microcontrollers-for-mechatronics","title":"Why Microcontrollers for Mechatronics?","text":"<p>Microcontrollers are ideal for mechatronic applications because they:</p> <ol> <li>Integrate I/O directly: No external chips needed to connect sensors and actuators</li> <li>Operate in real-time: Deterministic timing for precise control</li> <li>Low power consumption: Can run on batteries for extended periods</li> <li>Rugged: Designed for industrial environments (temperature, vibration)</li> <li>Cost-effective: Entire control system in a single, inexpensive chip</li> <li>Purpose-built: Optimised for control and monitoring tasks</li> </ol>"},{"location":"mechatronics/hardware_software/#hardware-architecture-inside-the-rp2040","title":"Hardware Architecture: Inside the RP2040","text":""},{"location":"mechatronics/hardware_software/#the-central-processing-unit-cpu","title":"The Central Processing Unit (CPU)","text":"<p>The RP2040 features a dual-core ARM Cortex-M0+ processor running at up to 133MHz.</p> <p>ARM Cortex-M0+ Architecture</p> <p>Designed for embedded systems:</p> <ul> <li>32-bit RISC (Reduced Instruction Set Computer) architecture</li> <li>Low power consumption</li> <li>Efficient interrupt handling</li> <li>Hardware multiply/divide instructions</li> </ul> <p>Dual-core capability:</p> <ul> <li>Core 0 and Core 1 can run independently</li> <li>Shared memory for inter-core communication</li> <li>Typical usage: One core for control logic, another for communication</li> </ul>"},{"location":"mechatronics/hardware_software/#what-does-32-bit-mean","title":"What Does \"32-bit\" Mean?","text":"<p>A 32-bit processor can:</p> <ul> <li>Process 32 bits (4 bytes) of data in a single operation</li> <li>Address up to 4GB of memory (2\u00b3\u00b2 bytes)</li> <li>Handle integer values from -2,147,483,648 to 2,147,483,647 (signed)</li> <li>Or 0 to 4,294,967,295 (unsigned)</li> </ul> <p>Compare this to an 8-bit microcontroller (like older Arduinos):</p> Capability 8-bit (AVR) 32-bit (ARM Cortex-M0+) Max integer value 255 (unsigned) 4,294,967,295 (unsigned) Math operations Slower for large numbers 4\u00d7 faster per operation Memory addressing Limited to 64KB directly Up to 4GB Floating-point Software emulation (slow) Hardware support available"},{"location":"mechatronics/hardware_software/#instruction-sets-and-opcodes","title":"Instruction Sets and Opcodes","text":""},{"location":"mechatronics/hardware_software/#what-is-an-instruction-set","title":"What is an Instruction Set?","text":"<p>Definition</p> <p>An instruction set architecture (ISA) defines all the commands a processor can execute. It's the interface between software and hardware.</p> <p>Syllabus Outcome</p> <p>[PM-UM-05.02] The influence of instruction set and opcodes</p> <p>The RP2040 uses the ARM Thumb-2 instruction set\u2014a mix of 16-bit and 32-bit instructions optimised for:</p> <ul> <li>Code density (small program size)</li> <li>Performance (fast execution)</li> <li>Power efficiency</li> </ul>"},{"location":"mechatronics/hardware_software/#machine-code-vs-assembly-vs-high-level-languages","title":"Machine Code vs. Assembly vs. High-Level Languages","text":"<pre><code>High-Level (MicroPython):\n    led.value(1)\n\nAssembly Language:\n    MOV r0, #1\n    STR r0, [r1]\n\nMachine Code (Binary):\n    00100000 00000001\n    01100001 ...\n</code></pre> <ul> <li>MicroPython: Human-readable, abstracts hardware details</li> <li>Assembly: Symbolic representation of machine instructions</li> <li>Machine Code: Actual binary executed by CPU</li> </ul>"},{"location":"mechatronics/hardware_software/#example-arm-instructions","title":"Example: ARM Instructions","text":"<pre><code>; ARM Thumb Assembly Examples\nMOV r0, #42        ; Move value 42 into register r0\nADD r1, r0, #8     ; Add 8 to r0, store result in r1 (r1 = 50)\nLDR r2, [r3]       ; Load value from memory address in r3 into r2\nSTR r0, [r4]       ; Store r0 value to memory address in r4\nCMP r0, r1         ; Compare r0 and r1 (set status flags)\nBEQ label          ; Branch to 'label' if equal (if r0 == r1)\n</code></pre>"},{"location":"mechatronics/hardware_software/#why-instruction-sets-matter-for-mechatronics","title":"Why Instruction Sets Matter for Mechatronics","text":"<ol> <li>Timing Precision: Some operations take fixed numbers of cycles, enabling precise timing</li> <li>Hardware Control: Specialized instructions for bit manipulation and peripheral access</li> <li>Interrupts: Fast response to sensor events without polling</li> <li>Power Management: Instructions to enter low-power sleep modes</li> </ol>"},{"location":"mechatronics/hardware_software/#memory-and-registers","title":"Memory and Registers","text":"<p>Syllabus Outcome</p> <p>[PM-UM-05.03] The use of address and data registers</p>"},{"location":"mechatronics/hardware_software/#types-of-memory-in-rp2040","title":"Types of Memory in RP2040","text":"Memory Type Size Speed Purpose Volatile? Registers 32-bit \u00d7 16 Fastest (0 wait states) Active calculations, CPU state Yes SRAM 264KB Very fast (few cycles) Variables, stack, heap Yes Flash 2MB Slower (cached for speed) Program code, constants No (persistent) External Via SPI/I\u00b2C Slowest SD cards, EEPROM Depends"},{"location":"mechatronics/hardware_software/#cpu-registers","title":"CPU Registers","text":"<p>What are Registers?</p> <p>Registers are ultra-fast storage locations built directly into the CPU. Think of them as the CPU's \"scratch paper\" for immediate calculations.</p> <p>ARM Cortex-M0+ has 16 registers:</p> <ul> <li>R0-R12: General-purpose registers for calculations and data</li> <li>R13 (SP): Stack Pointer - tracks function calls and local variables</li> <li>R14 (LR): Link Register - stores return addresses for functions</li> <li>R15 (PC): Program Counter - points to next instruction to execute</li> </ul> <p>Special registers:</p> <ul> <li>APSR: Application Program Status Register - stores condition flags (Zero, Negative, Carry, Overflow)</li> <li>PRIMASK, CONTROL: Interrupt and privilege control</li> </ul>"},{"location":"mechatronics/hardware_software/#register-vs-ram","title":"Register vs. RAM","text":"Characteristic Registers RAM (SRAM) Location Inside CPU External to CPU Access Speed Instant (0-1 cycles) Few cycles Quantity 16 registers (32-bit each) 264KB (270,336 bytes) Use Active computation Program data storage Programmer Control Compiler-managed (usually) Direct allocation possible"},{"location":"mechatronics/hardware_software/#data-registers-vs-address-registers","title":"Data Registers vs. Address Registers","text":"<ul> <li> <p>Data Registers (R0-R7 primarily): Hold actual values being processed   <pre><code># Conceptually, adding two numbers:\n# r0 = 42, r1 = 8\n# ADD r0, r0, r1  =&gt; r0 = 50\n</code></pre></p> </li> <li> <p>Address Registers (used as pointers): Store memory addresses   <pre><code># Reading from memory:\n# r2 holds address 0x20000100\n# LDR r3, [r2]  =&gt; Load value FROM address 0x20000100 INTO r3\n</code></pre></p> </li> </ul>"},{"location":"mechatronics/hardware_software/#peripherals-and-memory-mapped-io","title":"Peripherals and Memory-Mapped I/O","text":"<p>Microcontrollers use memory-mapped I/O, meaning hardware peripherals (GPIO, ADC, UART) are controlled by reading/writing to specific memory addresses.</p>"},{"location":"mechatronics/hardware_software/#example-gpio-control","title":"Example: GPIO Control","text":"<pre><code># High-level MicroPython\nled = Pin(25, Pin.OUT)\nled.value(1)  # Turn on\n\n# What happens internally (simplified):\n# Write value '1' to memory address 0x40014004 (GPIO output register)\n</code></pre> <p>The MicroPython library handles these low-level details, but understanding memory-mapped I/O helps when:</p> <ul> <li>Debugging hardware issues</li> <li>Optimising for performance</li> <li>Using advanced features not exposed in high-level libraries</li> </ul>"},{"location":"mechatronics/hardware_software/#your-freenove-kit-components-overview","title":"Your Freenove Kit: Components Overview","text":"<p>The Freenove Ultimate Starter Kit provides all the hardware you need to explore mechatronics. Let's examine the key components you'll be using.</p> <p>Syllabus Outcome</p> <p>[PM-UM-11] Identify and describe a range of sensors, actuators and end effectors/manipulators within existing mechatronic systems</p> <p>Including:</p> <ul> <li>[PM-UM-11.01] Motion sensors</li> <li>[PM-UM-11.02] Light level sensors</li> <li>[PM-UM-11.03] Hydraulic actuators</li> <li>[PM-UM-11.04] Robotic grippers</li> </ul>"},{"location":"mechatronics/hardware_software/#component-to-syllabus-quick-reference","title":"Component-to-Syllabus Quick Reference","text":"Freenove Kit Component Syllabus Reference Type Ultrasonic Sensor (HC-SR04) [PM-UM-11.01] Motion Sensor PIR Motion Sensor [PM-UM-11.01] Motion Sensor Photoresistor (LDR) [PM-UM-11.02] Light Level Sensor Push Buttons [PM-UM-11] Input Device Potentiometers [PM-UM-11] Input Device (Analog) Servo Motors [PM-UM-11], [PM-UM-11.04] Actuator / Gripper Control DC Motors [PM-UM-11] Actuator Stepper Motors [PM-UM-11] Actuator LEDs / LED Bar [PM-UM-11] Output Device Buzzer [PM-UM-11] Output Device Relay [PM-UM-11] Actuator (Switching) LCD1602 Display [PM-UM-11] Output Device <p>Note on Hydraulic Actuators [PM-UM-11.03]</p> <p>The Freenove kit uses electric actuators (servos, DC motors, stepper motors). Hydraulic actuators operate on similar control principles but use pressurised fluid instead of electrical power. Understanding electric actuators provides the foundation for working with hydraulic systems in industrial applications.</p>"},{"location":"mechatronics/hardware_software/#input-devices-sensors-pm-um-1101-pm-um-1102","title":"Input Devices (Sensors) [PM-UM-11.01, PM-UM-11.02]","text":""},{"location":"mechatronics/hardware_software/#passive-components","title":"Passive Components","text":"<p>Resistors (Various values: 220\u03a9, 1K\u03a9, 10K\u03a9, etc.)</p> <ul> <li>Purpose: Limit current flow, divide voltage, pull-up/pull-down for digital inputs</li> <li>Mechatronic use: Protect LEDs, configure button inputs, voltage dividers for sensors</li> </ul> <p>Potentiometers</p> <ul> <li>Type: Variable resistor with rotary knob</li> <li>Range: Typically 10K\u03a9</li> <li>Mechatronic use: <ul> <li>Analog input for user control (volume, speed, position)</li> <li>Tuning PID control parameters</li> <li>Manual calibration</li> </ul> </li> </ul> <pre><code># Reading a potentiometer (analog input)\nfrom machine import ADC, Pin\n\npot = ADC(Pin(26))  # GP26 is ADC0\n\nwhile True:\n    value = pot.read_u16()  # Returns 0-65535\n    voltage = value * 3.3 / 65535\n    print(f\"Raw: {value}, Voltage: {voltage:.2f}V\")\n    time.sleep(0.1)\n</code></pre>"},{"location":"mechatronics/hardware_software/#active-sensors","title":"Active Sensors","text":"<p>Push Buttons</p> <ul> <li>Type: Momentary contact switch (SPST - Single Pole Single Throw)</li> <li>Mechatronic use: User input, emergency stop, mode selection</li> <li>Requires: Pull-up or pull-down resistor to prevent floating inputs</li> </ul> <pre><code># Button with internal pull-up resistor\nbutton = Pin(15, Pin.IN, Pin.PULL_UP)\n\nwhile True:\n    if button.value() == 0:  # Pressed (active LOW)\n        print(\"Button pressed!\")\n    time.sleep(0.1)\n</code></pre> <p>Photoresistor (LDR - Light Dependent Resistor) [PM-UM-11.02]</p> <ul> <li>Function: Resistance decreases as light intensity increases</li> <li>Range: Dark (1M\u03a9) to Bright (few hundred \u03a9)</li> <li>Mechatronic use: <ul> <li>Automatic lighting control</li> <li>Day/night detection</li> <li>Light-seeking robots</li> </ul> </li> </ul> <pre><code># Reading light level with photoresistor in voltage divider\nlight_sensor = ADC(Pin(27))\n\nwhile True:\n    value = light_sensor.read_u16()\n    # Higher value = more light (depends on circuit configuration)\n    print(f\"Light level: {value}\")\n    time.sleep(0.5)\n</code></pre> <p>Ultrasonic Sensor (HC-SR04) [PM-UM-11.01]</p> <ul> <li>Function: Measures distance using ultrasonic sound waves</li> <li>Range: 2cm to 400cm</li> <li>Accuracy: \u00b13mm</li> <li>Mechatronic use:<ul> <li>Obstacle avoidance in robots</li> <li>Level sensing in tanks</li> <li>Automatic door openers</li> <li>Parking assistance systems</li> </ul> </li> </ul> <p>Operating Principle:</p> <ol> <li>Trigger pin sends 10\u03bcs pulse</li> <li>Sensor emits 8 ultrasonic pulses at 40kHz</li> <li>Echo pin goes HIGH when pulse sent, LOW when echo received</li> <li>Measure echo pulse width to calculate distance:    <pre><code>Distance (cm) = (echo_time \u00d7 speed_of_sound) / 2\nDistance (cm) = (echo_time_\u03bcs \u00d7 0.0343) / 2\n</code></pre></li> </ol> <pre><code># Ultrasonic distance sensor\nfrom machine import Pin\nimport time\n\ntrigger = Pin(16, Pin.OUT)\necho = Pin(17, Pin.IN)\n\ndef measure_distance():\n    # Send trigger pulse\n    trigger.value(0)\n    time.sleep_us(2)\n    trigger.value(1)\n    time.sleep_us(10)\n    trigger.value(0)\n\n    # Measure echo pulse width\n    while echo.value() == 0:\n        pulse_start = time.ticks_us()\n    while echo.value() == 1:\n        pulse_end = time.ticks_us()\n\n    pulse_duration = time.ticks_diff(pulse_end, pulse_start)\n    distance = (pulse_duration * 0.0343) / 2\n\n    return distance\n\nwhile True:\n    dist = measure_distance()\n    print(f\"Distance: {dist:.1f} cm\")\n    time.sleep(0.5)\n</code></pre> <p>PIR Motion Sensor (Passive Infrared) [PM-UM-11.01]</p> <ul> <li>Function: Detects motion by sensing changes in infrared radiation (body heat)</li> <li>Output: Digital (HIGH when motion detected)</li> <li>Mechatronic use:<ul> <li>Security systems</li> <li>Automatic lighting</li> <li>Occupancy detection</li> </ul> </li> </ul>"},{"location":"mechatronics/hardware_software/#output-devices-actuators-pm-um-1103-pm-um-1104","title":"Output Devices (Actuators) [PM-UM-11.03, PM-UM-11.04]","text":"<p>Note on Hydraulic Actuators</p> <p>[PM-UM-11.03] While the syllabus mentions hydraulic actuators, the Freenove kit focuses on electric actuators (servos, DC motors, stepper motors) which are more practical for educational projects. Hydraulic actuators operate on the same control principles but use fluid pressure instead of electrical power.</p>"},{"location":"mechatronics/hardware_software/#visual-outputs","title":"Visual Outputs","text":"<p>LEDs (Light Emitting Diodes)</p> <ul> <li>Types in kit: Individual LEDs, LED bar (10 LEDs), RGB LEDs</li> <li>Voltage: Typically 2-3V forward voltage</li> <li>Current: 10-20mA typical</li> <li>Requires: Current-limiting resistor (220\u03a9 common)</li> </ul> <p>LED Bar Graph</p> <ul> <li>Configuration: 10 LEDs in a single package</li> <li>Use: Progress indicators, level meters, VU meters</li> <li>Example: Battery level display, sensor reading visualization</li> </ul> <pre><code># Controlling LED bar (10 LEDs on GP0-GP9)\nfrom machine import Pin\n\nleds = [Pin(i, Pin.OUT) for i in range(10)]\n\n# Light up first 5 LEDs\nfor i in range(5):\n    leds[i].value(1)\n</code></pre> <p>7-Segment Display</p> <ul> <li>Function: Displays digits 0-9 (and some letters)</li> <li>Types: Common cathode or common anode</li> <li>Mechatronic use: Counters, timers, sensor readings</li> </ul> <p>LCD1602 (16x2 Character Display)</p> <ul> <li>Specification: 16 characters \u00d7 2 lines</li> <li>Interface: I\u00b2C (simplifies wiring - only 2 wires for data)</li> <li>Mechatronic use: System status, sensor readings, user feedback</li> </ul>"},{"location":"mechatronics/hardware_software/#motion-actuators","title":"Motion Actuators","text":"<p>Servo Motors [PM-UM-11.04]</p> <ul> <li>Type: Rotational actuator with position feedback</li> <li>Range: Typically 0-180\u00b0 (some can do 360\u00b0 continuous rotation)</li> <li>Control: PWM signal (1-2ms pulse width, 50Hz frequency)</li> <li>Mechatronic use:<ul> <li>Robot joints</li> <li>Gripper control [PM-UM-11.04] (Robotic grippers are typically controlled by servo motors)</li> <li>Camera pan/tilt</li> <li>Steering mechanisms</li> </ul> </li> </ul> <pre><code># Servo control with PWM\nfrom machine import Pin, PWM\nimport time\n\nservo = PWM(Pin(6))\nservo.freq(50)  # 50Hz = 20ms period\n\ndef set_angle(angle):\n    # Convert angle (0-180\u00b0) to duty cycle\n    # 1ms = 0\u00b0, 2ms = 180\u00b0\n    # Duty cycle in 16-bit: 0-65535\n    min_duty = 1638  # ~1ms (2.5% of 65535)\n    max_duty = 8192  # ~2ms (12.5% of 65535)\n    duty = int(min_duty + (angle / 180) * (max_duty - min_duty))\n    servo.duty_u16(duty)\n\n# Sweep servo from 0 to 180 degrees\nfor angle in range(0, 181, 10):\n    set_angle(angle)\n    time.sleep(0.05)\n</code></pre> <p>DC Motors (with L293D Motor Driver) [PM-UM-11]</p> <ul> <li>Type: Continuous rotation motor</li> <li>Speed Control: PWM (varying duty cycle)</li> <li>Direction Control: H-bridge circuit (L293D chip)</li> <li>Mechatronic use:<ul> <li>Robot wheels</li> <li>Conveyor belts</li> <li>Fans and pumps</li> </ul> </li> </ul> <p>Stepper Motors (28BYJ-48 with ULN2003 Driver) [PM-UM-11]</p> <ul> <li>Type: Precise positioning motor</li> <li>Steps: Typically 2048 steps/revolution (with gearing)</li> <li>Control: Sequential energizing of coils</li> <li>Mechatronic use:<ul> <li>3D printers</li> <li>CNC machines</li> <li>Camera sliders</li> <li>Precise positioning systems</li> </ul> </li> </ul>"},{"location":"mechatronics/hardware_software/#other-actuators","title":"Other Actuators","text":"<p>Buzzer (Active and Passive)</p> <ul> <li>Active buzzer: Fixed frequency, just apply voltage</li> <li>Passive buzzer: Frequency controlled by PWM, can play tones</li> <li>Mechatronic use: Alarms, user feedback, musical projects</li> </ul> <p>Relay</p> <ul> <li>Function: Electrically controlled switch for high-power loads</li> <li>Configuration: SPDT (Single Pole Double Throw)</li> <li>Ratings: Typically 5V coil, 10A 250VAC / 10A 30VDC contacts</li> <li>Mechatronic use:<ul> <li>Controlling AC appliances (lights, fans)</li> <li>Switching high-current DC loads</li> <li>Safety isolation between logic and power circuits</li> </ul> </li> </ul> <p>IMPORTANT SAFETY: Relays allow microcontrollers to control mains voltage (120V/240V AC). Exercise extreme caution\u2014only operate under teacher supervision and use proper insulation.</p>"},{"location":"mechatronics/hardware_software/#integrated-circuits-and-modules","title":"Integrated Circuits and Modules","text":"<p>74HC595 Shift Register</p> <ul> <li>Function: Expands outputs (3 pins control 8 outputs)</li> <li>Cascadable: Daisy-chain multiple chips for more outputs</li> <li>Mechatronic use: Driving LED matrices, multiple outputs with limited pins</li> </ul> <p>L293D Motor Driver</p> <ul> <li>Function: H-bridge IC for bi-directional DC motor control</li> <li>Channels: Dual H-bridge (controls 2 motors)</li> <li>Current: Up to 600mA per channel</li> <li>Features: Built-in flyback diodes for inductive load protection</li> </ul>"},{"location":"mechatronics/hardware_software/#power-and-connectivity","title":"Power and Connectivity","text":"<p>Breadboard</p> <ul> <li>Purpose: Solderless prototyping platform</li> <li>Connection: Rows are connected horizontally (in groups of 5), power rails vertically</li> </ul> <p>Breadboard Power Module</p> <ul> <li>Input: 6.5-12V DC (9V battery or wall adapter)</li> <li>Outputs: 3.3V and 5V regulated supplies</li> <li>Use: Power components that need different voltages than Pico provides</li> </ul> <p>Jumper Wires</p> <ul> <li>Types: Male-Male, Male-Female</li> <li>Purpose: Make connections between components</li> </ul>"},{"location":"mechatronics/hardware_software/#data-in-mechatronic-systems","title":"Data in Mechatronic Systems","text":"<p>Understanding how data flows through a mechatronic system is crucial for effective programming and troubleshooting.</p> <p>Syllabus Outcome</p> <p>[PM-UM-04] Use different types of data and understand how it is obtained and processed in a mechatronic system, including diagnostic data and data used for optimisation</p>"},{"location":"mechatronics/hardware_software/#sensor-data-types","title":"Sensor Data Types","text":""},{"location":"mechatronics/hardware_software/#analog-signals","title":"Analog Signals","text":"<p>Continuous Values</p> <p>Analog signals represent continuously variable quantities. Examples: temperature, light intensity, sound level, pressure.</p> <p>Characteristics:</p> <ul> <li>Infinite resolution (in theory\u2014limited by ADC precision in practice)</li> <li>Voltage-based: Typically 0-3.3V range for Pico</li> <li>Requires ADC: Must be converted to digital for processing</li> </ul> <p>Pico's ADC Specifications:</p> <ul> <li>Resolution: 12-bit (4096 levels)</li> <li>Range: 0-3.3V</li> <li>Channels: 3 external (GP26, GP27, GP28) + 1 internal (temperature sensor)</li> <li>Accuracy: \u00b12 LSB (Least Significant Bits)</li> </ul> <pre><code># Reading analog sensor with voltage conversion\nfrom machine import ADC\n\nsensor = ADC(Pin(26))\n\nraw = sensor.read_u16()  # 16-bit value (0-65535)\n# Convert to 12-bit equivalent (0-4095)\nvalue_12bit = raw &gt;&gt; 4  # Right-shift 4 bits\n\n# Convert to voltage\nvoltage = (value_12bit / 4095) * 3.3\n\nprint(f\"Raw: {raw}, 12-bit: {value_12bit}, Voltage: {voltage:.3f}V\")\n</code></pre> <p>Common Analog Sensors in Your Kit:</p> <ul> <li>Potentiometers (0-3.3V based on rotation)</li> <li>Photoresistors (voltage divider output)</li> <li>Temperature sensors (LM35: 10mV/\u00b0C)</li> </ul>"},{"location":"mechatronics/hardware_software/#digital-signals-onoff","title":"Digital Signals (On/Off)","text":"<p>Binary States</p> <p>Digital signals have only two states: HIGH (1, 3.3V) or LOW (0, 0V).</p> <p>Characteristics:</p> <ul> <li>No ambiguity: Clear distinction between states</li> <li>Fast reading: No conversion needed</li> <li>Simple logic: Perfect for switches, presence detection</li> </ul> <pre><code># Digital input with debouncing\nbutton = Pin(15, Pin.IN, Pin.PULL_UP)\nlast_state = 1\n\nwhile True:\n    current_state = button.value()\n\n    if current_state != last_state:\n        if current_state == 0:  # Pressed\n            print(\"Button press detected!\")\n        time.sleep(0.05)  # Debounce delay\n\n    last_state = current_state\n</code></pre> <p>Common Digital Sensors:</p> <ul> <li>Push buttons</li> <li>PIR motion sensors</li> <li>Limit switches (end stops)</li> <li>Hall effect sensors (magnetic detection)</li> </ul>"},{"location":"mechatronics/hardware_software/#serial-communication-data-uart-i2c-spi","title":"Serial Communication Data (UART, I\u00b2C, SPI)","text":"<p>Complex sensors provide data via serial protocols, allowing:</p> <ul> <li>Multiple bytes of information</li> <li>Multiple sensors on shared bus</li> <li>Error checking and device addressing</li> </ul> <p>I\u00b2C (Inter-Integrated Circuit)</p> <ul> <li>Wires: 2 (SDA - data, SCL - clock) + power and ground</li> <li>Speed: Typically 100kHz (standard) or 400kHz (fast mode)</li> <li>Addressing: Each device has unique 7-bit address</li> <li>Use: LCD displays, sensors (accelerometers, gyroscopes, temperature/humidity)</li> </ul> <pre><code># I\u00b2C sensor example (BME280 - temperature, pressure, humidity)\nfrom machine import I2C, Pin\nimport time\n\n# Initialize I\u00b2C bus\ni2c = I2C(0, scl=Pin(5), sda=Pin(4), freq=400000)\n\n# Scan for devices\ndevices = i2c.scan()\nprint(\"I\u00b2C devices found:\", [hex(device) for device in devices])\n\n# Read sensor (requires sensor library)\n# temp, pressure, humidity = bme280.read_data()\n</code></pre> <p>UART (Universal Asynchronous Receiver-Transmitter)</p> <ul> <li>Wires: 2 (TX - transmit, RX - receive) + ground</li> <li>Speed: Configurable baud rate (9600, 115200 common)</li> <li>Use: GPS modules, Bluetooth modules, debugging output</li> </ul> <p>SPI (Serial Peripheral Interface)</p> <ul> <li>Wires: 4 (MOSI, MISO, SCK, CS) + power/ground</li> <li>Speed: Very fast (MHz range)</li> <li>Use: SD cards, displays, high-speed sensors</li> </ul>"},{"location":"mechatronics/hardware_software/#actuator-control-signals","title":"Actuator Control Signals","text":""},{"location":"mechatronics/hardware_software/#pwm-pulse-width-modulation","title":"PWM (Pulse Width Modulation)","text":"<p>Simulating Analog with Digital</p> <p>PWM rapidly toggles between HIGH and LOW to create an average voltage level. By varying the duty cycle (percentage of time HIGH), we control power delivery.</p> <p>Key PWM Parameters:</p> <ul> <li>Frequency: How many times per second the signal repeats</li> <li>Duty Cycle: Percentage of time signal is HIGH (0-100%)</li> <li>Period: Time for one complete cycle (Period = 1 / Frequency)</li> </ul> <pre><code>Frequency = 1000Hz (1kHz)\nPeriod = 1ms\n\nDuty Cycle = 25%          Duty Cycle = 75%\n  _                          ___\n | |_  _  _  _             | | |_  _  _\n 0  250\u03bcs 1ms             0 750\u03bcs 1ms\n</code></pre> <p>PWM Applications:</p> Device Frequency Duty Cycle Effect LED 1kHz - 10kHz Brightness (25% = dim, 75% = bright) DC Motor 1kHz - 20kHz Speed (0% = stop, 100% = full speed) Servo 50Hz (20ms period) Position (1ms = 0\u00b0, 1.5ms = 90\u00b0, 2ms = 180\u00b0) Buzzer 100Hz - 10kHz Tone pitch <pre><code># PWM for LED brightness control\nled_pwm = PWM(Pin(15))\nled_pwm.freq(1000)  # 1kHz\n\n# Fade LED in and out\nwhile True:\n    # Fade up\n    for duty in range(0, 65536, 1024):\n        led_pwm.duty_u16(duty)\n        time.sleep(0.02)\n\n    # Fade down\n    for duty in range(65535, -1, -1024):\n        led_pwm.duty_u16(duty)\n        time.sleep(0.02)\n</code></pre>"},{"location":"mechatronics/hardware_software/#diagnostic-and-optimisation-data","title":"Diagnostic and Optimisation Data","text":"<p>Mechatronic systems generate data beyond immediate control needs:</p> <p>Diagnostic Data: [PM-UM-14]</p> <ul> <li>Error logs: Track sensor failures, communication errors</li> <li>Performance metrics: Response times, cycle counts</li> <li>Health monitoring: Battery voltage, temperature, current draw</li> <li>Debugging info: Intermediate calculation values, state transitions</li> </ul> <p>Optimisation Data: [PM-UM-14]</p> <ul> <li>Usage patterns: Most common positions, frequently used features</li> <li>Efficiency metrics: Energy consumption per task</li> <li>Calibration data: Sensor drift corrections, mechanical wear compensation</li> <li>Machine learning: Training data for adaptive algorithms</li> </ul> <p>Example: System Monitoring</p> <pre><code># Simple diagnostic logging\nimport time\n\ndef log_system_state(sensors, actuators):\n    timestamp = time.time()\n    log_entry = {\n        'time': timestamp,\n        'temp': sensors['temperature'],\n        'distance': sensors['ultrasonic'],\n        'motor_speed': actuators['motor_pwm'],\n        'errors': []\n    }\n\n    # Check for anomalies\n    if sensors['temperature'] &gt; 60:\n        log_entry['errors'].append('TEMP_HIGH')\n    if sensors['ultrasonic'] &lt; 5:\n        log_entry['errors'].append('OBSTACLE_CLOSE')\n\n    # Log to file or send over serial\n    print(log_entry)\n    return log_entry\n</code></pre>"},{"location":"mechatronics/hardware_software/#system-integration-combining-components","title":"System Integration: Combining Components","text":"<p>Mechatronic systems aren't individual components\u2014they're integrated systems where sensors, controllers, and actuators work together.</p> <p>Syllabus Outcome</p> <p>[PM-UM-05] Experiment with software to control interactions and dependencies within mechatronic systems</p> <p>Including:</p> <ul> <li>[PM-UM-22.01] Motion constraints</li> <li>[PM-UM-22.02] Degrees of freedom</li> <li>[PM-UM-22.03] Combination of subsystems</li> <li>[PM-UM-22.04] Combination of sensors, actuators and end effectors to create viable subsystems</li> </ul>"},{"location":"mechatronics/hardware_software/#motion-constraints-pm-um-0501","title":"Motion Constraints [PM-UM-05.01]","text":"<p>Definition</p> <p>Motion constraints define the limits and permissible ranges of movement for actuators and mechanical systems.</p> <p>Types of Constraints:</p> <p>1. Physical/Mechanical:</p> <ul> <li>Servo can only rotate 0-180\u00b0 (mechanical stops)</li> <li>Linear actuator has fixed stroke length</li> <li>Robot arm joint cannot bend beyond physical limit</li> </ul> <p>2. Software:</p> <ul> <li>Limit values in code before sending to actuators</li> <li>Safety zones (e.g., gripper doesn't close beyond certain point)</li> <li>Velocity limits (ramp up/down instead of instant changes)</li> </ul> <p>3. Electrical:</p> <ul> <li>Maximum current draw (motors can overload power supply)</li> <li>Voltage limits (over-voltage damages components)</li> <li>PWM frequency constraints (servos require 50Hz)</li> </ul> <pre><code># Implementing software constraints\nclass ConstrainedServo:\n    def __init__(self, pin, min_angle=0, max_angle=180):\n        self.servo = PWM(Pin(pin))\n        self.servo.freq(50)\n        self.min_angle = min_angle\n        self.max_angle = max_angle\n\n    def set_angle(self, angle):\n        # Constrain to safe range\n        angle = max(self.min_angle, min(angle, self.max_angle))\n\n        # Convert to duty cycle\n        duty = int(1638 + (angle / 180) * 6554)\n        self.servo.duty_u16(duty)\n        return angle  # Return actual angle set\n\n# Usage\nservo = ConstrainedServo(6, min_angle=10, max_angle=170)\nservo.set_angle(200)  # Will limit to 170\u00b0\n</code></pre>"},{"location":"mechatronics/hardware_software/#degrees-of-freedom-dof-pm-um-0502","title":"Degrees of Freedom (DOF) [PM-UM-05.02]","text":"<p>Definition</p> <p>Degrees of Freedom represent the number of independent ways a system can move.</p> <p>Syllabus Outcome</p> <p>[PM-UM-05.02] Degrees of freedom</p> <p>Examples:</p> System DOF Independent Movements Door hinge 1 Rotation around hinge axis Computer mouse 2 X-axis, Y-axis Camera gimbal (pan/tilt) 2 Pan (horizontal), Tilt (vertical) Robot arm (3 joints) 3 Shoulder rotation, elbow bend, wrist rotation Drone 6 X, Y, Z translation + Roll, Pitch, Yaw rotation <p>Calculating DOF:</p> <p>For robotic systems: <pre><code>DOF = Number of independent actuators (joints)\n</code></pre></p> <p>For a 3-joint robotic arm: - Joint 1 (base rotation): 1 DOF - Joint 2 (shoulder): 1 DOF - Joint 3 (elbow): 1 DOF - Total: 3 DOF</p> <p>Programming Multiple DOF:</p> <pre><code># Coordinated multi-servo control\nclass RobotArm:\n    def __init__(self, base_pin, shoulder_pin, elbow_pin):\n        self.base = PWM(Pin(base_pin))\n        self.shoulder = PWM(Pin(shoulder_pin))\n        self.elbow = PWM(Pin(elbow_pin))\n\n        for servo in [self.base, self.shoulder, self.elbow]:\n            servo.freq(50)\n\n    def move_to_position(self, base_angle, shoulder_angle, elbow_angle):\n        # Move all joints simultaneously\n        self.base.duty_u16(self._angle_to_duty(base_angle))\n        self.shoulder.duty_u16(self._angle_to_duty(shoulder_angle))\n        self.elbow.duty_u16(self._angle_to_duty(elbow_angle))\n\n    def _angle_to_duty(self, angle):\n        return int(1638 + (angle / 180) * 6554)\n\n# Usage\narm = RobotArm(base_pin=6, shoulder_pin=7, elbow_pin=8)\narm.move_to_position(90, 45, 135)  # Position 1\ntime.sleep(1)\narm.move_to_position(45, 90, 90)   # Position 2\n</code></pre>"},{"location":"mechatronics/hardware_software/#subsystem-integration","title":"Subsystem Integration","text":"<p>Syllabus Outcomes</p> <p>[PM-UM-05.03] Combination of subsystems [PM-UM-05.04] Combination of sensors, actuators and end effectors to create viable subsystems</p> <p>Complex systems are built from subsystems:</p> <pre><code>graph TB\n    A[Complete Mechatronic System] --&gt; B[Sensing Subsystem]\n    A --&gt; C[Control Subsystem]\n    A --&gt; D[Actuation Subsystem]\n    A --&gt; E[Communication Subsystem]\n\n    B --&gt; B1[Ultrasonic Sensor]\n    B --&gt; B2[Photoresistor]\n    B --&gt; B3[Buttons]\n\n    C --&gt; C1[Raspberry Pi Pico]\n    C --&gt; C2[Decision Logic]\n    C --&gt; C3[State Machine]\n\n    D --&gt; D1[Motor Driver]\n    D --&gt; D2[DC Motors]\n    D --&gt; D3[Servo]\n\n    E --&gt; E1[LCD Display]\n    E --&gt; E2[LED Indicators]\n    E --&gt; E3[Buzzer]\n\n    style A fill:#e3f2fd\n    style B fill:#fff3e0\n    style C fill:#f3e5f5\n    style D fill:#e8f5e9\n    style E fill:#fce4ec</code></pre> <p>Example: Line-Following Robot</p> <p>Subsystem 1: Sensing</p> <ul> <li>Two IR sensors detect line position</li> <li>Return digital signals (line detected or not)</li> </ul> <p>Subsystem 2: Control Logic</p> <pre><code># Decision logic based on sensor inputs\nif left_sensor == 0 and right_sensor == 0:\n    # Both on line: go straight\n    move_forward()\nelif left_sensor == 1 and right_sensor == 0:\n    # Veered left: turn right\n    turn_right()\nelif left_sensor == 0 and right_sensor == 1:\n    # Veered right: turn left\n    turn_left()\nelse:\n    # Lost line: search\n    search_for_line()\n</code></pre> <p>Subsystem 3: Actuation</p> <ul> <li>L293D motor driver</li> <li>Two DC motors (left and right wheels)</li> </ul> <pre><code>def move_forward():\n    left_motor.duty_u16(50000)  # ~75% speed\n    right_motor.duty_u16(50000)\n\ndef turn_right():\n    left_motor.duty_u16(40000)  # Left faster\n    right_motor.duty_u16(20000)  # Right slower\n</code></pre> <p>Dependencies:</p> <ul> <li>Motors depend on sensor readings</li> <li>Turning decisions depend on both sensors simultaneously</li> <li>Speed adjustments depend on how far off-line</li> </ul>"},{"location":"mechatronics/hardware_software/#real-time-considerations","title":"Real-Time Considerations","text":"<p>Unlike desktop programs, mechatronic systems operate in real-time with strict timing requirements.</p> <p>Critical Concepts:</p> <p>1. Latency - Time delay between sensor input and actuator response</p> <pre><code># Measuring response time\nstart = time.ticks_us()\ndistance = ultrasonic.measure()\nif distance &lt; 20:\n    motor.stop()\nend = time.ticks_us()\nlatency = time.ticks_diff(end, start)\nprint(f\"Response latency: {latency}\u03bcs\")\n</code></pre> <p>2. Sampling Rate - How often sensors are read</p> <ul> <li>Too slow: Miss rapid changes</li> <li>Too fast: Waste processing power, battery</li> </ul> <p>3. Control Loop Frequency - How often control algorithm executes</p> <p>Typical rates: - Simple LED control: 10-100Hz - Motor control: 50-100Hz - Balancing robot: 100-500Hz - Servo position updates: 50Hz</p> <pre><code># Fixed-rate control loop\nLOOP_RATE = 50  # Hz\nLOOP_PERIOD = 1.0 / LOOP_RATE  # seconds\n\nwhile True:\n    loop_start = time.time()\n\n    # Control logic here\n    sensor_value = read_sensor()\n    actuator_command = calculate_control(sensor_value)\n    set_actuator(actuator_command)\n\n    # Maintain fixed rate\n    elapsed = time.time() - loop_start\n    if elapsed &lt; LOOP_PERIOD:\n        time.sleep(LOOP_PERIOD - elapsed)\n</code></pre>"},{"location":"mechatronics/hardware_software/#power-batteries-and-electrical-considerations","title":"Power, Batteries, and Electrical Considerations","text":"<p>Understanding power requirements is critical for reliable mechatronic systems.</p> <p>Syllabus Outcome</p> <p>[PM-UM-06] Determine power, battery and material requirements for components of a mechatronic system</p>"},{"location":"mechatronics/hardware_software/#voltage-requirements","title":"Voltage Requirements","text":"<p>Different components operate at different voltages:</p> Component Operating Voltage Notes Raspberry Pi Pico 1.8V - 5.5V (VSYS)3.3V (logic level) USB provides 5V to VSYSInternal regulator provides 3.3V LEDs 1.8V - 3.3V Forward voltage depends on color Servos (micro) 4.8V - 6V Most common is 5V \u00b10.5V DC Motors 3V - 12V Depends on motor size/type Logic ICs (74HC595, etc.) 2V - 6V Typically 3.3V or 5V Ultrasonic Sensor 5V But 3.3V logic compatible <p>Voltage Level Compatibility</p> <p>The Raspberry Pi Pico uses 3.3V logic. Most components in your Freenove kit are compatible, but always verify:</p> <ul> <li>Input to Pico: Must not exceed 3.3V on GPIO pins</li> <li>Output from Pico: 3.3V HIGH may be insufficient for some 5V devices</li> <li>Use level shifters if interfacing with true 5V logic devices</li> </ul>"},{"location":"mechatronics/hardware_software/#current-requirements","title":"Current Requirements","text":"<p>Current draw varies dramatically by component and operating state:</p> Component Typical Current Peak Current Pico (idle) ~20mA ~25mA Pico (busy) ~30mA ~40mA LED 10-20mA 20mA Servo (idle) 10mA - Servo (moving, no load) 100-200mA - Servo (stalled/max load) 500-1000mA 1500mA DC Motor (small) 100-300mA 1000mA Ultrasonic Sensor 15mA 15mA Buzzer 30mA 30mA <p>Calculating Total Current:</p> <pre><code>Total Current = Pico + All Active Components\n\nExample System:\n- Pico: 30mA\n- 3\u00d7 Servos (moving): 3 \u00d7 200mA = 600mA\n- 5\u00d7 LEDs: 5 \u00d7 15mA = 75mA\n- Ultrasonic sensor: 15mA\n- Buzzer: 30mA\n\nTotal = 30 + 600 + 75 + 15 + 30 = 750mA\n\nRecommendation: Power supply should provide 1A minimum (safety margin)\n</code></pre>"},{"location":"mechatronics/hardware_software/#power-supply-options","title":"Power Supply Options","text":"<p>USB Power (Computer/Wall Adapter)</p> <ul> <li>Voltage: 5V</li> <li>Current: 500mA (USB 2.0) to 2A+ (wall adapters)</li> <li>Pros: Convenient for development, programming while powered</li> <li>Cons: Tethered, limited current for motors/servos</li> </ul> <p>Battery Packs</p> <p>4\u00d7 AA Alkaline</p> <ul> <li>Voltage: 6V (1.5V \u00d7 4)</li> <li>Capacity: ~2500mAh</li> <li>Runtime Example: 2500mAh / 750mA = 3.3 hours</li> <li>Pros: Readily available, good capacity</li> <li>Cons: Not rechargeable (alkaline), voltage drops as they deplete</li> </ul> <p>4\u00d7 AA NiMH Rechargeable</p> <ul> <li>Voltage: 4.8V (1.2V \u00d7 4)</li> <li>Capacity: ~2000-2500mAh</li> <li>Pros: Rechargeable, consistent voltage</li> <li>Cons: Slightly lower voltage than alkaline</li> </ul> <p>Li-Po (Lithium Polymer) Battery</p> <ul> <li>Voltage: 3.7V (1S), 7.4V (2S), 11.1V (3S)</li> <li>Capacity: 500-5000mAh (depends on size)</li> <li>Pros: High energy density, lightweight, rechargeable</li> <li>Cons: Requires special charger, can be dangerous if mishandled</li> </ul>"},{"location":"mechatronics/hardware_software/#power-distribution","title":"Power Distribution","text":"<p>Critical Concept: Common Ground</p> <p>Essential Rule</p> <p>All components in a circuit must share a common ground (GND) reference.</p> <p>Even when using separate power supplies (e.g., batteries for motors, USB for Pico), connect all GND lines together.</p> <pre><code>Pico (USB 5V)               Motor Battery Pack (6V)\n    \u2502                              \u2502\n  [Pico]                        [Motors]\n    \u2502                              \u2502\n   GND \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GND\n        (Common ground connection)\n</code></pre> <p>Voltage Regulators</p> <p>When battery voltage doesn't match component needs, use regulators:</p> <ul> <li> <p>Linear Regulators (LM7805, LM1117):</p> <ul> <li>Simple, cheap</li> <li>Convert higher voltage to lower (e.g., 9V \u2192 5V)</li> <li>Waste excess energy as heat</li> <li>Suitable for low current (&lt;500mA)</li> </ul> </li> <li> <p>Switching Regulators (Buck/Boost converters):</p> <ul> <li>Efficient (&gt;85%)</li> <li>Can step voltage up or down</li> <li>More complex, slightly more expensive</li> <li>Suitable for higher currents</li> </ul> </li> </ul> <p>Your Freenove Breadboard Power Module:</p> <ul> <li>Input: 6.5-12V DC</li> <li>Outputs: <ul> <li>3.3V regulated</li> <li>5V regulated</li> </ul> </li> <li>Max Current: Typically 700mA per rail</li> </ul>"},{"location":"mechatronics/hardware_software/#power-calculations-and-safety","title":"Power Calculations and Safety","text":"<p>Ohm's Law:</p> <pre><code>V = I \u00d7 R\nP = V \u00d7 I\n\nWhere:\nV = Voltage (Volts)\nI = Current (Amperes)\nR = Resistance (Ohms)\nP = Power (Watts)\n</code></pre> <p>Example: LED Current-Limiting Resistor</p> <pre><code>LED Specifications:\n- Forward Voltage (V_f): 2.0V\n- Desired Current (I_f): 15mA = 0.015A\n\nSupply Voltage: 3.3V\n\nResistor Value Needed:\nR = (V_supply - V_led) / I_desired\nR = (3.3V - 2.0V) / 0.015A\nR = 1.3V / 0.015A\nR = 86.67\u03a9\n\nUse standard value: 100\u03a9 (nearest common value)\n\nPower dissipated by resistor:\nP = I\u00b2 \u00d7 R = (0.015)\u00b2 \u00d7 100 = 0.0225W = 22.5mW\n(Standard 1/4W resistor is adequate)\n</code></pre> <p>Safety Guidelines</p> <p>1. Never exceed component ratings</p> <ul> <li>Check datasheets for max voltage/current</li> <li>Add safety margin (e.g., if max is 6V, don't exceed 5.5V)</li> </ul> <p>2. Use fuses or current-limiting circuits</p> <ul> <li>Protects against short circuits</li> <li>Prevents damage to expensive components</li> </ul> <p>3. Avoid reverse polarity</p> <ul> <li>Double-check power connections before energising</li> <li>Use diodes for reverse-polarity protection</li> </ul> <p>4. Heat management</p> <ul> <li>High-current circuits generate heat</li> <li>Ensure adequate ventilation</li> <li>Use heatsinks for voltage regulators if needed</li> </ul> <p>5. Mains voltage (120V/240V AC) is deadly</p> <ul> <li>Only work with low voltage DC (&lt;12V) without supervision</li> <li>Relays that switch AC must have proper enclosures</li> </ul>"},{"location":"mechatronics/hardware_software/#wiring-diagrams-and-circuit-documentation","title":"Wiring Diagrams and Circuit Documentation","text":"<p>Professional mechatronic development requires clear documentation. Wiring diagrams are essential for:</p> <ul> <li>Building circuits correctly</li> <li>Troubleshooting issues</li> <li>Replicating designs</li> <li>Collaboration with others</li> </ul> <p>Syllabus Outcome</p> <p>[PM-UM-07] Develop wiring diagrams for a mechatronic system, considering data and power supply requirements</p>"},{"location":"mechatronics/hardware_software/#schematic-diagrams-vs-fritzing-diagrams","title":"Schematic Diagrams vs. Fritzing Diagrams","text":"<p>Schematic Diagrams</p> <ul> <li>Purpose: Show electrical connections logically</li> <li>Use: Professional engineering, understanding circuit function</li> <li>Advantage: Clear electrical relationships</li> <li>Disadvantage: Doesn't show physical layout</li> </ul> <p>Fritzing Diagrams (Breadboard View)</p> <ul> <li>Purpose: Show physical component placement</li> <li>Use: Educational, beginners, assembly instructions</li> <li>Advantage: Easy to follow for building</li> <li>Disadvantage: Can be cluttered for complex circuits</li> </ul> <p>Best Practice</p> <p>Use both: Fritzing for assembly, schematic for understanding circuit operation.</p>"},{"location":"mechatronics/hardware_software/#standard-circuit-symbols","title":"Standard Circuit Symbols","text":"<p>Learn these symbols for reading and creating schematics:</p> Component Symbol Description Notes Resistor Zigzag line or rectangle Include value (e.g., 220\u03a9, 10k\u03a9) LED Diode triangle with arrows Anode (+) and cathode (-) marked Button/Switch Gap in line with toggle Show normally open (NO) or normally closed (NC) Ground Three horizontal lines (decreasing size) Common reference point (0V) Power (Vcc/Vdd) + symbol or upward arrow Indicate voltage (e.g., +5V, +3.3V) Microcontroller Rectangle with pin labels Show used pins only Motor Circle with M inside Indicate DC or servo Capacitor Two parallel lines Polarised vs. non-polarised"},{"location":"mechatronics/hardware_software/#creating-wiring-diagrams","title":"Creating Wiring Diagrams","text":"<p>Tools:</p> <ul> <li>Fritzing: Free, breadboard-friendly (fritzing.org)</li> <li>Tinkercad Circuits: Online, includes simulation (tinkercad.com)</li> <li>KiCad: Professional, open-source schematic/PCB tool</li> </ul> <p>Best Practices:</p> <p>Wiring Diagram Guidelines</p> <p>Visual Clarity:</p> <ul> <li>Use standard wire colors:<ul> <li>Red: Power (+)</li> <li>Black: Ground (-)</li> <li>Other colors: Signals</li> </ul> </li> <li>Minimise wire crossings</li> <li>Group related connections</li> <li>Label all pins and connections</li> </ul> <p>Completeness:</p> <ul> <li>Show all connections (don't omit \"obvious\" ones like ground)</li> <li>Include component values (resistors, capacitors)</li> <li>Indicate pin numbers for microcontroller</li> <li>Note any special requirements (pull-up resistors, etc.)</li> </ul> <p>Annotations:</p> <ul> <li>Add notes for critical details</li> <li>Indicate voltage levels</li> <li>Mark polarity (for LEDs, electrolytic capacitors)</li> <li>Reference component datasheets if needed</li> </ul> <p>Example Wiring Description: Button with LED</p> <pre><code>Components:\n- Raspberry Pi Pico\n- Push button\n- 10k\u03a9 resistor (pull-down for button)\n- LED\n- 220\u03a9 resistor (current limiting for LED)\n\nConnections:\nButton:\n  - One terminal \u2192 3.3V (pin 36)\n  - Other terminal \u2192 GP15 (pin 20) AND to 10k\u03a9 resistor\n  - 10k\u03a9 resistor other end \u2192 GND\n\nLED:\n  - Anode (long leg, +) \u2192 220\u03a9 resistor\n  - 220\u03a9 resistor other end \u2192 GP14 (pin 19)\n  - Cathode (short leg, -) \u2192 GND\n</code></pre>"},{"location":"mechatronics/hardware_software/#reading-component-datasheets","title":"Reading Component Datasheets","text":"<p>Every component has a datasheet providing specifications and usage information. Key sections:</p> <ol> <li>Absolute Maximum Ratings - Never exceed these values</li> <li>Recommended Operating Conditions - Normal operating range</li> <li>Electrical Characteristics - Voltage, current, timing specs</li> <li>Pin Configuration - Pinout diagram</li> <li>Application Information - Example circuits, design tips</li> </ol> <p>Example: Reading HC-SR04 Ultrasonic Sensor Datasheet</p> <ul> <li>Operating Voltage: 5V DC</li> <li>Operating Current: 15mA</li> <li>Measuring Range: 2cm - 400cm</li> <li>Resolution: 0.3cm</li> <li>Measuring Angle: 15\u00b0</li> <li>Trigger Input: 10\u03bcs TTL pulse</li> <li>Echo Output: TTL signal proportional to distance</li> </ul>"},{"location":"mechatronics/hardware_software/#accessibility-and-inclusive-design","title":"Accessibility and Inclusive Design","text":"<p>Syllabus Outcome</p> <p>[PM-UM-08] Determine specialist requirements that influence the design and functions of mechatronic systems designed for people with disability</p>"},{"location":"mechatronics/hardware_software/#designing-for-people-with-disabilities","title":"Designing for People with Disabilities","text":"<p>Mechatronic systems can enhance independence and quality of life for people with disabilities. When designing assistive mechatronics, consider:</p> <p>Physical Accessibility:</p> <ul> <li> <p>Control Interface:</p> <ul> <li>Large, easy-to-press buttons for motor impairments</li> <li>Voice control for hands-free operation</li> <li>Adjustable sensitivity (touch, pressure)</li> <li>Accessibility of controls (height, reach)</li> </ul> </li> <li> <p>Force Requirements:</p> <ul> <li>Minimize effort needed to operate</li> <li>Power assist where manual operation is difficult</li> </ul> </li> </ul> <p>Sensory Accessibility:</p> <ul> <li> <p>Visual Impairments:</p> <ul> <li>Audio feedback (speech, tones, beeps)</li> <li>Tactile indicators (vibration, texture)</li> <li>High-contrast displays</li> <li>Screen reader compatibility</li> </ul> </li> <li> <p>Hearing Impairments:</p> <ul> <li>Visual indicators (LEDs, displays)</li> <li>Vibration alerts</li> <li>Text-based communication</li> </ul> </li> </ul> <p>Cognitive Accessibility:</p> <ul> <li>Simple, intuitive controls</li> <li>Consistent feedback</li> <li>Error prevention (confirm critical actions)</li> <li>Clear instructions (icons, simple language)</li> </ul>"},{"location":"mechatronics/hardware_software/#example-assistive-applications","title":"Example Assistive Applications","text":"Mobility Assistance <p>Powered Wheelchair Control</p> <ul> <li>Joystick, sip-puff, or head tracking for control</li> <li>Obstacle avoidance using ultrasonic sensors</li> <li>Automatic speed adjustment for safety</li> <li>Terrain adaptation (ramps, curbs)</li> </ul> Environmental Control <p>Smart Home Automation</p> <ul> <li>Voice-activated lighting and appliances</li> <li>Automated door openers</li> <li>Remote control via smartphone app</li> <li>Customizable routines (morning, bedtime)</li> </ul> Communication Aids <p>Augmentative and Alternative Communication (AAC)</p> <ul> <li>Text-to-speech devices</li> <li>Symbol-based communication boards</li> <li>Eye-tracking input systems</li> <li>Predictive text for faster input</li> </ul>"},{"location":"mechatronics/hardware_software/#universal-design-principles","title":"Universal Design Principles","text":"<p>Design mechatronic systems that are usable by the widest range of people:</p> <ol> <li>Equitable Use - Usable by people with diverse abilities</li> <li>Flexibility - Accommodates individual preferences and abilities</li> <li>Simple and Intuitive - Easy to understand regardless of experience</li> <li>Perceptible Information - Communicates effectively to the user</li> <li>Tolerance for Error - Minimizes hazards and consequences of mistakes</li> <li>Low Physical Effort - Can be used efficiently and comfortably</li> <li>Size and Space - Appropriate size for approach, reach, and use</li> </ol>"},{"location":"mechatronics/hardware_software/#connection-to-oop-and-project-management","title":"Connection to OOP and Project Management","text":"<p>As you progress through the mechatronics module, constantly reflect on how your previous learning applies:</p> OOP Connections <p>Classes for Hardware Abstraction:</p> <pre><code>class UltrasonicSensor:\n    def __init__(self, trigger_pin, echo_pin):\n        self.trigger = Pin(trigger_pin, Pin.OUT)\n        self.echo = Pin(echo_pin, Pin.IN)\n\n    def measure_distance(self):\n        # Encapsulated measurement logic\n        ...\n        return distance\n\nclass ServoMotor:\n    def __init__(self, pin, min_angle=0, max_angle=180):\n        self.servo = PWM(Pin(pin))\n        self.servo.freq(50)\n        self.min_angle = min_angle\n        self.max_angle = max_angle\n\n    def set_angle(self, angle):\n        # Encapsulated angle conversion and constraints\n        ...\n</code></pre> <p>Inheritance for Specialized Components:</p> <pre><code>class Sensor:  # Base class\n    def read(self):\n        raise NotImplementedError\n\nclass TemperatureSensor(Sensor):\n    def read(self):\n        # Specific implementation\n        return temperature\n\nclass DistanceSensor(Sensor):\n    def read(self):\n        # Specific implementation\n        return distance\n</code></pre> Project Management Connections <p>Documentation:</p> <ul> <li>Component lists = Requirements specification</li> <li>Wiring diagrams = System architecture diagrams</li> <li>Code comments = Technical documentation</li> </ul> <p>Testing:</p> <ul> <li>Unit test each sensor/actuator individually</li> <li>Integration testing of subsystems</li> <li>System testing of complete mechatronic system</li> </ul> <p>Iteration:</p> <ul> <li>Prototype \u2192 Test \u2192 Refine \u2192 Deploy</li> <li>Agile sprints for project milestones</li> <li>Version control for code (Git)</li> </ul>"},{"location":"mechatronics/hardware_software/#next-steps","title":"Next Steps","text":"<p>Now that you understand the fundamentals of mechatronic hardware and software, you're ready to:</p> <ol> <li>Experiment with Your Kit - Build simple circuits and test code</li> <li>Learn Control Algorithms - Explore open-loop and closed-loop control</li> <li>Build Projects - Create integrated mechatronic systems</li> </ol>"},{"location":"mechatronics/hardware_software/#additional-resources","title":"Additional Resources","text":"Official Documentation <p>Raspberry Pi Pico:</p> <ul> <li>Pico Datasheet</li> <li>MicroPython for Pico</li> <li>Getting Started Guide</li> </ul> <p>Freenove Kit:</p> <ul> <li>Tutorial PDF included with kit</li> <li>Example code on GitHub</li> <li>Support: support@freenove.com</li> </ul> Learning Platforms <ul> <li>Raspberry Pi Projects</li> <li>MicroPython Documentation</li> <li>Adafruit Learn</li> <li>SparkFun Tutorials</li> </ul> Component References <ul> <li>HC-SR04 Ultrasonic Sensor</li> <li>L293D Motor Driver</li> <li>74HC595 Shift Register</li> </ul>"},{"location":"object_oriented_software/key_concepts/","title":"Key Concepts","text":""},{"location":"object_oriented_software/key_concepts/#encapsulation","title":"Encapsulation","text":""},{"location":"object_oriented_software/key_concepts/#inheritance","title":"Inheritance","text":""},{"location":"object_oriented_software/key_concepts/#polymorphism","title":"Polymorphism","text":""},{"location":"object_oriented_software/key_concepts/#abstraction","title":"Abstraction","text":""},{"location":"object_oriented_software/key_concepts/#generalisation","title":"Generalisation","text":""},{"location":"object_oriented_software/key_concepts/#association","title":"Association","text":""},{"location":"object_oriented_software/key_concepts/#composition","title":"Composition","text":""},{"location":"object_oriented_software/object_oriented_design/","title":"Object Oriented Design","text":"<p>Outline here are techniques for low level design when creating you solution. Some of these techniques can be applied to other coding paradigm and are good software practices to adopt. </p>"},{"location":"object_oriented_software/object_oriented_design/#dry","title":"DRY","text":"<p>Don't Repeat Yourself</p>"},{"location":"object_oriented_software/object_oriented_design/#solid","title":"SOLID","text":""},{"location":"object_oriented_software/object_oriented_design/#single-responsibility-principle","title":"Single Responsibility Principle","text":""},{"location":"object_oriented_software/object_oriented_design/#open-closed-principle","title":"Open-Closed Principle","text":""},{"location":"object_oriented_software/object_oriented_design/#liskov-substitution-principle","title":"Liskov Substitution Principle","text":""},{"location":"object_oriented_software/object_oriented_design/#interface-segregation-principle","title":"Interface Segregation Principle","text":""},{"location":"object_oriented_software/object_oriented_design/#dependency-inversion-principle","title":"Dependency Inversion Principle","text":""},{"location":"object_oriented_software/object_oriented_design/#further-reading","title":"Further Reading","text":""},{"location":"object_oriented_software/object_oriented_design/#books","title":"Books","text":"<p>Pragmatic Programmer Clean Code</p>"},{"location":"object_oriented_software/software_design_patterns/","title":"Software Design Patterns","text":""},{"location":"principles/","title":"Principals of Software Engineering","text":"<p>Software engineer, software developer, computer scientist or maybe just tech support, a career in software can be very rewarding, challenging, confronting and boring. Hopefully more of the prior, and the later is up to you to make a change and not accept the status quo. </p>"},{"location":"principles/#what-is-a-project","title":"What is a Project?","text":"<p>A project is a temporary endeavour with defined goals, scope, and deliverables, undertaken by a specific team or individual to achieve a specific objective or set of objectives. It typically involves a range of tasks, activities, and resources, managed within a planned timeframe, budget, and constraints. Projects differ from routine tasks or business-as-usual activities like maintaining software as they have a defined duration and scope of work.</p> <p>Key characteristics of a project include:</p> <ul> <li>Specific goals and objectives</li> <li>Defined scope and boundaries</li> <li>Temporary in nature (starts and ends with a defined timeline)</li> <li>Managed by a specific team or individual (project manager)</li> <li>Requires planning, resources allocation, and monitoring</li> <li>Has a clear set of deliverables and outcomes</li> </ul>"},{"location":"principles/#project-management","title":"Project Management","text":"<p>Many different project methodologies exist to provide a structure approach to managing projects. These methodologies are typically what a project or product manager follows when working with a team of software engineers to communicate what the business or client is expecting and what the engineering team will deliver. </p> <ul> <li>PMBOK - Project Management Body of Knowledge</li> <li>Prince2 - PRojects IN Controlled Environments</li> <li>Agile<ul> <li>Individuals and interactions over processes and tools</li> <li>Working software over comprehensive documentation</li> <li>Customer collaboration over contract negotiation</li> <li>Responding to change over following a plan</li> </ul> </li> </ul>"},{"location":"principles/#sdlc","title":"SDLC","text":"<ul> <li>Waterfall</li> <li>RAD</li> <li>V-Model</li> <li>Lean</li> <li>Agile</li> </ul>"},{"location":"principles/#sdlc-stages","title":"SDLC Stages","text":"<ul> <li>Planning and Requirements Analysis</li> <li>Requirements Definition</li> <li>Design</li> <li>Development</li> <li>Testing</li> <li>Deployment &amp; Maintenance</li> </ul>"},{"location":"principles/#sdlc-tooling","title":"SDLC Tooling","text":"<ul> <li>Software Process<ul> <li>Github, Gitlab, Bitbucket</li> </ul> </li> <li>Planning and Tracking<ul> <li>Jira, Trello, Monday.com</li> </ul> </li> <li>Collaborate<ul> <li>Confluence, Sharepoint, </li> </ul> </li> <li>Source Code Management<ul> <li>Git, SVN, Mercurial</li> </ul> </li> <li>Build and Deploy<ul> <li>Github, Gitlab, Bitbucket, Bamboo, Jenkins</li> </ul> </li> <li>Testing<ul> <li>Selenium, Postman, New Relic, Tricentis</li> </ul> </li> </ul>"},{"location":"principles/#references","title":"References","text":"<ul> <li>What is Agile, PMBOK, &amp; PRINCE2</li> <li>SDLC vs DevOps</li> </ul>"},{"location":"principles/agile/","title":"Agile Model","text":"<p>Agile development is a set of principles and practices that focus on delivering software in small increments, with frequent feedback and iteration. The key principles of agile development include:</p> <ul> <li>Individuals and interactions over processes and tools</li> <li>Working software over comprehensive documentation</li> <li>Customer collaboration over contract negotiation</li> <li>Responding to change over following a plan</li> </ul> <p>These principles are intended to help teams deliver high-quality software more efficiently and effectively, while also ensuring that the software meets the needs of its users. Agile development is often used in conjunction with other methodologies such as Scrum or Kanban, which provide specific frameworks for implementing agile practices.</p>"},{"location":"principles/agile/#practices-of-agile-development","title":"Practices of Agile Development","text":"<p>In addition to the principles, there are several key practices that are commonly associated with agile development:</p> <ul> <li>Sprint Planning: A meeting where the team determines what work they will complete during a sprint (usually one to four weeks).</li> <li>Daily Stand-up: A short daily meeting where team members share progress and discuss any blockers.</li> <li>Sprint Review: A meeting where the team demonstrates the completed work to stakeholders and gathers feedback. This can also be called a showcase.</li> <li>Retrospective: A meeting where the team reflects on their process and identifies areas for improvement.</li> </ul> <p>These practices help teams stay focused, communicate effectively, and adapt to changing requirements.</p> <p>(1)</p> <ol> <li>Mountain Goat Software, CC BY 2.5 https://creativecommons.org/licenses/by/2.5, via Wikimedia Commons</li> </ol>"},{"location":"principles/agile/#roles-and-stakeholders","title":"Roles and Stakeholders","text":"<p>In agile development, there are several key roles and stakeholders:</p> <ul> <li>Product Owner: The person responsible for defining the product vision and prioritising features.</li> <li>Scrum Master: The person responsible for facilitating the team's processes and ensuring they are following the agile framework.</li> <li>Development Team: The team responsible for building the product. This typically includes developers, testers, and designers.</li> <li>Stakeholders: Any individuals or groups who have an interest in the project, such as customers, managers, and investors.</li> </ul> <p>These roles and stakeholders work together to ensure that the product meets the needs of the customer and is delivered on time and within budget.</p>"},{"location":"principles/agile/#benefits-of-agile-development","title":"Benefits of Agile Development","text":"<p>Agile development offers several benefits, including:</p> <ul> <li>Increased flexibility: Teams can quickly respond to changes in requirements or priorities.</li> <li>Improved collaboration: Team members work closely together, which leads to better communication and problem-solving.</li> <li>Better quality: By delivering working software frequently, teams can identify and fix issues early on.</li> <li>Faster time-to-market: By delivering working software frequently, teams can get feedback from stakeholders and make changes more quickly.</li> <li>Increased customer satisfaction: By delivering working software frequently, teams can get feedback from stakeholders and make changes more quickly.</li> </ul> <p>Overall, agile development is a powerful approach that helps teams deliver high-quality software more efficiently.</p>"},{"location":"principles/agile/#drawbacks-of-agile-development","title":"Drawbacks of Agile Development","text":"<p>While agile development offers many benefits, it also has some drawbacks. These include:</p> <ul> <li>Complexity: Implementing agile practices can be challenging and require significant training.</li> <li>Resistance to change: Some organizations may resist adopting agile because they are used to traditional waterfall methodologies.</li> <li>Lack of documentation: Agile development emphasises delivering working software over comprehensive documentation, which can make it difficult for new team members to understand the project.</li> <li>Risk management: Agile teams must be able to manage risks effectively, as they may not have a detailed plan or timeline.</li> <li>Measurement challenges: Measuring the success of an agile project can be difficult because there is no one-size-fits-all approach.</li> </ul>"},{"location":"principles/agile/#references","title":"References","text":"<ul> <li>Agile Manifesto</li> <li>Agile Alliance</li> </ul>"},{"location":"principles/agile/#processes","title":"Processes","text":"<ul> <li>Scrum Guide</li> <li>Kanban Method</li> <li>Lean Software Development</li> <li>Continuous Delivery</li> </ul>"},{"location":"principles/agile/#practices","title":"Practices","text":"<ul> <li>Sprint Retrospectives</li> <li>User Stories</li> <li>Backlog Refinement</li> <li>Sprint Planning</li> <li>Daily Stand-ups</li> <li>Scrum of Scrums</li> <li>Sprint Reviews</li> </ul>"},{"location":"principles/other_sdlc/","title":"Other Development Lifecycles","text":""},{"location":"principles/other_sdlc/#wagile","title":"Wagile","text":"<p>Syllabus</p>"},{"location":"principles/other_sdlc/#rad-rapid-application-development","title":"RAD - Rapid Application Development","text":"<p>The Rapid Application Development (RAD) Software Development Life Cycle (SDLC) is a methodology that emphasises rapid development and delivery of software applications. It was developed by James Martin in 1994 as an alternative to traditional waterfall methodologies.</p>"},{"location":"principles/other_sdlc/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Iterative Development: RAD involves developing software in short, iterative cycles, typically lasting from a few days to several weeks.</li> <li>User-Centric: Users are involved throughout the development process to ensure that their needs and expectations are met.</li> <li>Joint Application Design (JAD): A collaborative approach where developers, users, and business analysts work together to design the application.</li> <li>Prototype Development: Rapid creation of prototypes to test and refine the application's functionality.</li> <li>Flexibility: RAD allows for changes in requirements or direction during development.</li> </ul>"},{"location":"principles/other_sdlc/#phases","title":"Phases","text":"<ol> <li>Business Modelling: Understanding the business needs and identifying the system's scope and objectives.</li> <li>Data Modelling: Defining the data structures and relationships required by the system.</li> <li>Process Modelling: Identifying and documenting the business processes to be supported by the system.</li> <li>Design: Creating a detailed design of the application, including user interfaces, database schema, and architecture.</li> <li>Implementation: Building the application in short iterative cycles, with continuous testing and refinement.</li> <li>Delivery: Deploying the final application to production.</li> </ol>"},{"location":"principles/other_sdlc/#advantages","title":"Advantages","text":"<ul> <li>Faster Time-to-Market: RAD enables rapid delivery of applications, often within weeks or months rather than years.</li> <li>Increased User Involvement: Users are actively involved throughout the development process, ensuring their needs and expectations are met.</li> <li>Improved Flexibility: RAD allows for changes in requirements or direction during development.</li> </ul>"},{"location":"principles/other_sdlc/#disadvantages","title":"Disadvantages","text":"<ul> <li>Higher Risk: RAD's rapid approach can lead to a higher risk of errors, defects, and technical debt.</li> <li>Increased Costs: While RAD can save time, it may require additional resources and expertise to manage the iterative process.</li> <li>Scalability Issues: RAD applications may not be designed with scalability in mind, leading to performance issues as user volumes grow.</li> </ul>"},{"location":"principles/other_sdlc/#when-to-use-rad","title":"When to Use RAD","text":"<ul> <li>Prototyping: RAD is ideal for developing prototypes or proof-of-concepts.</li> <li>Small Projects: RAD can be used for small projects with simple requirements and minimal complexity.</li> <li>Innovative Solutions: RAD's iterative approach allows for experimentation and exploration of new ideas.</li> </ul>"},{"location":"principles/other_sdlc/#when-not-to-use-rad","title":"When Not to Use RAD","text":"<ul> <li>Large, Complex Projects: RAD is not suitable for large, complex projects that require extensive planning, analysis, and design.</li> <li>Highly Regulated Industries: RAD may not be suitable for industries with strict regulatory requirements or high security standards.</li> <li>Mission-Critical Systems: RAD's rapid approach may not be suitable for mission-critical systems where reliability and stability are paramount.</li> </ul> <p>In summary, RAD is a flexible, iterative methodology that emphasises user involvement and rapid development. While it offers many benefits, including faster time-to-market and increased flexibility, it also poses higher risks and requires additional resources.</p>"},{"location":"principles/other_sdlc/#incremental-software-development-life-cycle","title":"Incremental Software Development Life Cycle","text":"<p>The Incremental SDLC is a methodology that involves developing software in smaller, manageable increments or iterations, with each increment building on the previous one to deliver a working system.</p>"},{"location":"principles/other_sdlc/#key-characteristics_1","title":"Key Characteristics","text":"<ul> <li>Breaking Down Large Projects: Breaking down large projects into smaller, more manageable components.</li> <li>Iterative Development: Developing software in short, iterative cycles, typically lasting from a few weeks to several months.</li> <li>Continuous Testing and Refinement: Continuously testing and refining each increment before moving on to the next one.</li> <li>Flexible Planning: Allowing for changes in requirements or direction during development.</li> </ul>"},{"location":"principles/other_sdlc/#phases_1","title":"Phases","text":"<ol> <li>Requirements Gathering: Collecting and documenting requirements from stakeholders, including users, customers, and business analysts.</li> <li>Analysis: Analysing the collected requirements to identify business needs and functional requirements.</li> <li>Design: Creating a detailed design of each increment, including user interfaces, database schema, and architecture.</li> <li>Implementation: Building each increment in short iterative cycles, with continuous testing and refinement.</li> <li>Testing and Refinement: Continuously testing and refining each increment before moving on to the next one.</li> <li>Deployment: Deploying each increment to production, making it available for use by end-users.</li> </ol>"},{"location":"principles/other_sdlc/#advantages_1","title":"Advantages","text":"<ul> <li>Reduced Risk: Incremental development reduces risk by breaking down large projects into smaller, more manageable components.</li> <li>Faster Time-to-Market: Incremental development allows for faster delivery of software applications, often within months rather than years.</li> <li>Improved User Satisfaction: Users can see working systems and provide feedback early on, leading to improved user satisfaction.</li> </ul>"},{"location":"principles/other_sdlc/#disadvantages_1","title":"Disadvantages:","text":"<ul> <li>Higher Costs: Incremental development may require additional resources and expertise to manage the iterative process.</li> <li>Increased Complexity: Managing multiple increments and versions of software can lead to increased complexity.</li> </ul>"},{"location":"principles/other_sdlc/#when-to-use-incremental-sdlc","title":"When to Use Incremental SDLC:","text":"<ul> <li>Large Projects: Incremental development is ideal for large projects that are too complex or difficult to develop in a single increment.</li> <li>Frequent Changes: When there are frequent changes in requirements or direction, incremental development allows for adaptability and flexibility.</li> <li>High-Risk Projects: Incremental development can help mitigate risks by breaking down high-risk projects into smaller components.</li> </ul>"},{"location":"principles/other_sdlc/#when-not-to-use-incremental-sdlc","title":"When Not to Use Incremental SDLC:","text":"<ul> <li>Small Projects: Incremental development may be overkill for small projects with simple requirements and minimal complexity.</li> <li>Mission-Critical Systems: Incremental development may not be suitable for mission-critical systems where reliability and stability are paramount.</li> <li>Highly Regulated Industries: Incremental development may not be suitable for industries with strict regulatory requirements or high security standards.</li> </ul>"},{"location":"principles/other_sdlc/#types-of-incremental-sdlc","title":"Types of Incremental SDLC:","text":"<ul> <li>Iterative Development: Developing software in short, iterative cycles, with each cycle building on the previous one.</li> <li>Incremental Implementation: Implementing each increment separately, with continuous testing and refinement.</li> <li>Agile Development: Combining iterative development with agile principles to deliver working software frequently.</li> </ul> <p>In summary, incremental SDLC is a methodology that involves developing software in smaller, manageable increments or iterations, with each increment building on the previous one to deliver a working system. While it offers many benefits, including reduced risk and faster time-to-market, it also poses higher costs and increased complexity.</p>"},{"location":"principles/revision_control_systems/","title":"Revision Control Systems","text":"<p>Revision control, not to be confused with version control, is a system used to manage changes to digital content over time. They allow multiple users to collaborate on a single document or set of files while maintaining a record of all changes.</p> <p>Most revision control systems provide:</p> <ul> <li>Versioning: Each change made to the content creates a new version, which is stored in the system.</li> <li>Check-in/Check-out: Users can check out specific versions of the content for editing and then check them back in when finished.</li> <li>Conflict resolution: When multiple users make changes to the same content simultaneously, the system resolves conflicts by merging or reconciling the changes.</li> <li>Branching and merging: Users can create separate branches of the content, allowing them to work on different versions independently.</li> </ul>"},{"location":"principles/revision_control_systems/#types-of-rcs","title":"Types of RCS","text":"<p>There are many types of revision control systems available, each with its own strengths and weaknesses. Some popular ones include:</p> <ul> <li>Git: A distributed version control system that is widely used in the open-source community.</li> <li>SVN (Subversion): A centralised version control system that was commonly used in enterprise environments.</li> <li>Mercurial: Another distributed version control system that is similar to Git.</li> </ul>"},{"location":"principles/revision_control_systems/#workflow","title":"Workflow","text":"<p>Every company will have their own workflow to manage a system using an RCS but the typical ones are:</p> <ul> <li>Feature Branch: involves creating a new branch for each feature or user story being developed, allowing developers to work on separate branches without affecting the main codebase</li> <li>Gitflow: A more complex workflow that involves multiple branches for different stages of development, such as master, develop, release and hotfix.</li> <li>Github flow: A simple workflow that involves creating a new branch for each feature or bug fix, and merging it back into the main branch once it is complete.</li> <li>Forking: A workflow where developers fork the repository and create their own branches for development, which are then merged back into the main branch once they are complete.</li> </ul>"},{"location":"principles/revision_control_systems/#typical-workflow","title":"Typical Workflow","text":""},{"location":"principles/revision_control_systems/#solo-development","title":"Solo Development","text":"<p>A solo developer can normally work on the trunk (main) of the repository without the need to branch. It is still a good idea to tag code after each feature is complete if you are following an agile process. It allows you to identify a done state of the code and give an easy way to compare changes between features without the need to remember which commit was feature complete.</p> <pre><code>gitGraph\n    checkout main\n    commit id: \"setting up project\"\n    commit id: \"implemented feature x\"\n    commit id: \"added missing tests\" tag: \"v1.0.0\"\n</code></pre>"},{"location":"principles/revision_control_systems/#group-development","title":"Group Development","text":"<p>When working as a group create a feature branch for your work would be typical. If you were following CI/CD and Github flow processes once your feature was complete and code reviewed you would merge this code back into main ready for the next release. </p> <p>Note</p> <p>To minimise conflicts in the main branch you would merge main into your branch before pushing your changes back.</p> <pre><code>---\ntitle: Group Development\n---\ngitGraph\n    commit\n    commit\n    checkout main\n    branch feature\n    checkout feature\n    commit\n    commit\n    checkout main\n    merge feature\n    commit\n    commit tag: \"v1.0.0\"</code></pre>"},{"location":"principles/revision_control_systems/#benefits","title":"Benefits","text":"<ul> <li>Collaboration: Work with others on the same project </li> <li>Efficient Collaboration: Use branches and merging to manage conflicts</li> <li>Code Management: Keep track of changes over time and revert if needed</li> <li>Continuous Integration: Automate testing and deployment processes</li> <li>Scalability: Easily add new features or maintain existing ones without affecting the main branch</li> </ul>"},{"location":"principles/revision_control_systems/#further-reading","title":"Further Reading","text":"<ul> <li>What is Version Control</li> <li>Release Strategies Using Git Branching</li> </ul>"},{"location":"principles/sdlc/","title":"Software Development Life Cycle","text":"<p>The Software Development Life Cycle SDLC<sup>12</sup> is the core of software engineering. It aims to produce software products that meet or exceed customer expectations, even for the most basic needs. This structured process integrates critical stages to deliver high-quality results through every stage of product development, from conception to operation. The primary goal is to manage each phase efficiently while supporting customers with maximum effectiveness and timeliness. By doing so, SDLC ensures a well-designed, functional, and user-friendly product that meets customer requirements. There are many different models that can be followed but they all have similar components.</p> <p></p>"},{"location":"principles/sdlc/#planning","title":"Planning","text":"<p>The best laid plans of mice and men often go awry (1)</p> <ol> <li>Burns, Robert. To a Mouse 1785</li> </ol> <p>Planning is critical to the success of most software development projects. Plans along with estimates of effort guide investment decisions. A company may be willing to invest in a 6 month project that may require 4 FTEs<sup>6</sup> but they may resist or refuse to invest in a project that will take many years of investment or even more than 1 year. Planning is difficult and can also be wrong. This can result in some teams avoiding to plan at all, and not able to answer simple question like \"when can this be ready?\". They can also spend too much time in planning trying to account for everything but their plans are not guaranteed to be right or stay accurate after the first day of design or code. Barry Boehm described the range of uncertainty with planning and estimates when describing the waterfall model. </p> <p></p> <p>This shows that at the planning phase the schedule can be out by a factor of +160% or -60% and as progress is made and more is understood about the system under development those plans and estimates become more certain. </p> <p>Planning is done to:</p> <ul> <li>Identify and reduce risk</li> <li>Reduce the uncertainty of delivering a solution</li> <li>Support better decision making around doing a project and where best to invests time, money and resources.</li> <li>Establish trust with the customer through planning frequent and reliable delivery of features and trust between management and developers that timelines can be achieved and not at the cost of bugs and poor code due to poor planning.</li> <li>It also allows a customer to pick and choose features. Maybe a low priority feature can be dropped if it would take too long to develop.</li> <li>Conveys expectations and sets a baseline of what can be delivered. It does not guarantee all features can be delivered on time and on budget.</li> </ul> <p>A common idiom in the software development life cycle is that you can have a project delivered on time, on budget or all features, pick two. The meaning behind this is that software development is complex and typically by the end of the project one of these 3 requirements is sacrificed to deliver a product.</p>"},{"location":"principles/sdlc/#why-plans-fail","title":"Why Plans Fail","text":"<ul> <li>Nearly 2 out of 3 projects significantly overrun their cost estimates (1)</li> <li>64% of of features included in products are not used (2)</li> <li>The average project exceeds its schedule by 100% (3)</li> </ul> <ol> <li>LEDERER, A. L., &amp; PRASAD, J. (1992). Nine management guidelines for better cost estimating. Communications of the ACM, 35(2), 50\u201359.</li> <li>Johnson 2002</li> <li>Standish 2001</li> </ol>"},{"location":"principles/sdlc/#analysis","title":"Analysis","text":"<p>Analysis involves determining the requirements of the system to be developed. If following the waterfall model it can be a thorough examination of the problem, goals, and requirements of the project to determine how it can be successfully completed. When following an agile model it can be a more iterative approach where the requirements are continuously refined throughout the development process.</p>"},{"location":"principles/sdlc/#goals-of-analysis","title":"Goals of Analysis","text":"<ul> <li>Understand the Problem: Identify and document the business needs, goals, and objectives that the system is intended to meet.</li> <li>Define Requirements: Gather and document the functional and non-functional requirements of the system, including user needs, technical specifications, and performance expectations.</li> <li>Identify Feasibility: Assess whether the proposed solution is technically feasible, economically viable, and meets the business goals.</li> </ul>"},{"location":"principles/sdlc/#analysis-activities","title":"Analysis Activities:","text":"<ul> <li>Business Analysis: Conduct interviews with stakeholders to understand their needs, identify potential solutions, and document requirements.</li> <li>Requirements Gathering: Collect and document functional and non-functional requirements through techniques such as use cases, user stories, or business process modelling.</li> <li>Data Analysis: Examine existing data sources, determine the data required for the system, and develop a data management plan.</li> <li>Technical Analysis: Evaluate the technical feasibility of proposed solutions, identify potential technical risks, and recommend architectural approaches.</li> </ul>"},{"location":"principles/sdlc/#function-requirements","title":"Function Requirements:","text":"<p>Functional requirements describe what the system must do from a user's perspective. They outline the expected behaviour, interactions, and outcomes of the system in response to specific inputs or events. These requirements are expected to be specific, measurable, achievable, relevant, and time-bound (SMART). Different types of functional requirements include:</p> <ul> <li>User Interface Requirements: Describe how users will interact with the system, including screen layouts, navigation, and user controls.</li> <li>Business Logic Requirements: Define the rules and processes that govern the system's operations, such as data validation, business rules, and workflows.</li> </ul>"},{"location":"principles/sdlc/#examples-of-functional-requirements","title":"Examples of Functional Requirements:","text":"<ul> <li>\"The user can log in to the system using their username and password.\"</li> <li>\"The system must display a list of all customers in descending order by sales amount.\"</li> <li>\"The system sends an automated email notification to users when their account balance falls below $10.\"</li> <li>\"The system calculates the average price of items purchased within the last 30 days.\"</li> </ul>"},{"location":"principles/sdlc/#non-functional-requirements","title":"Non-Functional Requirements:","text":"<p>Non-functional requirements describe how the system should perform in terms of performance, reliability, security, usability, and other non-technical factors. These requirements are expected to be measurable and verifiable. Different types of non-functional requirements include:</p> <ul> <li>Performance Requirements: Define how fast, reliable, and scalable the system should be. Examples include response time, throughput, and concurrency.</li> <li>Usability Requirements: Define how easy it is for users to interact with the system. Examples include ease of navigation, clarity of instructions, and accessibility features.</li> <li>Security Requirements: Define how secure the system should be against unauthorised access, data breaches, and other security threats. Examples include encryption, authentication, and authorisation.</li> <li>Reliability Requirements: Define how often the system should be available and how quickly it should recover from failures. Examples include up-time, mean time between failures (MTBF<sup>9</sup>), and mean time to repair (MTTR<sup>10</sup>).</li> </ul>"},{"location":"principles/sdlc/#analysis-outputs-deliverables","title":"Analysis Outputs / Deliverables:","text":"<ul> <li>Software Requirements Specification (SRS): A document that outlines the technical requirements for the system.</li> <li>Business Requirements Document (BRD): A document that outlines the business needs, goals, and objectives.</li> <li>Functional Specification Document (FSD): A detailed description of the system's functionality, including user interfaces and system interactions.</li> <li>Data Flow Diagrams: Visual representations of how data flows through the system.</li> <li>Use Case Models: Documents that describe the interaction between actors (users) and the system.</li> <li>User Stories: Short descriptions of features or functionality from the perspective of a user.</li> </ul> <p> (1)</p> <ol> <li>https://en.wikipedia.org/wiki/File:UseCaseDiagramExample.png#filelinks</li> </ol>"},{"location":"principles/sdlc/#analysis-methods","title":"Analysis Methods:","text":"<ul> <li>Structured Analysis: A method that uses diagrams to model business processes and identify requirements. This may include Structure Charts.</li> <li>Object-Oriented Analysis: An approach that focuses on modelling the structure of the system using objects and classes. UML diagrams are commonly used in this approach.</li> <li>Use Case Driven Development: A method that emphasises the importance of the user experience and their interaction with the system.</li> </ul> <p> (1)</p> <ol> <li>Pluke, Public domain, via Wikimedia Commons</li> </ol> <p>Note</p> <p>Structured Charts are rarely used in the industry today due to their complexity and lack of flexibility. They can however be beneficial when learning to develop software systems to understand how it would work and the logical sequence of event that should occur. Alternative methods such as Object-Oriented Analysis or Use Case Driven Development are often preferred but are used more at a high level of detail. It is likely needed at lower levels when working on mission critical systems like a traffic control system.</p>"},{"location":"principles/sdlc/#best-practices","title":"Best Practices:","text":"<ul> <li>Involve Stakeholders Early: Engage stakeholders throughout the analysis process to ensure their needs are met.</li> <li>Document Requirements Thoroughly: Use clear, concise language and avoid ambiguities in requirements documents.</li> <li>Validate Assumptions: Regularly review and validate assumptions with stakeholders to ensure the solution is aligned with business goals.</li> <li>Iterate Based on Feedback: Continuously gather feedback from users and stakeholders, and make iterative improvements to the system.</li> </ul>"},{"location":"principles/sdlc/#design","title":"Design","text":"<p>The design phase is where the software architect and designers create a detailed plan for building the system. The primary goal of this phase is to produce a complete, accurate, and feasible design that meets the requirements gathered during analysis. This is expected when following the waterfall model of development. Depending on the size of the team, the project's complexity and the processes being followed the designer might also be the developer and the design may only focus on the current feature being developed.</p>"},{"location":"principles/sdlc/#purpose-of-design-phase","title":"Purpose of Design Phase:","text":"<ul> <li>Create a System Architecture: Develop a high-level architecture that defines the overall structure and organization of the system.</li> <li>Define Technical Requirements: Identify technical specifications for software components, interfaces, data storage, and other system aspects.</li> <li>Design User Interfaces: Create detailed designs for user interfaces, including layout, navigation, and interaction flows.</li> <li>Identify Technical Risks: Assess potential technical risks and propose mitigation strategies.</li> </ul>"},{"location":"principles/sdlc/#activities-of-design-phase","title":"Activities of Design Phase:","text":"<ul> <li>System Architecture Design: Creating a high-level blueprint or architecture for a software system, which defines how the various components will interact with each other to achieve the - desired functionality.</li> <li>Component-Level Design: Create detailed designs for individual software components, including APIs, databases, and services.</li> <li>Data Model Design: Define data structures, relationships, and storage requirements.</li> <li>User Interface Design: Create wireframes, prototypes, or high-fidelity designs for user interfaces.</li> <li>Technical Documentation Generation: Produce technical documents that describe the system's architecture, components, and interfaces.</li> <li>Design Review and Revisions: Conduct design reviews to ensure the design meets requirements and makes necessary revisions.</li> </ul>"},{"location":"principles/sdlc/#design-outputs-deliverables","title":"Design Outputs / Deliverables:","text":"<ul> <li>System Architecture Diagrams: Visual representations of the system's overall structure and organization.</li> <li>Component Diagrams: Detailed diagrams illustrating individual software components and their interactions.</li> <li>Data Flow Diagrams: Visualisations of data flows through the system.</li> <li>User Interface Designs: Wireframes, prototypes, or high-fidelity designs for user interfaces.</li> <li>Technical Documentation: Documented descriptions of the system's architecture, components, and interfaces.</li> </ul>"},{"location":"principles/sdlc/#design-methods","title":"Design Methods:","text":"<ul> <li>Object-Oriented Design (OOD): Emphasises modular, reusable components with well-defined interfaces.</li> <li>Agile Design: Focuses on iterative design, prototyping, and user feedback to drive development.</li> <li>Model-Driven Architecture (MDA): Uses models to define the system's architecture and generate code.</li> <li>Domain Driven Design (DDD): Focuses on modelling the domain logic and business rules within the system.</li> </ul>"},{"location":"principles/sdlc/#best-practices-for-design-phase","title":"Best Practices for Design Phase:","text":"<ul> <li>Involve stakeholders early: Engage users, developers, and other stakeholders in the design process.</li> <li>Document designs thoroughly: Use clear, concise language and avoid ambiguity.</li> <li>Test designs with prototypes: Validate assumptions through user testing and feedback.</li> <li>Maintain a single source of truth: Keep design documentation up-to-date and accessible to all team members.</li> </ul> <p>More details on the design processes, tools and techniques can be found here.</p>"},{"location":"principles/sdlc/#implementation","title":"Implementation","text":"<p>The Implementation Phase is where the designed system is transformed into a working solution. The primary purpose of this phase is to bring all components and features together, ensuring seamless interactions between them. During implementation, individual software components are developed, integrated, and tested, with a focus on delivering a fully functional system that meets user needs. This phase also involves data migration, user acceptance testing (UAT), and knowledge transfer activities to ensure that the new system is properly documented and maintained. The successful completion of the Implementation Phase results in a working system that is reliable, efficient, and meets stakeholder expectations.</p>"},{"location":"principles/sdlc/#activities","title":"Activities","text":"<ol> <li>Code Implementation: Writing the source code for the application using appropriate programming languages and frameworks.</li> <li>Integration: Combining different modules or components to create a fully integrated system.</li> <li>Unit Testing: Conducting individual unit tests on each component or module to ensure they function as expected in isolation.</li> <li>System Testing: Performing comprehensive testing of the entire system to verify that it meets functional and non-functional requirements, such as performance, security, and usability.</li> <li>Integration Testing: Ensuring that all integrated components work together seamlessly and produce the desired output.</li> <li>Code Reviews: Conducting code reviews by other developers or stakeholders to identify potential issues and improve code quality.</li> <li>Documentation: Creating comprehensive documentation for the developed system, including user manuals, API documentation, and technical specifications.</li> </ol>"},{"location":"principles/sdlc/#purpose","title":"Purpose","text":"<ol> <li>Translate Design into Code: Convert the design specifications into actual working software code.</li> <li>Ensure Functionality: Verify that each component and the entire system functions as intended, meeting all functional requirements.</li> <li>Improve Quality: Identify and fix defects or issues during testing to improve the overall quality of the system.</li> <li>Facilitate Integration: Combine different components into a cohesive system, ensuring seamless integration and compatibility.</li> <li>Document System: Create detailed documentation for the developed system, making it easier for users and stakeholders to understand and use the system.</li> </ol> <p>By focusing on these activities and purposes, the Implementation Phase ensures that the software system is developed efficiently, effectively, and with a high degree of quality, meeting stakeholder expectations and requirements.</p> <p>The unit on Object Oriented Programming (OOP) will provide more details on the implementation phase.</p>"},{"location":"principles/sdlc/#test","title":"Test","text":"<p>The Test Phase is aimed at ensuring that the developed system meets the required quality standards, is reliable, and functions as expected. The primary purpose of this phase is to identify and report defects or issues in the system, allowing for timely corrections and improvements before release. Through various testing techniques, such as unit testing, integration testing, system testing, and acceptance testing, the test phase verifies that the system meets its functional, performance, security, and usability requirements. By identifying and addressing defects early on, the Test Phase helps to reduce project costs, minimise rework, and ensure that the final product is of high quality, reliable, and meets stakeholder expectations. The successful completion of the Test Phase guarantees that the developed system is defect-free, efficient, and effective in meeting its intended purpose.</p> <p>More details on testing techniques can be found here.</p>"},{"location":"principles/sdlc/#deploy","title":"Deploy","text":"<p>The Deployment Phase is where the tested system is deployed to production, making it available for use by end-users. The primary purpose of this phase is to transfer the developed software from a testing environment to a live production environment, ensuring seamless integration with existing systems and infrastructure. During deployment, various tasks are performed, including configuring servers, databases, and other dependencies; updating external interfaces and integrations; and executing final quality assurance checks. The successful completion of the Deployment Phase results in the system being available for use by end-users, enabling them to access its features and functionality as intended. </p>"},{"location":"principles/sdlc/#activities_1","title":"Activities","text":"<ol> <li>Preparation: Preparing the deployment environment by ensuring that all necessary hardware, software, and network resources are available.</li> <li>Installation: Installing the software on the target environment, including configuring dependencies and setting up any required infrastructure.</li> <li>Configuration: Configuring the system according to the organization's requirements, such as integrating with existing systems or databases.</li> <li>Testing: Conducting final testing of the deployed system in the production environment to ensure it meets all functional and non-functional requirements.</li> <li>User Training: Providing training sessions for end-users on how to use the new system effectively.</li> <li>Documentation: Creating comprehensive documentation for the deployed system, including user manuals, API documentation, and technical specifications.</li> <li>Go-Live Planning: Developing a go-live plan that includes the date, time, and procedures for transitioning users from the old system (if any) to the new system.</li> </ol> <p>Purpose:</p> <ol> <li>Make System Available: Ensure that the developed software system is properly installed, configured, and integrated into the organization's environment, making it ready for actual usage.</li> <li>Verify Functionality: Conduct final testing in the production environment to ensure that the system meets all functional and non-functional requirements.</li> <li>Transfer Ownership: Transfer ownership of the deployed system from development teams to operational teams or end-users.</li> <li>Provide Support: Provide ongoing support and maintenance services to address any issues that arise during the system's use.</li> <li>Document Deployment: Create comprehensive documentation for the deployed system, making it easier for users and stakeholders to understand and use the system.</li> </ol> <p>By focusing on these activities and purposes, the Deployment Phase ensures that the software system is delivered successfully, meeting stakeholder expectations and requirements, and providing ongoing support and maintenance services as needed.</p> <p>The above activities are more traditional for a waterfall model. In an Agile model, these activities may be integrated into the Iteration Planning and Review phases. DevOps and SecOps practices may further streamline these processes by automating certain tasks and integrating DevOps tools into the SDLC. This is what is termed shifting left in development practices, where more of the later phases are addressed earlier in the development process.</p>"},{"location":"principles/sdlc/#maintenance","title":"Maintenance","text":"<p>The Maintenance Phase is an ongoing component of the Software Development Life Cycle (SDLC), focused on ensuring that the deployed system continues to meet changing user needs, adapt to new technologies, and remain secure over time. The primary purpose of this phase is to monitor the system's performance, identify areas for improvement, and implement updates, fixes, and enhancements to maintain its quality, reliability, and functionality. Through regular review and analysis of user feedback, system logs, and other metrics, maintenance activities aim to address emerging issues, optimise performance, and align the system with evolving business requirements. By dedicating resources to ongoing maintenance, organisations can ensure that their software systems remain relevant, efficient, and effective in meeting stakeholder expectations.</p> <p>In companies that develop and operate their own systems, the Maintenance Phase is often a significant part of their overall strategy. It involves not only technical activities such as bug fixing and performance tuning but also business processes like user training, process improvement, and strategic planning. By prioritising maintenance, organisations can reduce the risk of downtime, improve customer satisfaction, and enhance their competitive advantage. The company may set up a dedicated team or department responsible for managing the Maintenance Phase, ensuring that all necessary resources are allocated to address any issues that arise.</p>"},{"location":"principles/test/","title":"Testing","text":"<p>Testing is the process of verifying that software meets its requirements. It involves identifying and evaluating defects or errors in the software to ensure it functions as intended. Testing can be performed at various levels, including unit testing, integration testing, system testing, and acceptance testing.</p>"},{"location":"principles/test/#functional-testing","title":"Functional Testing","text":"<p>Functional testing focuses on verifying that each function or feature within the application behaves as expected. The primary goal of functional testing is to ensure that all parts of an application work together correctly and produce the desired output when given specific inputs. Functional testing is a mix of automated and manual testing techniques. Typically the smaller the test the more automated and frequent you want it to be run.</p> <p>Note</p> <p>Functional testing will test both functional and non-functional requirements. It is also important to have positive and negative testing scenarios to ensure that all possible outcomes are covered.</p>"},{"location":"principles/test/#key-aspects-of-functional-testing","title":"Key Aspects of Functional Testing:","text":"<ol> <li>Requirements Validation: Ensuring that the actual implementation meets the requirements specified during the design phase.</li> <li>Feature Verification: Checking individual features or modules for correctness.</li> <li>Edge Case Handling: Testing scenarios at the extremes (e.g., maximum and minimum values, extreme conditions).</li> <li>User Interface Testing: Verifying that the application's user interface behaves correctly and is intuitive to use.</li> <li>Usability Testing: Evaluating how easy it is for users to interact with the application.</li> </ol>"},{"location":"principles/test/#types-of-functional-tests","title":"Types of Functional Tests:","text":""},{"location":"principles/test/#unit-testing","title":"Unit Testing","text":"<ul> <li>Definition: The smallest testable part of an application is tested, often performed by developers.</li> <li>Frequency: These will be run daily by developers and the CI/CD processes. There can be 100s to 10,000s of tests in a large system.</li> <li>Purpose: To ensure that individual units (methods or functions) work as intended.</li> <li>Example Tools: JUnit, NUnit, unittest, pytest</li> </ul>"},{"location":"principles/test/#integration-testing","title":"Integration Testing","text":"<ul> <li>Definition: Testing the interfaces between software modules to ensure they communicate correctly.</li> <li>Frequency: Are typically automated but might be less frequent as they test the interaction between different components. These are run infrequently by a developer, typically only when changing the part of the system that the tests verify. They will be run in the CI/CD pipeline on every commit or maybe nightly depending on the complexity of the system.</li> <li>Purpose: To verify that different components of the application work together seamlessly.</li> <li>Example Tools: Selenium WebDriver, Postman. Tools in unit testing can also be used for integration testing.</li> </ul>"},{"location":"principles/test/#system-testing","title":"System Testing","text":"<ul> <li>Definition: A comprehensive test conducted on a complete and fully integrated system to verify that it meets its specified requirements.</li> <li>Frequency: More likely to be manual tests and run less frequently. Typically before each release or before merging changes into a production branch.</li> <li>Purpose: To validate the entire system as a whole against the requirements.</li> <li>Example Tools: LoadRunner, JMeter, Behave, Lettuce</li> </ul>"},{"location":"principles/test/#acceptance-testing","title":"Acceptance Testing","text":"<ul> <li>Definition: Testing performed to determine whether a software product meets the end-user requirements and is fit for deployment.</li> <li>Purpose: To ensure that the application satisfies user needs before it is released to production.</li> <li>Example Tools: Selenium WebDriver, Postman, Robot Framework</li> </ul>"},{"location":"principles/test/#regression-testing","title":"Regression Testing","text":"<ul> <li>Definition: Testing conducted after changes (such as new features or bug fixes) are made to ensure that existing functionality continues to work correctly.</li> <li>Purpose: To prevent the introduction of new bugs during code modifications.</li> <li>Example Tools: Jenkins, GitLab CI/CD</li> </ul>"},{"location":"principles/test/#test-design-techniques","title":"Test Design Techniques:","text":"<ol> <li> <p>Equivalence Partitioning:</p> <ul> <li>Dividing input values into partitions based on whether they produce equivalent results and testing representative elements from each partition.</li> </ul> </li> <li> <p>Boundary Value Analysis:</p> <ul> <li>Testing at the boundaries between valid and invalid inputs to ensure that error conditions are handled correctly.</li> </ul> </li> <li> <p>State Transition Diagrams:</p> <ul> <li>Using diagrams to model how the application transitions between states, often used in testing finite state machines (FSMs).</li> </ul> </li> <li> <p>Decision Table Testing:</p> <ul> <li>Creating tables that list all combinations of input values and expected outcomes to test all possible scenarios.</li> </ul> </li> </ol>"},{"location":"principles/test/#benefits-of-functional-testing","title":"Benefits of Functional Testing","text":"<ol> <li>Quality Assurance: Ensures that software meets the specified requirements.</li> <li>User Confidence: Provides users with confidence in the application\u2019s reliability.</li> <li>Cost Reduction: Identifies defects early, reducing the cost of fixing them later.</li> <li>Compliance: Ensures compliance with industry standards and regulations.</li> </ol>"},{"location":"principles/test/#challenges-of-functional-testing","title":"Challenges of Functional Testing","text":"<ol> <li>Complexity: Applications often have many features, making it challenging to test every combination.</li> <li>Resource Intensive: Large-scale testing can be resource-intensive in terms of time, cost, and human resources.</li> <li>Dynamic Nature: Software requirements can change frequently, requiring continuous adaptation of tests.</li> </ol> <p>Functional testing ensures that applications are built to meet user needs and perform as expected. By using various techniques and tools, developers can effectively conduct functional testing and deliver high-quality software products.</p>"},{"location":"principles/test/#acceptance-testing_1","title":"Acceptance Testing","text":""},{"location":"principles/test/#beta-testing","title":"Beta Testing","text":""},{"location":"principles/test/#volume-testing","title":"Volume Testing","text":""},{"location":"principles/test/#live-data","title":"Live Data","text":""},{"location":"principles/test/#simulated-data","title":"Simulated Data","text":""},{"location":"principles/waterfall/","title":"Waterfall Model","text":"<p>The waterfall model is a linear sequential software development process. It involves a series of phases that must be completed in order before the next phase can begin. The phases typically include requirements gathering, design, implementation, testing, and maintenance. Each phase builds upon the previous one, ensuring that the software is developed systematically and thoroughly.</p> <p>(1)</p> <ol> <li>Aaron Beverley, CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0, Created with draw.io.</li> </ol> <p>The waterfall model is often considered to be a traditional approach to software development because it has been around for many years. It is straightforward to understand and implement, making it a popular choice for small projects or teams with limited resources.</p> <p>However, the waterfall model has several limitations that can make it unsuitable for larger or more complex projects. One of the main issues is that it assumes that all requirements are known at the beginning of the project and that they will not change throughout the development process. This can be difficult to achieve in practice, as requirements often evolve over time. Additionally, the sequential nature of the model means that if a problem is discovered during testing or maintenance, it may be too late to fix it without causing significant delays or additional costs. </p>"},{"location":"principles/waterfall/#phases-of-waterfall-model","title":"Phases of Waterfall Model","text":"<p>The waterfall model typically consist of seven phases.</p> <ol> <li>Requirements Gathering: This phase involves identifying and documenting the needs of the stakeholders. It includes activities such as interviews, surveys, and workshops. The goal is to gather all the requirements that will be used to develop the software.</li> <li>Analysis: In this phase, the gathered requirements are analysed to determine their feasibility and to create a detailed design for the software. This involves creating use cases, data flow diagrams, and other artifacts that describe how the software should work. </li> <li>Design: The design phase involves creating a detailed plan for implementing the software. This includes creating architecture diagrams, component diagrams, and other artifacts that describe how the software will be built. The goal is to create a design that is both feasible and scalable.</li> <li>Implementation: In this phase, the software is actually developed according to the design plan. This involves writing code, testing, and debugging. The goal is to produce a working version of the software that meets all the requirements.</li> <li>Testing: This phase of the waterfall model involves testing the software to ensure that it meets all the requirements and is free of defects. This includes unit testing, integration testing, system testing, and acceptance testing.</li> <li>Deployment: Once the software has been tested and approved, it is deployed to the production environment. This involves configuring the software, setting up user accounts, and providing training to users.</li> <li>Maintenance: After deployment, the software may need to be updated or modified to fix defects or add new features. This phase involves ongoing support and maintenance of the software.</li> </ol>"},{"location":"principles/waterfall/#benefits-of-waterfall-model","title":"Benefits of Waterfall Model","text":"<p>The waterfall model has several benefits, including:</p> <ol> <li>Clarity: The model provides a clear and structured approach to software development. Each phase must be completed before moving on to the next, which helps ensure that all requirements are met. Note the arrows in the diagram above. You can also move back a phase, but this happens in rare cases and you will only move back to a previous phase if there is an error or defect found in the current phase.</li> <li>Documentation: The model requires extensive documentation at each stage of the development process. This documentation serves as a reference for future maintenance and support.</li> <li>Risk Management: By breaking down the software development process into discrete phases, the waterfall model allows for better risk management. Each phase can be tested and reviewed before moving on to the next, which helps identify potential problems early in the development process.</li> <li>Predictability: The model provides a predictable timeline for software development. Each phase has a specific duration, which helps ensure that the project stays on schedule.</li> <li>Quality Assurance: The model emphasises quality assurance at each stage of the development process. This includes code reviews, testing, and other activities to ensure that the final product meets the required standards.</li> <li>Team Coordination: The model requires close coordination between all team members involved in the software development process. This helps ensure that everyone is working towards a common goal.</li> </ol>"},{"location":"principles/waterfall/#drawbacks-of-waterfall-model","title":"Drawbacks of Waterfall Model","text":"<p>The waterfall model also has several drawbacks, including:</p> <ol> <li>Rigidity: The model can be rigid and inflexible. Changes to requirements or design during the development process can be costly and time-consuming.</li> <li>Lack of Flexibility: The model does not allow for flexibility in the software development process. Once a phase is completed, it cannot be changed without considerable effort and resources that can severely impact the project timeline and budget.</li> <li>Communication Issues: The model relies on extensive documentation to communicate requirements and design decisions. This can lead to communication issues if the documentation is not clear or up-to-date.</li> <li>Risk of Failure: The model assumes that all requirements are known at the start of the development process. If this assumption is incorrect, it can lead to a failure in the project, cost overruns, reduction in project scope, or extended project timelines.</li> <li>Lack of Feedback: The model does not provide feedback until the end of each phase. This can make it difficult to identify and address issues early in the development process.</li> <li>High Cost: The model can be expensive because it requires extensive documentation, testing, and quality assurance.</li> </ol>"},{"location":"secure_software_architecture/","title":"Secure Software Architecture","text":""},{"location":"secure_software_architecture/#introduction","title":"Introduction","text":"<p>Secure software architecture is the process of designing and building software systems that are resilient, secure, and reliable. It involves identifying potential security risks and vulnerabilities, and implementing measures to mitigate them.</p>"},{"location":"secure_software_architecture/#ideas","title":"Ideas","text":"<ul> <li>Cyphers https://www.cmu.edu/gelfand/lgc-educational-media/digital-education-modules/dem-documents/new-the-world-of-the-internet-handouts.pdf<ul> <li>not specifically required for the current context.</li> </ul> </li> </ul>"},{"location":"web_development/","title":"Overview","text":"<p>Secure Software Architecture and Programming for the Web have been blended as they have significant conceptual overlaps that makes integration more effective:</p> <ul> <li>Authentication, authorisation, and encryption appear in both</li> <li>Security concepts are more meaningful when applied to real web projects</li> <li>Students can immediately see the \"why\" behind security practices</li> <li>Web development without security feels incomplete and outdated</li> </ul>"},{"location":"web_development/#course-overview","title":"Course Overview","text":"<p>Duration: 16 weeks (5-6 hours per week) Approach: Blended integration of Secure Software Architecture and Programming for the Web  </p> <p>Note</p> <p>This is work in progress. The contents on this page may change as the course details are created.</p>"},{"location":"web_development/#phase-1-web-fundamentals-security-awareness","title":"Phase 1: Web Fundamentals &amp; Security Awareness","text":"<p>Duration: Weeks 1-3</p>"},{"location":"web_development/#week-1-how-the-web-works","title":"Week 1: How the Web Works","text":"<p>Learning Objectives:</p> <ul> <li>Explain how data is transferred across the internet</li> <li>Identify different web protocols and their purposes</li> <li>Distinguish between secure and insecure connections</li> <li>Use browser developer tools to analyse network traffic</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Investigate how data is transferred on the internet (data packets, IP addresses IPv4, DNS)</li> <li>\u2713 Investigate and describe web protocols and ports (HTTP, HTTPS, TCP/IP, DNS)</li> <li>\u2713 Explore and explain the influence of a web browser on web development, including dev tools</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Describe benefits of developing secure software (data protection, minimising cyber attacks)</li> <li>\u2713 Explore fundamental security concepts (introduction to confidentiality, integrity, availability)</li> </ul> <p>Content Overview:</p> <ul> <li>Complete journey of a web request from URL to rendered page</li> <li>Data packets and how information travels across networks</li> <li>IPv4 addressing and DNS resolution</li> <li>HTTP vs HTTPS comparison with security implications</li> <li>Browser developer tools (Network tab, Console, Elements)</li> <li>Introduction to why security matters on the web</li> </ul>"},{"location":"web_development/#week-2-web-protocols-security-foundations","title":"Week 2: Web Protocols &amp; Security Foundations","text":"<p>Learning Objectives:</p> <ul> <li>Describe the function and security features of key web protocols</li> <li>Explain encryption fundamentals and SSL/TLS operation</li> <li>Analyse SSL certificates to verify secure connections</li> <li>Understand hash values and digital signatures</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Investigate and describe web protocols and ports (FTP, SFTP, SSL, TLS, SMTP, POP3, IMAP)</li> <li>\u2713 Explain processes for securing the web (SSL certificates, encryption algorithms, encryption keys, plain text and cipher text, authentication and authorisation, hash values, digital signatures)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (confidentiality, integrity, availability)</li> </ul> <p>Content Overview:</p> <ul> <li>Deep dive into protocol functions and port numbers</li> <li>File transfer protocols: FTP vs SFTP security comparison</li> <li>Email protocols: SMTP, POP3, IMAP</li> <li>SSL/TLS handshake process and certificate infrastructure</li> <li>Symmetric vs asymmetric encryption</li> <li>Introduction to hashing and digital signatures</li> <li>Authentication and authorisation concepts</li> <li>Plain text vs cipher text demonstrations</li> </ul>"},{"location":"web_development/#week-3-introduction-to-web-development-security-mindset","title":"Week 3: Introduction to Web Development &amp; Security Mindset","text":"<p>Learning Objectives:</p> <ul> <li>Create basic web pages using HTML and CSS</li> <li>Apply W3C standards for accessibility and security</li> <li>Recognise potential security vulnerabilities in web applications</li> <li>Explain the role of W3C in web development</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Explore applications of web programming (interactive websites, e-commerce, PWAs)</li> <li>\u2713 Investigate and explain the role of W3C (WAI, internationalisation, web security, privacy, machine-readable data)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Describe benefits of developing secure software (data protection, minimising attacks and vulnerabilities)</li> <li>\u2713 Describe how capabilities and experience of end users influence secure design features</li> </ul> <p>Content Overview:</p> <ul> <li>HTML structure and semantic elements</li> <li>Basic CSS for styling</li> <li>W3C standards and their importance</li> <li>Web Accessibility Initiative (WAI) guidelines</li> <li>Introduction to web security and privacy standards</li> <li>Machine-readable data formats</li> <li>Real-world examples of hacked websites</li> <li>Security by design mindset introduction</li> <li>End user considerations in design</li> </ul>"},{"location":"web_development/#phase-2-front-end-development-input-security","title":"Phase 2: Front-End Development &amp; Input Security","text":"<p>Duration: Weeks 4-6  </p>"},{"location":"web_development/#week-4-javascript-fundamentals-client-side-security","title":"Week 4: JavaScript Fundamentals &amp; Client-Side Security","text":"<p>Learning Objectives:</p> <ul> <li>Develop interactive web pages using JavaScript</li> <li>Implement input validation and sanitisation</li> <li>Demonstrate and prevent Cross-Site Scripting (XSS) attacks</li> <li>Apply defensive programming practices for client-side code</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Model elements that form a web development system (client-side/front-end web programming)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (authentication, authorisation, accountability)</li> <li>\u2713 Design, develop and implement code using defensive data input handling practices (input validation, sanitisation, error handling)</li> <li>\u2713 Design, develop and implement secure code to minimise vulnerabilities in user action controls (cross-site scripting XSS)</li> <li>\u2713 Apply security features for data protection, security, privacy and regulatory compliance</li> </ul> <p>Content Overview:</p> <ul> <li>JavaScript basics: variables, data types, functions, events</li> <li>DOM manipulation and event handling</li> <li>Interactive form creation</li> <li>XSS vulnerability demonstration (controlled environment)</li> <li>Input validation techniques</li> <li>HTML escaping and sanitisation</li> <li>Regular expressions for input patterns</li> <li>Client-side error handling</li> <li>Security vs usability balance</li> </ul>"},{"location":"web_development/#week-5-css-frameworks-version-control-secure-development-lifecycle","title":"Week 5: CSS Frameworks, Version Control &amp; Secure Development Lifecycle","text":"<p>Learning Objectives:</p> <ul> <li>Apply CSS frameworks to create responsive, accessible designs</li> <li>Use Git for version control and collaboration</li> <li>Explain the software development lifecycle with security integration</li> <li>Understand how end-user capabilities influence design decisions</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Investigate CSS and its impact (consistency, flexibility, maintenance tools)</li> <li>\u2713 Investigate reasons for version control and apply it when developing web applications</li> <li>\u2713 Explore types and significance of code libraries for front-end development (frameworks, predesigned CSS classes)</li> <li>\u2713 Investigate methods to support and manage load times of web pages/applications</li> <li>\u2713 Design and apply UI/UX principles (font, colour, navigation)</li> <li>\u2713 Design UI that considers accessibility and inclusivity</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Interpret and apply fundamental software development steps (requirements definition, specifications, design, development, integration, testing and debugging)</li> <li>\u2713 Describe how capabilities and experience of end users influence secure design features</li> <li>\u2713 Use and explain 'privacy by design' approach (proactive not reactive, embed privacy into design)</li> </ul> <p>Content Overview:</p> <ul> <li>CSS frameworks (Bootstrap/Tailwind)</li> <li>Responsive design principles</li> <li>Predesigned CSS classes for consistency</li> <li>Load time optimisation (CDN vs local hosting)</li> <li>Git fundamentals: init, add, commit, push, pull</li> <li>Branching strategies and merge workflows</li> <li>Version control for secure development</li> <li>Software Development Lifecycle (SDLC): requirements \u2192 design \u2192 develop \u2192 test \u2192 deploy \u2192 maintain</li> <li>Security by design approach</li> <li>Privacy by design principles</li> <li>Accessibility considerations (WCAG guidelines)</li> <li>End user technical literacy and design implications</li> </ul>"},{"location":"web_development/#week-6-advanced-client-side-security-user-experience","title":"Week 6: Advanced Client-Side Security &amp; User Experience","text":"<p>Learning Objectives:</p> <ul> <li>Prevent Cross-Site Request Forgery (CSRF) attacks</li> <li>Implement secure session management concepts on client-side</li> <li>Create accessible and secure user authentication interfaces</li> <li>Apply privacy by design principles in user interfaces</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Design and apply UI/UX principles (font, colour, audio, video, navigation)</li> <li>\u2713 Design UI that considers accessibility and inclusivity</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (authentication, authorisation, accountability)</li> <li>\u2713 Design, develop and implement secure code to minimise vulnerabilities (cross-site request forgery CSRF)</li> <li>\u2713 Design, develop and implement code considering efficient execution (session management)</li> <li>\u2713 Use and explain 'privacy by design' approach (respect for user privacy)</li> <li>\u2713 Apply security features for data protection, privacy and regulatory compliance</li> </ul> <p>Content Overview:</p> <ul> <li>CSRF attacks explained and demonstrated</li> <li>CSRF token implementation (client-side)</li> <li>Introduction to session management</li> <li>Authentication vs authorisation (front-end perspective)</li> <li>Secure login form design</li> <li>Password strength indicators</li> <li>Accessible error messages (security without revealing system details)</li> <li>ARIA attributes for screen readers</li> <li>Keyboard navigation</li> <li>Color contrast and visual accessibility</li> <li>Privacy by design: data minimisation in forms</li> <li>User privacy controls and preferences</li> <li>Multi-factor authentication user flows</li> </ul>"},{"location":"web_development/#phase-3-back-end-development-core-security","title":"Phase 3: Back-End Development &amp; Core Security","text":"<p>Duration: Weeks 7-10  </p>"},{"location":"web_development/#week-7-server-side-programming-authentication-template-engines","title":"Week 7: Server-Side Programming, Authentication &amp; Template Engines","text":"<p>Learning Objectives: - Set up and configure a web server - Implement secure password hashing and authentication - Use template engines to render dynamic content - Apply cryptography in authentication systems</p> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Model elements that form a web development system (server-side/back-end web programming)</li> <li>\u2713 Observe and describe back-end process used to manage web request (webserver software, web framework, objects, libraries)</li> <li>\u2713 Develop web application using appropriate scripting language</li> <li>\u2713 Explore types and significance of code libraries (template engines)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (authentication, authorisation, accountability)</li> <li>\u2713 Use and explain the contribution of cryptography to 'security by design' approach</li> <li>\u2713 Design, develop and implement code using defensive data input handling practices (input validation, sanitisation, error handling)</li> <li>\u2713 Design, develop and implement secure code to minimise vulnerabilities (broken authentication and session management)</li> </ul> <p>Content Overview:</p> <ul> <li>Webserver software (Apache, Nginx, Node.js, Python servers)</li> <li>Web frameworks (Express, Flask, Django)</li> <li>Complete request-response cycle</li> <li>Server-side routing and endpoints</li> <li>Template engines (EJS, Jinja2, Handlebars)</li> <li>Rendering dynamic HTML from server</li> <li>Password hashing (bcrypt, scrypt, argon2)</li> <li>Never store plain text passwords</li> <li>Password salting</li> <li>Secure authentication logic</li> <li>Session creation and management</li> <li>Server-side validation and sanitisation</li> <li>Error handling and exception management</li> </ul>"},{"location":"web_development/#week-8-database-integration-sql-injection-prevention-rest-principles","title":"Week 8: Database Integration, SQL Injection Prevention &amp; REST Principles","text":"<p>Learning Objectives:</p> <ul> <li>Connect web applications to databases</li> <li>Write secure SQL queries using prepared statements</li> <li>Prevent SQL injection attacks</li> <li>Apply RESTful design principles to API endpoints</li> <li>Understand database scaling for large datasets</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Model elements that form a web development system (interfacing with databases based on SQL or non-SQL)</li> <li>\u2713 Observe and describe back-end process (databases)</li> <li>\u2713 Develop web application with shell scripts (make files and directories, searching for text)</li> <li>\u2713 Apply web-based database and construct script that executes SQL (selecting fields, 'group by', common SQL queries, constraints using WHERE, table joins)</li> <li>\u2713 Compare Object-Relational Mapping (ORM) to SQL</li> <li>\u2713 Investigate effect of big data on web architecture (data mining, metadata - introduction)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (confidentiality, integrity, availability)</li> <li>\u2713 Design, develop and implement code using defensive data input handling practices (input validation, sanitisation)</li> <li>\u2713 Apply security features for data protection</li> </ul> <p>Content Overview:</p> <ul> <li>SQL vs NoSQL database overview</li> <li>Database schema design principles</li> <li>Connecting server to database</li> <li>SQL queries: SELECT, INSERT, UPDATE, DELETE</li> <li>WHERE clauses and constraints</li> <li>GROUP BY for data aggregation</li> <li>Table joins (INNER, LEFT, RIGHT)</li> <li>SQL injection vulnerability demonstration</li> <li>Parameterised queries / prepared statements</li> <li>Object-Relational Mapping (ORM) tools</li> <li>ORM vs raw SQL comparison</li> <li>Shell scripts for database management</li> <li>Bash commands for file operations</li> <li>Introduction to RESTful API principles</li> <li>REST conventions (GET, POST, PUT, DELETE)</li> <li>JSON request/response format</li> <li>Database indexing for performance</li> <li>Introduction to data mining concepts</li> <li>Metadata management in databases</li> </ul>"},{"location":"web_development/#week-9-advanced-authentication-authorisation-session-management","title":"Week 9: Advanced Authentication, Authorisation &amp; Session Management","text":"<p>Learning Objectives:</p> <ul> <li>Implement comprehensive authentication and authorisation systems</li> <li>Apply role-based access control (RBAC)</li> <li>Secure session management with best practices</li> <li>Prevent broken authentication vulnerabilities</li> <li>Handle race conditions in concurrent requests</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Assess contribution of back-end web development to success of web application</li> <li>\u2713 Investigate effect of big data on web architecture (streaming service management - scalability)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Explore fundamental security concepts (authentication, authorisation, accountability)</li> <li>\u2713 Use and explain contribution of cryptography to 'security by design' approach</li> <li>\u2713 Design, develop and implement code considering efficient execution (memory management, session management, exception management)</li> <li>\u2713 Design, develop and implement secure code to minimise vulnerabilities (broken authentication and session management, invalid forwarding and redirecting, race conditions)</li> <li>\u2713 Apply security features for data protection, security, privacy and regulatory compliance</li> </ul> <p>Content Overview:</p> <ul> <li>Authentication: \"Who are you?\" (verification methods)</li> <li>Authorisation: \"What can you do?\" (permissions and roles)</li> <li>Accountability: Logging and audit trails</li> <li>Role-based access control (RBAC) implementation</li> <li>User roles: admin, user, moderator, etc.</li> <li>Protected routes and middleware</li> <li>Session creation, storage, and destruction</li> <li>Secure session cookies (httpOnly, secure, sameSite flags)</li> <li>Session hijacking prevention</li> <li>Session fixation vulnerabilities</li> <li>Session timeout and expiration</li> <li>Broken authentication vulnerabilities</li> <li>Rate limiting for brute force prevention</li> <li>Multi-factor authentication concepts</li> <li>Exception management and error handling</li> <li>Try-catch blocks for database operations</li> <li>Generic error messages to users</li> <li>Detailed logging for developers</li> <li>Race conditions in authentication</li> <li>Time-of-check to time-of-use (TOCTOU) vulnerabilities</li> <li>Database locks and atomic operations</li> <li>Memory management for session storage</li> <li>Session storage at scale (distributed systems)</li> <li>Invalid redirects and forwards prevention</li> </ul>"},{"location":"web_development/#week-10-file-security-safe-apis-cryptography-in-practice","title":"Week 10: File Security, Safe APIs &amp; Cryptography in Practice","text":"<p>Learning Objectives:</p> <ul> <li>Implement secure file upload handling</li> <li>Prevent file-based attacks and path traversal</li> <li>Design and implement safe RESTful APIs</li> <li>Apply cryptography for data protection</li> <li>Understand API security in context of big data and streaming</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Observe and describe back-end process (objects, libraries)</li> <li>\u2713 Investigate effect of big data on web architecture (streaming service management - API rate limiting)</li> <li>\u2713 Describe how collaborative work practices between front-end and back-end developers improve development (API contracts)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Use and explain contribution of cryptography to 'security by design' approach</li> <li>\u2713 Design, develop and implement a safe API to minimise software vulnerabilities</li> <li>\u2713 Design, develop and implement secure code to protect user file and hardware vulnerabilities from file attacks and side channel attacks</li> <li>\u2713 Apply security features for data protection, security, privacy and regulatory compliance</li> </ul> <p>Content Overview:</p> <ul> <li>File upload vulnerabilities</li> <li>Unrestricted file upload attacks</li> <li>Path traversal attacks (../../etc/passwd)</li> <li>File inclusion vulnerabilities</li> <li>Side channel attacks (timing attacks, cache attacks)</li> <li>Secure file handling practices</li> <li>File type validation (magic numbers, not just extensions)</li> <li>File name sanitisation</li> <li>Storing files outside web root</li> <li>File size limits and scanning</li> <li>File permissions and access control</li> <li>RESTful API design and implementation</li> <li>API endpoint security</li> <li>JWT (JSON Web Tokens) for API authentication</li> <li>API rate limiting and throttling</li> <li>Input validation for API requests</li> <li>CORS (Cross-Origin Resource Sharing) policies</li> <li>API versioning strategies</li> <li>Practical cryptography implementation</li> <li>Encrypting sensitive data at rest</li> <li>Encrypting data in transit</li> <li>Key management strategies</li> <li>Environment variables for secrets</li> <li>Never hard-code encryption keys</li> <li>API security for big data applications</li> <li>Streaming service security considerations</li> <li>API contracts for front-end/back-end collaboration</li> </ul>"},{"location":"web_development/#phase-4-secure-architecture-progressive-web-apps","title":"Phase 4: Secure Architecture &amp; Progressive Web Apps","text":"<p>Duration: Weeks 11-14</p>"},{"location":"web_development/#week-11-progressive-web-apps-privacy-by-design","title":"Week 11: Progressive Web Apps &amp; Privacy by Design","text":"<p>Learning Objectives:</p> <ul> <li>Design and implement Progressive Web Apps (PWAs)</li> <li>Apply privacy by design principles throughout development</li> <li>Create installable, offline-capable web applications</li> <li>Implement comprehensive UI/UX with accessibility</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Explore applications of web programming (progressive web apps)</li> <li>\u2713 Design, develop and implement a progressive web app (PWA)</li> <li>\u2713 Application of UI and UX principles (font, colour, audio, video, navigation)</li> <li>\u2713 UI that considers accessibility and inclusivity</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Use and explain 'privacy by design' approach (proactive not reactive, embed privacy into design, respect for user privacy)</li> <li>\u2713 Use and explain contribution of sandboxing to 'security by design' approach</li> <li>\u2713 Apply security features for data protection, security, privacy and regulatory compliance</li> <li>\u2713 Describe how capabilities and experience of end users influence secure design features</li> </ul> <p>Content Overview:</p> <ul> <li>Progressive Web App characteristics</li> <li>Service workers for offline functionality</li> <li>Web app manifest configuration</li> <li>Installable web applications</li> <li>Push notifications</li> <li>Cache strategies (cache-first, network-first, stale-while-revalidate)</li> <li>Privacy by design principles</li> <li>Proactive privacy approach (not reactive)</li> <li>Privacy as default setting</li> <li>Embedding privacy into design from start</li> <li>Full lifecycle data protection</li> <li>Respect for user privacy and control</li> <li>Data minimisation principles</li> <li>Privacy-preserving technologies</li> <li>GDPR and privacy regulation compliance</li> <li>Cookie consent implementation</li> <li>Privacy policy and transparency</li> <li>User data dashboard (view/download/delete)</li> <li>Data retention policies</li> <li>Sandboxing concepts</li> <li>Browser sandboxing (iframes, same-origin policy)</li> <li>Isolating code execution</li> <li>Container concepts for deployment</li> <li>UI/UX design principles</li> <li>Typography and color theory</li> <li>Multimedia integration (images, audio, video)</li> <li>Accessible navigation</li> <li>Responsive design for all devices</li> <li>ARIA attributes and screen reader support</li> <li>Keyboard navigation</li> <li>Alternative text and captions</li> <li>Designing for diverse user capabilities</li> </ul>"},{"location":"web_development/#week-12-testing-strategies-security-hardening","title":"Week 12: Testing Strategies &amp; Security Hardening","text":"<p>Learning Objectives:</p> <ul> <li>Apply multiple security testing methodologies</li> <li>Conduct code reviews with security focus</li> <li>Use SAST and DAST tools to find vulnerabilities</li> <li>Perform vulnerability assessments and penetration testing</li> <li>Harden systems against security threats</li> </ul> <p>Syllabus Coverage:</p> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Interpret and apply fundamental software development steps (testing and debugging)</li> <li>\u2713 Test and evaluate security and resilience of software by determining vulnerabilities, hardening systems</li> <li>\u2713 Apply and evaluate strategies used by software developers to manage security of programming code (code review, SAST, DAST, vulnerability assessment, penetration testing)</li> <li>\u2713 Use and explain contribution of sandboxing to 'security by design' approach</li> </ul> <p>Content Overview:</p> <ul> <li>Comprehensive testing strategies</li> <li>Code review best practices</li> <li>Security-focused code review checklist</li> <li>Peer review workflows</li> <li>Automated code review tools (linters)</li> <li>Static Application Security Testing (SAST)</li> <li>Source code analysis without execution</li> <li>SAST tools: SonarQube, ESLint security plugins, Bandit</li> <li>Identifies: SQL injection, XSS, hard-coded secrets, buffer overflows</li> <li>Integration into development workflow</li> <li>Dynamic Application Security Testing (DAST)</li> <li>Testing running applications (black-box)</li> <li>DAST tools: OWASP ZAP, Burp Suite</li> <li>Identifies: runtime vulnerabilities, configuration issues, auth problems</li> <li>Simulating real attacks</li> <li>Vulnerability assessment</li> <li>Systematic security weakness examination</li> <li>Risk rating and prioritisation</li> <li>Automated scanners plus manual testing</li> <li>Penetration testing</li> <li>Authorised simulated attacks</li> <li>Ethical hacking methodology</li> <li>Red team vs blue team exercises</li> <li>Finding exploitable vulnerabilities</li> <li>System hardening techniques</li> <li>Remove unnecessary dependencies</li> <li>Update libraries to latest secure versions</li> <li>Implement security headers (CSP, X-Frame-Options, HSTS)</li> <li>Configure secure defaults</li> <li>Disable directory listing</li> <li>Remove debug code and comments</li> <li>Sandboxing for testing</li> <li>Container isolation (Docker concepts)</li> <li>Virtual machines for testing</li> <li>Limiting blast radius of vulnerabilities</li> </ul>"},{"location":"web_development/#week-13-business-continuity-disaster-recovery-open-source","title":"Week 13: Business Continuity, Disaster Recovery &amp; Open Source","text":"<p>Learning Objectives:</p> <ul> <li>Develop incident response and disaster recovery plans</li> <li>Implement business continuity strategies</li> <li>Handle security breaches appropriately</li> <li>Evaluate open-source software and CMS platforms</li> <li>Understand big data backup and recovery strategies</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Explain use and development of open-source software in relation to web development</li> <li>\u2713 Research, experiment with and evaluate prevalence and use of web content management systems (CMS)</li> <li>\u2713 Investigate effect of big data on web architecture (backup and recovery at scale)</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Interpret and apply fundamental software development steps (installation, maintenance)</li> <li>\u2713 Test and evaluate security and resilience of software (handling breaches, maintaining business continuity, conducting disaster recovery)</li> </ul> <p>Content Overview:</p> <ul> <li>Security breach handling</li> <li>Incident response plan development</li> <li>Detection and analysis procedures</li> <li>Containment strategies</li> <li>Eradication and recovery steps</li> <li>Post-incident review and lessons learned</li> <li>Communication protocols (users, stakeholders, regulators)</li> <li>Business continuity planning</li> <li>Keeping critical functions operational during incidents</li> <li>Redundancy and failover systems</li> <li>High availability architecture</li> <li>Disaster recovery planning</li> <li>Recovery Point Objective (RPO)</li> <li>Recovery Time Objective (RTO)</li> <li>Backup strategies (3-2-1 rule: 3 copies, 2 media types, 1 offsite)</li> <li>Regular backup testing</li> <li>Database replication</li> <li>Cloud-based disaster recovery</li> <li>Monitoring and alerting systems</li> <li>Installation and deployment considerations</li> <li>Maintenance phase of SDLC</li> <li>Patch management</li> <li>Security updates and vulnerability remediation</li> <li>Open-source software in web development</li> <li>Benefits: community support, transparency, cost, flexibility</li> <li>Security considerations: code vetting, vulnerability disclosure</li> <li>Contributing to open source</li> <li>Licenses (MIT, GPL, Apache) and compliance</li> <li>Content Management Systems (CMS)</li> <li>WordPress, Drupal, Joomla comparison</li> <li>Headless CMS (Strapi, Contentful, Sanity)</li> <li>When to use CMS vs custom development</li> <li>CMS security: plugin vulnerabilities, update management</li> <li>Industry prevalence evaluation</li> <li>Big data backup and recovery</li> <li>Backing up large-scale databases</li> <li>Streaming service continuity</li> </ul>"},{"location":"web_development/#week-14-collaborative-development-professional-practices","title":"Week 14: Collaborative Development &amp; Professional Practices","text":"<p>Learning Objectives:</p> <ul> <li>Apply collaborative development practices in teams</li> <li>Delegate tasks based on expertise</li> <li>Improve solution quality through collaboration</li> <li>Integrate front-end and back-end development</li> <li>Demonstrate professional software development workflows</li> </ul> <p>Syllabus Coverage:</p> <p>Programming for the Web:</p> <ul> <li>\u2713 Describe how collaborative work practices between front-end and back-end developers improve development of web solution</li> </ul> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Interpret and apply fundamental software development steps (complete lifecycle: requirements \u2192 maintenance)</li> <li>\u2713 Apply and describe benefits of collaboration to develop safe and secure software (considering various points of view, delegating tasks based on expertise, quality of solution)</li> </ul> <p>Content Overview:</p> <ul> <li>Benefits of collaborative development</li> <li>Diverse perspectives improve security</li> <li>Shared knowledge reduces single points of failure</li> <li>Code review catches more vulnerabilities</li> <li>Delegation based on expertise</li> <li>Front-end specialist, back-end specialist, security specialist, UX designer</li> <li>Quality improvement through peer accountability</li> <li>Front-end and back-end collaboration</li> <li>API contract design (agree on endpoints before implementation)</li> <li>Documentation and communication</li> <li>Shared testing environments</li> <li>Version control workflows</li> <li>Git branching strategies (feature branches, pull requests)</li> <li>Integration testing together</li> <li>Agile security practices</li> <li>Security in sprint planning</li> <li>Definition of \"done\" includes security checks</li> <li>Security champions in development teams</li> <li>Regular security retrospectives</li> <li>Complete SDLC in practice</li> <li>Requirements gathering for secure applications</li> <li>Specifications with security requirements</li> <li>Secure design patterns</li> <li>Development with security in mind</li> <li>Integration testing</li> <li>Testing and debugging for security</li> <li>Deployment and installation</li> <li>Ongoing maintenance and updates</li> </ul>"},{"location":"web_development/#phase-5-enterprise-impact-professional-standards","title":"Phase 5: Enterprise Impact &amp; Professional Standards","text":"<p>Duration: Weeks 15-16  </p>"},{"location":"web_development/#week-15-enterprise-benefits-industry-impact","title":"Week 15: Enterprise Benefits &amp; Industry Impact","text":"<p>Learning Objectives:</p> <ul> <li>Analyse benefits of secure development practices to enterprises</li> <li>Evaluate impact on products, services, and work practices</li> <li>Assess productivity and business interactivity improvements</li> <li>Connect security investments to business outcomes</li> </ul> <p>Syllabus Coverage:</p> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Investigate and explain benefits to enterprise of implementation of safe and secure development practices (improved products or services, influence on future software development, improved work practices, productivity, business interactivity)</li> </ul> <p>Content Overview:</p> <ul> <li>Enterprise benefits of secure software development</li> <li>Improved products and services</li> <li>Competitive advantage through security</li> <li>Customer trust and retention</li> <li>Reduced liability and legal costs</li> <li>Brand reputation protection</li> <li>Influence on future software development</li> <li>Security-first culture establishment</li> <li>Technical debt reduction</li> <li>Foundation for innovation</li> <li>Easier regulatory compliance</li> <li>Scalability with security built-in</li> <li>Improved work practices</li> <li>Automated testing reduces manual effort</li> <li>Version control improves workflows</li> <li>Code review improves team knowledge</li> <li>Documentation reduces onboarding time</li> <li>Clear security standards reduce ambiguity</li> <li>Productivity improvements</li> <li>Fewer security incidents = less downtime</li> <li>Automation of security checks</li> <li>Better collaboration tools</li> <li>Reduced time spent on firefighting</li> <li>Business interactivity enhancements</li> <li>API-first architecture enables partnerships</li> <li>Secure integrations with third-party services</li> <li>Data-driven decision making</li> <li>Real-world metrics</li> <li>Cost of security investment vs cost of breaches</li> <li>ROI calculation for security measures</li> <li>Financial impact analysis of major breaches</li> <li>Case studies of security success and failure</li> </ul>"},{"location":"web_development/#week-16-social-ethical-legal-ramifications","title":"Week 16: Social, Ethical &amp; Legal Ramifications","text":"<p>Learning Objectives:</p> <ul> <li>Evaluate social, ethical, and legal issues in secure software development</li> <li>Analyse ramifications affecting people and enterprises</li> <li>Take informed positions on controversial issues</li> <li>Demonstrate mastery through capstone project presentations</li> </ul> <p>Syllabus Coverage:</p> <p>Secure Software Architecture:</p> <ul> <li>\u2713 Evaluate social, ethical and legal issues and ramifications affecting people and enterprises resulting from development and implementation of safe and secure software (employment, data security, privacy, copyright, intellectual property, digital disruption)</li> </ul> <p>Content Overview:</p> <ul> <li>Employment impact</li> <li>Job creation in cybersecurity field</li> <li>Automation and job displacement</li> <li>Need for continuous learning and upskilling</li> <li>Remote work enabled by secure systems</li> <li>Gig economy and platform security</li> <li>Data security and privacy issues</li> <li>GDPR, CCPA, and global privacy regulations</li> <li>Right to be forgotten</li> <li>Data portability rights</li> <li>Consent and transparency requirements</li> <li>Children's online privacy (COPPA)</li> <li>Biometric data concerns</li> <li>Surveillance capitalism</li> <li>Copyright and intellectual property</li> <li>Software licensing (proprietary vs open source)</li> <li>API copyright issues</li> <li>Code plagiarism and attribution</li> <li>Trade secret protection</li> <li>Patent considerations in software</li> <li>Fair use in web scraping and data collection</li> <li>Digital disruption</li> <li>Traditional industries transformed by web technology</li> <li>Democratisation of services and information</li> <li>Economic inequality and digital divide</li> <li>Environmental impact (data centers, energy consumption)</li> <li>Social media, misinformation, and platform responsibility</li> <li>Ethical dilemmas in web development</li> <li>Dark patterns in UX design</li> <li>Addictive design practices</li> <li>Surveillance and user tracking</li> <li>Algorithmic bias and discrimination</li> <li>Accessibility as ethical imperative</li> <li>Responsible vulnerability disclosure</li> <li>Cultural differences in privacy expectations</li> </ul>"},{"location":"web_development/how_the_web_works/","title":"How the Web Works","text":""},{"location":"web_development/how_the_web_works/#lesson-1-the-journey-of-a-web-request","title":"Lesson 1: The Journey of a Web Request","text":""},{"location":"web_development/how_the_web_works/#overview","title":"Overview","text":"<p>Duration: 90-120 minutes Focus: Data transmission, packets, and the request-response cycle Mode: Self-paced, remote learning</p>"},{"location":"web_development/how_the_web_works/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this lesson, you will be able to:</p> <ul> <li>Trace the complete journey of a web request from URL to rendered page</li> <li>Explain how data packets work and why they're used</li> <li>Identify the role of IP addresses and DNS in web communication</li> </ul>"},{"location":"web_development/how_the_web_works/#part-1-mystery-scenario-10-minutes","title":"Part 1: Mystery Scenario (10 minutes)","text":"<p>Imagine you're sending a 1000-piece jigsaw puzzle to a friend across the country, but you can only send one piece at a time in small envelopes. How would you make sure:</p> <ol> <li>All pieces arrive?</li> <li>Your friend knows which puzzle the pieces belong to?</li> <li>Your friend can put them together in the right order?</li> </ol> <p>Activity</p> <p>Write down your strategy in your learning journal for the mystery scenario. Keep this analogy in mind as we explore how the internet sends data!</p>"},{"location":"web_development/how_the_web_works/#part-2-what-happens-when-you-visit-a-website-30-minutes","title":"Part 2: What Happens When You Visit a Website? (30 minutes)","text":"<p>When you type <code>www.example.com</code> into your browser and press Enter, an incredible chain of events occurs in milliseconds. Let's break it down:</p>"},{"location":"web_development/how_the_web_works/#step-1-dns-lookup-finding-the-address","title":"Step 1: DNS Lookup (Finding the Address)","text":"<ul> <li>Your computer doesn't understand \"www.example.com\" - it needs a number!</li> <li>DNS (Domain Name System) acts like a phone book for the internet</li> <li>Your browser asks a DNS server: \"What's the IP address for example.com?\"</li> <li>DNS responds with something like: <code>93.184.216.34</code> (IPv4 address)</li> </ul>"},{"location":"web_development/how_the_web_works/#step-2-making-the-request","title":"Step 2: Making the Request","text":"<ul> <li>Your browser creates an HTTP request asking for the website's content</li> <li>This request includes information like: what you want, what browser you're using, and what language you prefer</li> </ul>"},{"location":"web_development/how_the_web_works/#step-3-data-packets","title":"Step 3: Data Packets","text":"<ul> <li>Your request is broken into small chunks called packets</li> <li>Each packet contains:<ul> <li>Header: Destination IP address, source IP address, packet number, protocol information</li> <li>Payload: The actual data being sent</li> <li>Trailer: Error checking information</li> </ul> </li> </ul> <p>Why packets?</p> <ul> <li>More efficient use of network resources</li> <li>Multiple communications can share the same connection</li> <li>If one packet fails, only that packet needs resending</li> <li>Packets can take different routes to reach the destination faster</li> </ul>"},{"location":"web_development/how_the_web_works/#step-4-tcpip-protocol","title":"Step 4: TCP/IP Protocol","text":"<ul> <li>TCP (Transmission Control Protocol): Ensures packets arrive correctly and in order</li> <li>IP (Internet Protocol): Routes packets to the correct destination</li> <li>TCP adds sequence numbers so packets can be reassembled correctly</li> </ul>"},{"location":"web_development/how_the_web_works/#step-5-server-response","title":"Step 5: Server Response","text":"<ul> <li>The web server receives your request</li> <li>It processes the request and prepares a response</li> <li>The response (HTML, CSS, images, etc.) is also broken into packets</li> <li>Packets travel back to your computer</li> </ul>"},{"location":"web_development/how_the_web_works/#step-6-rendering","title":"Step 6: Rendering","text":"<ul> <li>Your browser receives all the packets</li> <li>TCP reassembles them in the correct order</li> <li>Your browser interprets the HTML, CSS, and JavaScript</li> <li>The webpage appears on your screen!</li> </ul>"},{"location":"web_development/how_the_web_works/#sequence-diagram-for-visiting-a-website","title":"Sequence Diagram for Visiting a Website","text":"<pre><code>sequenceDiagram\n    participant User as User's Browser\n    participant DNS as DNS Server\n    participant Server as Web Server\n\n    %% Step 1: DNS Lookup\n    User-&gt;&gt;DNS: Request IP for www.example.com\n    DNS--&gt;&gt;User: Responds with IP address (93.184.216.34)\n\n    %% Step 2: TCP/TLS Handshake (optional for HTTPS)\n    User-&gt;&gt;Server: TCP connection request (SYN)\n    Server--&gt;&gt;User: SYN-ACK\n    User-&gt;&gt;Server: ACK (TCP connection established)\n    Note over User,Server: If HTTPS, perform TLS handshake here\n\n    %% Step 3: HTTP Request\n    User-&gt;&gt;Server: Sends HTTP GET request for webpage\n\n    %% Step 4: Server Response\n    Server--&gt;&gt;User: Sends HTTP response (HTML, CSS, JS, images)\n\n    %% Step 5: Packet Transmission\n    Note over User,Server: Data is broken into packets and reassembled via TCP/IP\n\n    %% Step 6: Rendering\n    User-&gt;&gt;User: Browser parses HTML, CSS, JS\n    User-&gt;&gt;User: Renders and displays webpage</code></pre>"},{"location":"web_development/how_the_web_works/#using-chrome-devtools-to-inspect-network-activity","title":"Using Chrome DevTools to Inspect Network Activity","text":"<ul> <li>Watch  Inspect Network Activity - Chrome DevTools 101</li> </ul> <p>Structure Chart for Visiting a Website</p> <p>Create a structure chart to represent the process of visiting a website. Use the Higher School Certificate Course Specifications \u2013 Software Engineering section on structure charts as a guide.</p>"},{"location":"web_development/how_the_web_works/#part-2b-why-security-matters-in-data-transmission-15-minutes","title":"Part 2B: Why Security Matters in Data Transmission (15 minutes)","text":"<p>Now that you understand HOW data travels across the internet, let's explore WHY security is critical at every step.</p>"},{"location":"web_development/how_the_web_works/#the-security-challenge","title":"The Security Challenge","text":"<p>Remember our jigsaw puzzle analogy? Imagine if:</p> <ul> <li>Someone could intercept your puzzle pieces and see what picture you're sending</li> <li>Someone could swap out pieces with different ones</li> <li>Someone could block pieces from arriving at all</li> </ul> <p>This is exactly what can happen with data on the internet!</p>"},{"location":"web_development/how_the_web_works/#benefits-of-developing-secure-software","title":"Benefits of Developing Secure Software","text":"<p>When developers build software with security in mind from the start, they achieve:</p>"},{"location":"web_development/how_the_web_works/#1-data-protection","title":"1. Data Protection","text":"<p>What it means: Keeping sensitive information safe from unauthorised access</p> <p>Real-world examples:</p> <ul> <li>Your bank app encrypts your account details during transmission</li> <li>Your medical records are protected as they move between systems</li> <li>Your private messages stay private</li> </ul> <p>Without it:</p> <ul> <li>Credit card numbers stolen during online shopping</li> <li>Personal information exposed in data breaches</li> <li>Identity theft and fraud</li> </ul>"},{"location":"web_development/how_the_web_works/#2-minimising-cyber-attacks-and-vulnerabilities","title":"2. Minimising Cyber Attacks and Vulnerabilities","text":"<p>What it means: Reducing the opportunities for attackers to exploit weaknesses</p> <p>How data transmission creates vulnerabilities:</p> <ul> <li>Interception: Attackers can \"listen\" to unencrypted data packets</li> <li>Manipulation: Attackers can alter packets in transit</li> <li>Disruption: Attackers can block or flood networks</li> </ul> <p>Real example from data transmission: When you connect to public Wi-Fi at a caf\u00e9, without proper security:</p> <ul> <li>Attackers on the same network can intercept your packets</li> <li>They can see websites you visit, login credentials, messages</li> <li>This is called a \"man-in-the-middle\" attack</li> </ul> <p>With secure software:</p> <ul> <li>Data is encrypted (scrambled) before transmission</li> <li>Even if intercepted, packets are unreadable</li> <li>Verification ensures data hasn't been tampered with</li> </ul>"},{"location":"web_development/how_the_web_works/#introduction-to-the-cia-triad","title":"Introduction to the CIA Triad","text":"<p>Three fundamental security principles protect data as it travels across networks:</p>"},{"location":"web_development/how_the_web_works/#confidentiality","title":"Confidentiality","text":"<p>Definition: Ensuring that only authorized people can read the data</p> <p>In data transmission:</p> <ul> <li>Packets travelling over HTTP can be read by anyone who intercepts them</li> <li>Packets travelling over HTTPS are encrypted - they look like gibberish to interceptors</li> <li>DNS requests can reveal what websites you're visiting (privacy concern)</li> </ul> <p>Analogy: </p> <ul> <li>HTTP is like sending a postcard - anyone handling it can read your message</li> <li>HTTPS is like sending a sealed, locked box - only the recipient has the key</li> </ul> <p>Think about it: When you traced the route of packets with <code>traceroute</code>, you saw they passed through many different networks (hops). Each hop is a potential point where someone could intercept and read unencrypted data!</p>"},{"location":"web_development/how_the_web_works/#integrity","title":"Integrity","text":"<p>Definition: Ensuring data hasn't been altered during transmission</p> <p>In data transmission:</p> <ul> <li>TCP includes checksums to verify packets haven't been corrupted</li> <li>If a packet is damaged, TCP requests it be resent</li> <li>Without integrity checks, altered data could cause serious problems</li> </ul> <p>Real-world scenario: Imagine you're transferring $100 to a friend. Without integrity protection:</p> <ul> <li>An attacker intercepts the packet</li> <li>Changes the recipient or amount</li> <li>Your $100 goes to the wrong person!</li> </ul> <p>How it's protected:</p> <ul> <li>Checksums: Mathematical \"fingerprints\" of data</li> <li>If data changes, the checksum won't match</li> <li>Receiver knows something went wrong</li> </ul>"},{"location":"web_development/how_the_web_works/#availability","title":"Availability","text":"<p>Definition: Ensuring data and services are accessible when needed</p> <p>In data transmission:</p> <ul> <li>Networks must be able to handle traffic loads</li> <li>Packets must successfully reach their destination</li> <li>Systems must recover quickly from failures</li> </ul> <p>Threats to availability:</p> <ul> <li>DDoS (Distributed Denial of Service) attacks: Flooding servers with so many packets they can't respond to legitimate requests</li> <li>Packet loss: Too many dropped packets make services unusable</li> <li>Network congestion: Like traffic jams, but for data</li> </ul> <p>Example: Remember when you used <code>ping</code> and saw response times? If response times are too high or packets are lost, the service becomes unavailable - it's technically online but unusable.</p>"},{"location":"web_development/how_the_web_works/#security-across-the-journey","title":"Security Across the Journey","text":"<p>Let's revisit our 6-step web request journey with a security lens:</p> Step Security Concern How It's Protected 1. DNS Lookup DNS requests are unencrypted - anyone can see what sites you're visiting DNS over HTTPS (DoH) encrypts DNS queries 2. Making Request HTTP requests sent in plain text Use HTTPS instead of HTTP 3. Data Packets Packets can be intercepted and read Encryption scrambles packet contents 4. TCP/IP Packets could be altered Checksums verify data integrity 5. Server Response Response data could be intercepted HTTPS encrypts the entire response 6. Rendering Browser could execute malicious code Sandboxing isolates potentially dangerous code"},{"location":"web_development/how_the_web_works/#discussion-activity-security-vs-speed","title":"Discussion Activity: Security vs. Speed","text":"<p>Read this scenario and write your thoughts:</p> <p>Scenario: A developer is building a weather app. They're debating whether to use HTTP or HTTPS.</p> <p>Arguments for HTTP: - Faster (no encryption overhead) - Easier to implement - \"It's just weather data, not sensitive information\"</p> <p>Arguments for HTTPS: - Protects user privacy (what weather they check reveals their location) - Prevents data manipulation (fake weather warnings could be injected) - Builds user trust - Modern browsers mark HTTP as \"Not Secure\"</p> <p>Your task: 1. Which approach would you recommend? Why? 2. Can you think of scenarios where \"non-sensitive\" data could still be exploited? 3. What would happen if an attacker could inject false information into the weather app? 4. As a developer, what's your responsibility to users even for \"simple\" apps?</p> <p>Reflection</p> <p>Write 100-150 words defending your position. Consider: confidentiality, integrity, and availability.</p>"},{"location":"web_development/how_the_web_works/#extended-reading","title":"Extended Reading","text":"<ul> <li>What\u2019s the difference between HTTP and HTTPS?</li> </ul>"},{"location":"web_development/how_the_web_works/#part-3-visualising-the-journey-20-minutes","title":"Part 3: Visualising the Journey (20 minutes)","text":""},{"location":"web_development/how_the_web_works/#using-online-tools","title":"Using Online Tools","text":"<ol> <li>Visit: Cloudflare DNS Learning</li> <li>Read the interactive explanation of DNS</li> <li>Create a simple flowchart showing the DNS lookup process</li> </ol>"},{"location":"web_development/how_the_web_works/#using-command-line-tools","title":"Using Command Line Tools","text":"<p>(Works on Windows, Mac, or Linux)</p> <p>On Windows (Command Prompt):</p> <pre><code>ping www.google.com\ntracert www.google.com\nnslookup www.google.com\n</code></pre> <p>On Mac/Linux (Terminal):</p> <pre><code>ping www.google.com\ntraceroute www.google.com\nnslookup www.google.com\n</code></pre>"},{"location":"web_development/how_the_web_works/#what-to-observe","title":"What to Observe","text":"<ul> <li><code>ping</code>: Shows the IP address and response time</li> <li><code>tracert/traceroute</code>: Shows all the \"hops\" your data takes across the internet</li> <li><code>nslookup</code>: Shows the DNS server response with IP address</li> </ul> <p>Record in Your Journal</p> <ul> <li>What IP address did you get for google.com?</li> <li>How many hops did the traceroute show?</li> <li>How long did each step take?</li> </ul>"},{"location":"web_development/how_the_web_works/#part-4-investigation-task-packet-detective-30-40-minutes","title":"Part 4: Investigation Task: Packet Detective (30-40 minutes)","text":"<p>Your Mission: Investigate three different websites and document how data travels to reach them.</p>"},{"location":"web_development/how_the_web_works/#choose-three-websites-from-different-categories","title":"Choose Three Websites from Different Categories","text":"<ul> <li>A social media site (e.g., facebook.com, instagram.com)</li> <li>An educational site (e.g., khanacademy.org, abc.net.au/education)</li> <li>A streaming service (e.g., youtube.com, spotify.com)</li> </ul>"},{"location":"web_development/how_the_web_works/#for-each-website-complete-the-following","title":"For Each Website, Complete the Following","text":"<p>1. DNS Investigation</p> <ul> <li>Use <code>nslookup [website]</code> to find the IP address</li> <li>Record: Domain name, IP address, DNS server used</li> </ul> <p>2. Route Tracing</p> <ul> <li>Use <code>tracert/traceroute [website]</code></li> <li>Count: How many hops does it take?</li> <li>Record: The geographic locations (if identifiable) the data passes through</li> </ul> <p>3. Response Time Analysis</p> <ul> <li>Use <code>ping [website]</code></li> <li>Record: Minimum, maximum, and average response times</li> <li>Question: Why might some sites be faster than others?</li> </ul>"},{"location":"web_development/how_the_web_works/#create-a-comparison-table","title":"Create a Comparison Table","text":"Website IP Address Number of Hops Average Ping Time Geographic Path"},{"location":"web_development/how_the_web_works/#analysis-questions","title":"Analysis Questions","text":"<ol> <li>Which website had the fastest response time? Why do you think this is?</li> <li>Did any websites have servers in multiple locations?</li> <li>How might packet loss affect your experience on each of these sites?</li> <li>If you were designing a global website, what would you consider based on what you've learned?</li> </ol>"},{"location":"web_development/how_the_web_works/#security-focused-questions","title":"Security-Focused Questions","text":"<ol> <li>Confidentiality: Which website travelled through the most hops? What are the security implications of data travelling through more networks?</li> <li>Integrity: If a packet was altered during transmission, which step in the journey would detect it? (Hint: Think about TCP)</li> <li>Availability: Compare the ping times. If a website had very high response times or packet loss, how would this affect availability?</li> <li>Risk Assessment: For each website type (social media, educational, streaming), rate the importance of:</li> <li>Confidentiality (1-5): _____</li> <li>Integrity (1-5): _____</li> <li>Availability (1-5): _____</li> </ol> <p>Explain your ratings.</p>"},{"location":"web_development/how_the_web_works/#creative-challenge-design-your-own-protocol","title":"Creative Challenge: Design Your Own Protocol","text":"<p>Note</p> <p>This is the same process that a High Frequency Trading firm might follow to design their own communication protocols for tracking markets, risk analysis or trading between 2 or more different departments (desks) within the same company.</p> <p>Imagine you're designing a new way to send messages across a network where:</p> <ul> <li>Messages can be maximum 10 words long</li> <li>Networks can only handle 3 words at a time</li> <li>20% of packets get lost or delayed</li> </ul> <p>Design a system that includes:</p> <ol> <li>How you'll break messages into chunks</li> <li>How you'll number/identify chunks</li> <li>How you'll detect missing chunks</li> <li>How you'll ensure chunks are reassembled correctly</li> </ol> <p>Test Your Protocol</p> <p>Write your protocol rules and test it by:</p> <ul> <li>Writing a 10-word message</li> <li>Breaking it according to your rules</li> <li>Having a family member or friend \"receive\" the chunks out of order</li> <li>See if they can reassemble your message correctly</li> </ul>"},{"location":"web_development/how_the_web_works/#part-5-reflection-extension-10-minutes","title":"Part 5: Reflection &amp; Extension (10 minutes)","text":""},{"location":"web_development/how_the_web_works/#learning-journal-entry","title":"Learning Journal Entry","text":"<p>Answer these reflection questions:</p> <ol> <li>How is sending data across the internet similar to our jigsaw puzzle analogy? How is it different?</li> <li>What surprised you most about how data travels on the internet?</li> <li>Why do you think TCP ensures packets arrive in order? What would happen if they didn't?</li> <li>How does understanding data transmission help you think about internet security?</li> </ol>"},{"location":"web_development/how_the_web_works/#security-reflection","title":"Security Reflection","text":"<ol> <li> <p>Benefits of Secure Software: Now that you understand how many networks your data passes through, explain in your own words why developers need to build security into software from the beginning. What could go wrong if they don't?</p> </li> <li> <p>CIA Triad Application: Give a specific example from today's lesson for each principle:</p> </li> <li>Confidentiality: How could data packets be kept confidential? _____</li> <li>Integrity: How does TCP maintain integrity? _____</li> <li> <p>Availability: What threats to availability did you observe? _____</p> </li> <li> <p>Real-world Impact: Think about an app you use daily (social media, banking, gaming, etc.). Based on what you learned about how data travels:</p> </li> <li>What security features do you think are protecting your data?</li> <li>What would happen if those security features were removed?</li> <li>How would you feel knowing your data travelled unencrypted through 10+ different networks?</li> </ol>"},{"location":"web_development/how_the_web_works/#extension-resources","title":"Extension Resources","text":"<ul> <li>Interactive visualisation: Submarine Cable Map - See physical internet infrastructure</li> <li>Video: <ul> <li>Search for \"Warriors of the Net\" - a classic visualisation of packets travelling through the internet and a bit of a laugh.</li> <li>Cisco Packet Tracer - Simulate network traffic and protocols</li> <li> Client-Server and Peer-to-Peer Networks</li> </ul> </li> </ul>"},{"location":"web_development/how_the_web_works/#prepare-for-next-lesson","title":"Prepare for Next Lesson","text":"<p>Next time, we'll explore the different protocols that govern how data is formatted and secured. </p> <p>Think About</p> <p>What's the difference between HTTP and HTTPS? Why does it matter?</p>"},{"location":"web_development/how_the_web_works/#syllabus-alignment","title":"Syllabus Alignment","text":""},{"location":"web_development/how_the_web_works/#programming-for-the-web","title":"Programming for the Web","text":"<p>\u2713 Investigate how data is transferred on the internet (data packets, IP addresses IPv4, DNS) \u2713 Explore and explain the influence of a web browser on web development, including dev tools</p>"},{"location":"web_development/how_the_web_works/#secure-software-architecture","title":"Secure Software Architecture","text":"<p>\u2713 Describe benefits of developing secure software (data protection, minimising cyber attacks) \u2713 Explore fundamental security concepts (introduction to confidentiality, integrity, availability)</p>"},{"location":"web_development/how_the_web_works/#checklist","title":"Checklist","text":"<p>Before moving to the next lesson, ensure you have completed:</p> <ul> <li> The DNS investigation of 3 websites</li> <li> Created a Structure Chart for Visiting a Website</li> <li> Performed traceroute analysis with data recorded</li> <li> Analysed security implications of multiple network hops</li> <li> Completed Security vs. Speed discussion (weather app scenario)</li> <li> Created your own packet protocol design</li> <li> Tested your protocol with another person</li> <li> Answered all reflection questions in your journal</li> <li> Created a flowchart showing the DNS lookup process</li> <li> Explained the benefits of secure software development in your journal</li> </ul> Teacher Notes <p>Formative Assessment Opportunities:</p> <ul> <li>Journal entries demonstrate understanding of both technical and security concepts</li> <li>Comparison table shows ability to use command-line tools</li> <li>Protocol design demonstrates creative application of packet concepts</li> <li>Security vs. Speed discussion reveals understanding of security benefits</li> <li>CIA Triad application shows grasp of fundamental security principles</li> <li>Reflection questions assess depth of understanding of security in data transmission</li> </ul> <p>Common Misconceptions to Address:</p> <ul> <li>Students may think data travels in one piece</li> <li>Students may confuse IP addresses with MAC addresses</li> <li>Students may not understand why packets take different routes</li> <li>Students may assume \"just technical data\" doesn't need security</li> <li>Students may think encryption is only for \"important\" websites</li> <li>Students may not realise how many networks their data passes through</li> </ul> <p>Security Concepts Addressed:</p> <ul> <li>Confidentiality: Introduced through the vulnerability of unencrypted packets travelling through multiple networks</li> <li>Integrity: Demonstrated through TCP checksums and packet verification</li> <li>Availability: Explored through packet loss, response times, and DDoS concepts</li> <li>Benefits of secure software: Connected to protecting data as it traverses untrusted networks</li> </ul> <p>Differentiation:</p> <ul> <li>Extension: Research IPv6 and compare to IPv4; investigate DNS over HTTPS (DoH)</li> <li>Support: Provide pre-filled partial tables and sentence starters for CIA analysis</li> <li>Alternative: Use online traceroute tools if command line is not accessible</li> </ul> <p>Key Teaching Point: This lesson establishes the foundation for understanding WHY security matters by showing students that their data travels through many untrusted networks. This makes the need for encryption (Lesson 2) and security practices (Lesson 3) concrete and relatable rather than abstract.</p>"}]}